{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/20180327-mvc-rest-json.jpg","path":"img/20180327-mvc-rest-json.jpg","modified":1,"renderable":0},{"_id":"source/img/35158-20161123152222393-97209354.png","path":"img/35158-20161123152222393-97209354.png","modified":1,"renderable":0},{"_id":"source/img/20180327-mvc-rest-hello.jpg","path":"img/20180327-mvc-rest-hello.jpg","modified":1,"renderable":0},{"_id":"source/img/35158-20161123152223300-1537569135.png","path":"img/35158-20161123152223300-1537569135.png","modified":1,"renderable":0},{"_id":"source/img/35158-20161123152222784-1667486593.png","path":"img/35158-20161123152222784-1667486593.png","modified":1,"renderable":0},{"_id":"source/img/20161123020626355.png","path":"img/20161123020626355.png","modified":1,"renderable":0},{"_id":"source/img/35158-20161123152223893-970376784.png","path":"img/35158-20161123152223893-970376784.png","modified":1,"renderable":0},{"_id":"source/img/polygonCentroid.png","path":"img/polygonCentroid.png","modified":1,"renderable":0},{"_id":"source/img/polygonarea.png","path":"img/polygonarea.png","modified":1,"renderable":0},{"_id":"source/img/20171011114902806.jpg","path":"img/20171011114902806.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1539755331935},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1509151219000},{"_id":"themes/landscape/_config.yml","hash":"218c5fb76666696c42dc86e2de4711e6b80befbf","modified":1539755331959},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1539755331945},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1539755331952},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1539755331940},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1539755332171},{"_id":"source/_posts/Markdown-markdown.md","hash":"b9af7f8d0decd1952be30155c75868a0c631b2f6","modified":1539755331057},{"_id":"source/_posts/MyBatis-generator.md","hash":"23a7ebe1185e6b5dc3a681ec936bf3ac980e2aa1","modified":1539755331063},{"_id":"source/_posts/Webhook 实践 —— 自动部署.md","hash":"a090565c4303a9dac88d7dd7174f7a3679877253","modified":1539755331074},{"_id":"source/_posts/aes-rsa加密机制.md","hash":"fef385f4ab739b97582a43a0a72a281e7a21d922","modified":1539755331077},{"_id":"source/_posts/Spring+MyBatis实现数据库读写分离方案.md","hash":"72459a964f2e0d9bd6a1f8b72918e5028f680e7d","modified":1539755331070},{"_id":"source/_posts/git-Branch和Tag的区别.md","hash":"076983e60751bec1c7df5c844d104ee74f3a985a","modified":1539755331081},{"_id":"source/_posts/druid_解密数据库密码.md","hash":"cc29a2e0ce98ad342ac8eeea2e644e2564bd58d9","modified":1539756384162},{"_id":"source/_posts/git-EGIT插件.md","hash":"0a6c1e57b765d338709e9710795c6bdd0f8e1f92","modified":1539755331084},{"_id":"source/_posts/git-GitHub 基本常用知识解答.md","hash":"9733aaeda345050e7c00482adebe645d994783dd","modified":1539755331089},{"_id":"source/_posts/git-GitHub 基本常用知识解答2.md","hash":"7dc58425368b035f94a081c36b1d036f9ca18efc","modified":1539755331093},{"_id":"source/_posts/git-github 快速实现多人协作.md","hash":"89a22519a23adfcbca57443a4445f6580ddd310a","modified":1539755331101},{"_id":"source/_posts/git-git和github 关系.md","hash":"c44751c248e19e313c82c845800b62795262c5cd","modified":1539755331105},{"_id":"source/_posts/git-pull request 是什么意思.md","hash":"bb591dc77ab1fe221c561f7347d4860dd0ed0047","modified":1539755331112},{"_id":"source/_posts/git-分支管理策略.md","hash":"83cf10abea6b3adae27a431170cdc841a0044518","modified":1539755331122},{"_id":"source/_posts/git-github 实现多人协同提交代码并且权限分组管理.md","hash":"921d3c9687159226a478ad932358a79362b4231e","modified":1539755331096},{"_id":"source/_posts/git-和远程仓库比较、文件替换.md","hash":"b4252933443fef8134bc509476050610c53fa668","modified":1539755331126},{"_id":"source/_posts/git-版本回退reset和revert区别.md","hash":"39ea4821151a25620f1146f65cae9908aa4517e6","modified":1539758946514},{"_id":"source/_posts/git-reset soft,hard,mixed之区别深解.md","hash":"50661686982c99fffbe0384a73087d6733731070","modified":1539755331117},{"_id":"source/_posts/javascript-Centroid_of_polygon.md","hash":"02aa94bc3e0dfa800c0910e5589b5abee6390082","modified":1539755331142},{"_id":"source/_posts/hello-world.md","hash":"374be59e0f374d838aef00bc5792c773fd697164","modified":1539755331133},{"_id":"source/_posts/java设计模式.md","hash":"414ac10797ef892e599a97540f417ffa12e4e43f","modified":1539755331148},{"_id":"source/_posts/javascript-PolygonMaxXY.md","hash":"9ba5b76a5fe785979ee7730d47452e678864558d","modified":1539755331145},{"_id":"source/_posts/jprofiler_remote_linux.md","hash":"0a6ec090242a5a0ce4d946acd5b503f2de50b4e4","modified":1539756384178},{"_id":"source/_posts/jetty_springMVC.md","hash":"69cb386cfa9adcdd268761e83569cbbf184a8848","modified":1539756384170},{"_id":"source/_posts/git-new-article.md","hash":"56958541d112a86eb4d01b46038309f24ed44c7c","modified":1539755331109},{"_id":"source/_posts/java-createBatchId.md","hash":"7e5b2be82cf2c268ba6b4ffdea151a5d2290488c","modified":1539755331138},{"_id":"source/_posts/spring整合rocketmq.md","hash":"313a06df2559936d6013902fae2c3909621e23d1","modified":1539755331158},{"_id":"source/_posts/springmvc 注解实现权限拦截.md","hash":"b82cf9c5dc4c0d4eeb989bd012ee261b4acb400f","modified":1539755331155},{"_id":"source/_posts/windows下安装rabbitmq及操作常用命令.md","hash":"2d25f0d67bd475328d8c18b437df48eb10023d56","modified":1539755331162},{"_id":"source/_posts/对称加密与非对称加密.md","hash":"0dbf8c243133461b098d7ca2bbaca9dfcd188a26","modified":1539755331171},{"_id":"source/_posts/spring-boot_条件加载.md","hash":"8e7263db15d57da5b23d92784957eb8105269397","modified":1539756384185},{"_id":"source/img/20180327-mvc-rest-json.jpg","hash":"e0f0869b15a0ab2335d76b2fcfec73c9e5803386","modified":1539756059262},{"_id":"source/_posts/用Visio画UML顺序图.md","hash":"9e126109d650ba5cc739555b9d4548bd6a9cb417","modified":1539755331174},{"_id":"source/_posts/关于rabbitmq以及rabbitmq和spring的整合.md","hash":"e197fe426e2ae6e58378b361336c1285b9175407","modified":1539755331165},{"_id":"source/img/35158-20161123152222393-97209354.png","hash":"2c92456a43d19f8863810f9a9453ebe0028a6e31","modified":1539756059224},{"_id":"source/img/20180327-mvc-rest-hello.jpg","hash":"18795fc7f1e46f5e260ae96d6ef363a63f6ddf6d","modified":1539756059255},{"_id":"source/img/35158-20161123152223300-1537569135.png","hash":"eeade74739529eb58f47ae57bfc8907231d3b1c3","modified":1539756059239},{"_id":"source/img/35158-20161123152222784-1667486593.png","hash":"fbd36ab12741ba17fe779ec7f71f0bdc352d29b8","modified":1539756059232},{"_id":"source/img/20161123020626355.png","hash":"38d1dbe59e4432b2c4d8e8a2e7dcacfe2a6df7c7","modified":1539756059334},{"_id":"source/img/35158-20161123152223893-970376784.png","hash":"310f22ee01221475cfae2080a9d7a8b0c1275266","modified":1539756059248},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1509151219000},{"_id":"source/img/polygonCentroid.png","hash":"01d4110bdd630890ae7ed32986eb743c8ca014c4","modified":1539755331184},{"_id":"source/img/polygonarea.png","hash":"4b0ed6f5b2914ec304e9d5423b72b574bdb3e035","modified":1539755331188},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1509151219000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1509151219000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1509151219000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1509151219000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1509151219000},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1539755331968},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1509151219000},{"_id":"source/_posts/python-anaconda的使用及配置方法.md","hash":"60bbc6214b71daadc884e71df649252ea186ce2c","modified":1539755331151},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1509151219000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1509151219000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1509151219000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1509151219000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1509151219000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1509151219000},{"_id":"source/about/index.md","hash":"99443c61c73090589e625d89cccd6f9335af1e00","modified":1539755331179},{"_id":"source/img/20171011114902806.jpg","hash":"3ff9e39102873fbf5fef333ff287ac0e3cba6a63","modified":1539756059350},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1509151219000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1509151219000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1509151219000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1509151219000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1509151219000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1509151219000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1509151219000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1509151219000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509151219000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1509151219000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1509151219000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1509151219000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1509151219000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1509151219000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1509151219000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1509151219000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1509151219000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1509151219000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1509151219000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1509151219000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1509151219000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1509151219000},{"_id":"public/about/index.html","hash":"086d5914acd928edf357d7c27f82b9d31b8126a1","modified":1539761038602},{"_id":"public/2018/10/17/java设计模式/index.html","hash":"ee7218dd4ade450d58b5625343ef28b46e34b487","modified":1539761038602},{"_id":"public/2018/10/17/druid_解密数据库密码/index.html","hash":"4a202b7e8d51b8e55f5d8d938c3d78cd489deba3","modified":1539761038603},{"_id":"public/2017/12/05/jprofiler_remote_linux/index.html","hash":"64cafd4a8cff55a18977c72d62ef8172a7b802ab","modified":1539761038603},{"_id":"public/2017/07/18/git-github 快速实现多人协作/index.html","hash":"c87f85ffdae206ef0ec97fe99c3676f8d9b3672c","modified":1539761038603},{"_id":"public/2017/07/18/git-和远程仓库比较、文件替换/index.html","hash":"bfd75cd93b49c039a57115c241bf71470a07c361","modified":1539761038603},{"_id":"public/2017/07/18/git-Branch和Tag的区别/index.html","hash":"d071025654e07dfbfdf5a13414b505c9f5738a2c","modified":1539761038604},{"_id":"public/2017/07/18/git-GitHub 基本常用知识解答2/index.html","hash":"c8d79407faa18e0dd57dd08e1b1276932128418e","modified":1539761038604},{"_id":"public/2017/07/18/git-pull request 是什么意思/index.html","hash":"0fd4946289d0a559713f7adb2420f7669c8cc211","modified":1539761038604},{"_id":"public/2017/07/18/git-git和github 关系/index.html","hash":"75c12a25ce16ccdbc4c64bd17582b0cbe74b6a0b","modified":1539761038604},{"_id":"public/2016/12/19/git-new-article/index.html","hash":"59ce79974043a281e4ed09587c01af8d24b6c4eb","modified":1539761038604},{"_id":"public/2016/07/13/hello-world/index.html","hash":"37076467d6b202b91324916443359f3f04d633e5","modified":1539761038604},{"_id":"public/categories/git/index.html","hash":"c8b4f8ae31e9a8de98272bd2b07bbd9a3426648b","modified":1539761038604},{"_id":"public/categories/git/page/2/index.html","hash":"c96755d8cdd92a0b3bbf1d4ddd354c7fbd145914","modified":1539761038604},{"_id":"public/categories/加解密/index.html","hash":"326bd42b7aaf6f5f01f05067a1c2add06ba41778","modified":1539761038604},{"_id":"public/categories/java/index.html","hash":"fd8352b297adc6d9cb81dfb51eb48f57dc3a6fec","modified":1539761038604},{"_id":"public/categories/hexo/index.html","hash":"2070505559ca5ca8f6eb7aa7326150451dd54684","modified":1539761038604},{"_id":"public/categories/javascript/index.html","hash":"14941f675af75c69bb9405abd28ec15c4de9fdd0","modified":1539761038605},{"_id":"public/categories/MQ/index.html","hash":"8117ac216c3a591f87c04c54bf159312adb30576","modified":1539761038605},{"_id":"public/categories/spring-mvc/index.html","hash":"d388e12117d73fa6758d7c3e3138820022272ba2","modified":1539761038605},{"_id":"public/categories/流程图/index.html","hash":"97952433471c694ad6adb57bc7e976d5b136b530","modified":1539761038605},{"_id":"public/categories/Python/index.html","hash":"7f634bcdc4f2c44ceb1efdde72c05ad484a1040b","modified":1539761038605},{"_id":"public/categories/Markdown/index.html","hash":"4bfa36918503fc5f10eaab279d8d6b4e1a55c8e6","modified":1539761038605},{"_id":"public/categories/MyBatis/index.html","hash":"11943478182c2515e69569ceb413fb08236b5843","modified":1539761038605},{"_id":"public/archives/index.html","hash":"0aca4b8f9017788ab3bffef2fe53aa54abda0ab4","modified":1539761038605},{"_id":"public/archives/page/2/index.html","hash":"85b826996b20387d9f0591879af9da7c6bc42743","modified":1539761038605},{"_id":"public/archives/page/3/index.html","hash":"8c4cfaf01f4c484e40bc0bb6137c8ed5854ef108","modified":1539761038605},{"_id":"public/archives/page/4/index.html","hash":"d4a30e22d93be6907f32f1551b8186f9e8f7d69f","modified":1539761038605},{"_id":"public/archives/2016/index.html","hash":"8dbe3fb6e314edf13b4938b1c07ea90b45964e16","modified":1539761038605},{"_id":"public/archives/2016/07/index.html","hash":"83fe290b6f6c97adca136fbff1deacd6cc7f3f69","modified":1539761038605},{"_id":"public/archives/2016/12/index.html","hash":"48abdd73a329622ccc726995f0cd55f784693ce2","modified":1539761038606},{"_id":"public/archives/2017/index.html","hash":"3c9413c9094a352ecb4dc3887a79e7b960649950","modified":1539761038606},{"_id":"public/archives/2017/page/2/index.html","hash":"ab7f82b3f77a3188e4ed0ed7b86c6335e47e9cbd","modified":1539761038606},{"_id":"public/archives/2017/page/3/index.html","hash":"cb782fc0daaff2ce4c96b931d3cf0258634ed0b4","modified":1539761038606},{"_id":"public/archives/2017/07/index.html","hash":"680dea833daead739bf5c6cc7d49077dd78193cc","modified":1539761038606},{"_id":"public/archives/2017/07/page/2/index.html","hash":"6236d393d9d0af033649aa111122795e925b04f3","modified":1539761038606},{"_id":"public/archives/2017/08/index.html","hash":"06c16bd57b1f71d4015d0f324408f26407f7c999","modified":1539761038606},{"_id":"public/archives/2017/09/index.html","hash":"466c1ca8fb85768641fa17c109d571475fd233c0","modified":1539761038606},{"_id":"public/archives/2017/10/index.html","hash":"57edec3b34b8b657cc6d9f19878c9171f6a11b29","modified":1539761038606},{"_id":"public/archives/2017/12/index.html","hash":"67fbe29007a8bcea3b56d6b05d2086107170040b","modified":1539761038606},{"_id":"public/archives/2018/index.html","hash":"d148e3eb7b9dacb1b697cfa0584d9289dbd41385","modified":1539761038606},{"_id":"public/archives/2018/10/index.html","hash":"714faaf69ce8dcd2127785dcabd380d6957bbde5","modified":1539761038606},{"_id":"public/tags/GitHub/index.html","hash":"76f557d25bb522919054f7bb4d14751e5157bfef","modified":1539761038606},{"_id":"public/tags/GitHub/page/2/index.html","hash":"de9355b8b5842778275479ec71e1df59412e745a","modified":1539761038606},{"_id":"public/tags/RSA/index.html","hash":"6feeef85ba3773aee90b44bfeb251ae415837bd7","modified":1539761038607},{"_id":"public/tags/AES/index.html","hash":"94eeab1fe333e72a5e289cbfbd452923738b1c9a","modified":1539761038607},{"_id":"public/tags/DRUID/index.html","hash":"36b70e2109477778ad5d0937d38ccc3a8c6342dc","modified":1539761038607},{"_id":"public/tags/hexo/index.html","hash":"b7653e05e470df4e631790577ee427175881bb82","modified":1539761038608},{"_id":"public/tags/arithmetic/index.html","hash":"7da283ac9442c9882e234a4895fdced5ba0b164d","modified":1539761038608},{"_id":"public/tags/jprofiler/index.html","hash":"2736433f752dbdb98873eb37313d64dc518fb524","modified":1539761038608},{"_id":"public/tags/linux/index.html","hash":"36355a43d1215a40f2ba662255c8d3bf797e6131","modified":1539761038608},{"_id":"public/tags/UUID/index.html","hash":"50a1f267761effec5e83ccdd7fdbdbd8e7392e7d","modified":1539761038608},{"_id":"public/tags/RocketMQ/index.html","hash":"89d6b69edd7d7a65062680684bd456fc34abc759","modified":1539761038608},{"_id":"public/tags/spring/index.html","hash":"aebb04caee72fce0300454c0968a3b7701423f72","modified":1539761038608},{"_id":"public/tags/springboot/index.html","hash":"890adf73450c61722cd3d8d3b2d88664b13dd66f","modified":1539761038608},{"_id":"public/tags/uml/index.html","hash":"5dd25f0bb1a2287f103711db967ddec4cc88738e","modified":1539761038609},{"_id":"public/tags/RabbitMQ/index.html","hash":"2d969398b25e7e24010497efdfaf93409f916113","modified":1539761038609},{"_id":"public/tags/jetty/index.html","hash":"552dfc6a093fc27d25cf7f88dc2797dde911a7ad","modified":1539761038609},{"_id":"public/tags/windows/index.html","hash":"862a99c30467fc96ed2263a03fc833f4b14bd039","modified":1539761038609},{"_id":"public/tags/Anaconda/index.html","hash":"a5062c6951bfd3bd33fada6310b884d401f44870","modified":1539761038609},{"_id":"public/tags/Markdown/index.html","hash":"8a8568ce5f6cdd5fb9367f22e5ac6ea30827e1b4","modified":1539761038609},{"_id":"public/tags/Atom/index.html","hash":"52e1a1d90242dda3e07c19c0543e0935c136a8f7","modified":1539761038609},{"_id":"public/tags/generator/index.html","hash":"bcc6e2aab20f144adf909e9ae5ca1c803aee6b0d","modified":1539761038609},{"_id":"public/tags/EGIT/index.html","hash":"a1d180e103717f6fef1999b12ebd7c0c4c1932a0","modified":1539761038610},{"_id":"public/tags/Spring/index.html","hash":"ec0f2bbf5ca2b815fa42cb086701141df00738e4","modified":1539761038610},{"_id":"public/tags/MyBatis/index.html","hash":"07fa1c9e102651a8f1afa3b88e3a9cdf76f2985a","modified":1539761038610},{"_id":"public/2017/12/20/windows下安装rabbitmq及操作常用命令/index.html","hash":"5e8686dc470399017c4983396a40461fa3b5041d","modified":1539761038610},{"_id":"public/2017/12/15/关于rabbitmq以及rabbitmq和spring的整合/index.html","hash":"d4ec27715264617738ab351aed1f4b8d60ba743a","modified":1539761038610},{"_id":"public/2017/12/15/spring整合rocketmq/index.html","hash":"99577b45a836ed944fa7b8d39bc18475408b00d9","modified":1539761038610},{"_id":"public/2017/12/05/对称加密与非对称加密/index.html","hash":"3d458ae8cbb37d2df4498777f1132c8926ae254a","modified":1539761038610},{"_id":"public/2017/12/05/aes-rsa加密机制/index.html","hash":"5b9e773ac018533965cd82a83ad621f60b469bd8","modified":1539761038610},{"_id":"public/2017/10/17/jetty_springMVC/index.html","hash":"cc85b933abdc277076178dbf45a731a59c07417e","modified":1539761038611},{"_id":"public/2017/10/17/spring-boot_条件加载/index.html","hash":"ea6e580dd40a0003f84f17a57d714980485a7b15","modified":1539761038611},{"_id":"public/2017/10/16/用Visio画UML顺序图/index.html","hash":"bf9be63d2dbb1532ee2c36a79c2e9f3dcf9bdcea","modified":1539761038611},{"_id":"public/2017/09/07/springmvc 注解实现权限拦截/index.html","hash":"c05bfb78997ad44e49b79cfdc17b3a6e5ca4ee44","modified":1539761038611},{"_id":"public/2017/08/15/Spring+MyBatis实现数据库读写分离方案/index.html","hash":"102c945e950a8141d8b0ab3ffa560ca096d11a15","modified":1539761038611},{"_id":"public/2017/08/03/Webhook 实践 —— 自动部署/index.html","hash":"db7e3d1434a13f7a4126b39010aec551f64e946e","modified":1539761038611},{"_id":"public/2017/07/18/git-分支管理策略/index.html","hash":"1a36f67f4d3b70b5e3208cc36817d93504e019bb","modified":1539761038611},{"_id":"public/2017/07/18/git-版本回退reset和revert区别/index.html","hash":"91c448b13df52f22a8c36c3a6589e8ee2666e942","modified":1539761038611},{"_id":"public/2017/07/18/git-GitHub 基本常用知识解答/index.html","hash":"8b5d59de94a87c3b1737f1a93ad2b59cc8c79790","modified":1539761038611},{"_id":"public/2017/07/18/git-reset soft,hard,mixed之区别深解/index.html","hash":"273da5249b8ae39cb65b69ae300bb1a8f7bb7a87","modified":1539761038612},{"_id":"public/2017/07/17/git-github 实现多人协同提交代码并且权限分组管理/index.html","hash":"1fc8d268ba671f1e422d8e00d44cfd2a250a396f","modified":1539761038612},{"_id":"public/2017/07/17/python-anaconda的使用及配置方法/index.html","hash":"492624e9cad85790dd38677b203b943e82ec7661","modified":1539761038612},{"_id":"public/2017/07/13/git-EGIT插件/index.html","hash":"f2e5dfa5eb8899aafe689b0c9e992759afac1419","modified":1539761038612},{"_id":"public/2017/07/13/MyBatis-generator/index.html","hash":"9b622dfa82eec27e98ed27690a1d36b159daed88","modified":1539761038612},{"_id":"public/2016/12/30/java-createBatchId/index.html","hash":"f5e0e656068aed3f76f9abe8c1c9cc9b1ab1e2e6","modified":1539761038612},{"_id":"public/2016/12/29/javascript-PolygonMaxXY/index.html","hash":"0ba03ec63dcbdcb1700f04984167ad18d0e376f3","modified":1539761038612},{"_id":"public/2016/12/23/javascript-Centroid_of_polygon/index.html","hash":"248f2a554e0e871ea21bf7546ab9dc62ca81fe7d","modified":1539761038612},{"_id":"public/2016/12/20/Markdown-markdown/index.html","hash":"6f39fd725c945f806f1c2448eeeaaece7533b1b1","modified":1539761038612},{"_id":"public/index.html","hash":"fa36a3e2e48cb365e239613c619761ff8a68f5ac","modified":1539761038613},{"_id":"public/page/2/index.html","hash":"a449015cdd1d7fbeda4501ddeb289e3d86458bab","modified":1539761038613},{"_id":"public/page/3/index.html","hash":"c3015545881481a96279827677de635bf1648833","modified":1539761038613},{"_id":"public/page/4/index.html","hash":"3ff8a12e6732932b0f9d29ef4c3f8e552ccf0a4a","modified":1539761038613},{"_id":"public/img/35158-20161123152222784-1667486593.png","hash":"fbd36ab12741ba17fe779ec7f71f0bdc352d29b8","modified":1539761038642},{"_id":"public/img/20161123020626355.png","hash":"38d1dbe59e4432b2c4d8e8a2e7dcacfe2a6df7c7","modified":1539761038642},{"_id":"public/img/35158-20161123152222393-97209354.png","hash":"2c92456a43d19f8863810f9a9453ebe0028a6e31","modified":1539761038642},{"_id":"public/img/polygonarea.png","hash":"4b0ed6f5b2914ec304e9d5423b72b574bdb3e035","modified":1539761038643},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539761038643},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539761038643},{"_id":"public/img/polygonCentroid.png","hash":"01d4110bdd630890ae7ed32986eb743c8ca014c4","modified":1539761038643},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539761038643},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539761038643},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539761038643},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1539761038643},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539761038643},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1539761038643},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1539761038643},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539761038643},{"_id":"public/img/20180327-mvc-rest-json.jpg","hash":"e0f0869b15a0ab2335d76b2fcfec73c9e5803386","modified":1539761039823},{"_id":"public/img/20180327-mvc-rest-hello.jpg","hash":"18795fc7f1e46f5e260ae96d6ef363a63f6ddf6d","modified":1539761039823},{"_id":"public/img/35158-20161123152223300-1537569135.png","hash":"eeade74739529eb58f47ae57bfc8907231d3b1c3","modified":1539761039824},{"_id":"public/img/35158-20161123152223893-970376784.png","hash":"310f22ee01221475cfae2080a9d7a8b0c1275266","modified":1539761039824},{"_id":"public/img/20171011114902806.jpg","hash":"3ff9e39102873fbf5fef333ff287ac0e3cba6a63","modified":1539761039824},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1539761039824},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1539761039831},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1539761039831},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539761039831},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1539761039831},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1539761039831},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539761039832},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1539761039832},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1539761039832},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1539761039834},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1539761039835},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1539761039971},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1539761040143}],"Category":[{"name":"git","_id":"cjnctyr310002k4nzbay92t3p"},{"name":"加解密","_id":"cjnctyr380007k4nzbc1lsf3y"},{"name":"java","_id":"cjnctyr3m000mk4nz8dse84dm"},{"name":"hexo","_id":"cjnctyr45001ak4nzsoqbj9fy"},{"name":"javascript","_id":"cjnctyr4c001kk4nz6qrnqj9t"},{"name":"MQ","_id":"cjnctyr4r0022k4nzxvn0zpa9"},{"name":"spring mvc","_id":"cjnctyr4x002ak4nzlbdi4vt6"},{"name":"流程图","_id":"cjnctyr4z002fk4nzxbxlwf73"},{"name":"Python","_id":"cjnctyr5v0038k4nz7wrfq5j8"},{"name":"Markdown","_id":"cjnctyr6c003ik4nzjkqs7gs8"},{"name":"MyBatis","_id":"cjnctyr6f003lk4nzsmhsdu2i"}],"Data":[],"Page":[{"title":"'about'","date":"2017-07-14T06:50:11.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: '''about'''\ndate: 2017-07-14 14:50:11\n---\n","updated":"2018-10-17T05:48:51.179Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjnctyr5l002zk4nzdzmme8ic","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Webhook 实践 —— 自动部署","date":"2017-08-03T05:00:00.000Z","_content":"[Webhook](https://developer.github.com/webhooks/)，也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 **push** 事件。如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。\n\n如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。\n\nGithub 开发者平台的文档中对 Webhook 的所能做的事是这样描述的：\n\n> You’re only limited by your imagination.\n\n## 面临的问题\n\n我目前正好面临了这样一个问题 —— 麻烦的人肉部署。也许有人看过我之前的一篇博文《[解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)》。为了解决文章中的这个问题，我最后建立了一个只服务于百度爬虫的一个备份服务器。但是随之而来的问题是，每次我的博客有些更新，都不得不 ssh 到那台服务器上把代码 pull 下来。如此做了两三次以后，我觉得我不能再这么堕落下去，于是还是决定尝试一下 Webhook。\n\n于是我要完成的事情便是完成一个能够将我最新版本的博客，随时同步到备份服务器的 Webhook。简单分析一下我需要什么：\n\n1.  一台外网可以访问的主机\n\n2.  一个能够响应 Webhook 的服务器\n\n3.  配置 Webhook\n\n## 1\\. 一台外网可访问的主机\n\n什么叫外网可访问的主机？像阿里云的试用版就不行，它不提供外网 IP。而我使用的是 DigitalOcean 的云主机，主要的作用是架梯子，现在也顺便用来做备份服务器。当然你们也可以用类似 SAE 的服务，虽然没有 IP，但有独立的外网访问地址。\n\n## 2\\. 响应 Webhook 的服务器\n\n为了响应 Webhook 所发出的请求，从而做一些我们想做的事情，我们得先实现一个响应服务器。本文采用 Node 来实现一个原型，你当然也可以用 PHP，python 等，全凭个人喜好啦。代码很短，就直接陈列在下方了：\n\n\n\n\n\n```\nvar http = require('http')\n  , exec = require('exec')\n\nconst PORT = 9988\n  , PATH = '../html'\n\nvar deployServer = http.createServer(function(request, response) {\n  if (request.url.search(/deploy\\/?$/i) > 0) {\n\n    var commands = [\n      'cd ' + PATH,\n      'git pull'\n    ].join(' && ')\n\n    exec(commands, function(err, out, code) {\n      if (err instanceof Error) {\n        response.writeHead(500)\n        response.end('Server Internal Error.')\n        throw err\n      }\n      process.stderr.write(err)\n      process.stdout.write(out)\n      response.writeHead(200)\n      response.end('Deploy Done.')\n\n    })\n\n  } else {\n\n    response.writeHead(404)\n    response.end('Not Found.')\n\n  }\n})\n\ndeployServer.listen(PORT)\n```\n\n如果还需要实现更多，更复杂的功能，直接在 `commands` 数组中添加便是。此处我的博客根目录 `html` 与部署服务器根目录同属一个目录，所以配置常量 `PATH = '../html'`。只要启动了服务器，那么 Webhook 就可以通过类似于 **[http://104.236.xxx.xxx](http://104.236.xxx.xxx):9988/deploy/** 的路径来部署我的博客备份啦。\n\n\n\n```\n# 在后台启动部署服务器\n$ node server.js &\n```\n\n我以为服务器部署到这儿就完了，其实并没有，我遇到了一些麻烦。\n\n### Run Node Server Forever\n\n我在实际使用的时候发现，我的 Node 服务器时不时会自动停掉，具体原因我暂时还没有弄清楚。不过似乎很多人都遇到了这样的困扰，要解决这个问题，[forever](https://github.com/foreverjs/forever) 是个不错的选择。借助 forever 这个库，它可以保证 Node 持续运行下去，一旦服务器挂了，它都会重启服务器。\n\n安装 forever：\n\n\n\n```\n$ [sudo] npm install -g forever\n```\n\n运行：\n\n```\n$ cd { 部署服务器的根目录 }\n$ forever start server.js\n```\n\n我在 DigitalOcean 上的服务器安装的是 **Ubuntu** 系统，而 Ubuntu 中原本就有一个叫 node 的包。为了避免冲突，在 Ubuntu 上安装或使用 Node 得用 nodejs 这个名字。而 forever 默认是使用 node 作为执行脚本的程序名。所以为了处理 Ubuntu 存在的这种特殊情况，在启动 forever 时得另外添加一个参数：\n\n\n\n```\n$ forever start server.js -c nodejs\n```\n\n## 3\\. 配置 Webhook\n\n如果像是本文这种最简易的应用，Webhook 的配置是十分简单的。首先进入你的 repo 主页，通过点击页面上的按钮 **[settings]** -> **[Webhooks & service]** 进入 Webhooks 配置主页面。也可以通过下面这个链接直接进入配置页面：\n\n\n\n```\nhttps://github.com/[ 用户名 ]/[ 仓库名称 ]/settings/hooks\n```\n\n此处只需要配置 Webhook 所发出的 POST 请求发往何处即可，于是我们就配置我们所需要的路径： **[http://104.236.xxx.xxx](http://104.236.xxx.xxx):9988/deploy/**。这个地址指向的就是那个能够响应 Webhook 所发出请求的服务器。\n\n![](https://segmentfault.com/image?src=http://jerryblog-image.b0.upaiyun.com/blog/posts/webhooks-config.png&objectId=1190000003908244&token=015aea6ef8d20f821ca1da666c2a949b)\n\n配置好 Webhook 后，Github 会发送一个 ping 来测试这个地址。如果成功了，那么这个 Webhook 前就会加上一个绿色的勾；如果你得到的是一个红色的叉，那就好好检查一下哪儿出问题了吧！\n","source":"_posts/Webhook 实践 —— 自动部署.md","raw":"---\ntitle: Webhook 实践 —— 自动部署\ndate: 2017-08-03 13:00:00\ntags: GitHub\ncategories: git\n---\n[Webhook](https://developer.github.com/webhooks/)，也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 **push** 事件。如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。\n\n如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。\n\nGithub 开发者平台的文档中对 Webhook 的所能做的事是这样描述的：\n\n> You’re only limited by your imagination.\n\n## 面临的问题\n\n我目前正好面临了这样一个问题 —— 麻烦的人肉部署。也许有人看过我之前的一篇博文《[解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)》。为了解决文章中的这个问题，我最后建立了一个只服务于百度爬虫的一个备份服务器。但是随之而来的问题是，每次我的博客有些更新，都不得不 ssh 到那台服务器上把代码 pull 下来。如此做了两三次以后，我觉得我不能再这么堕落下去，于是还是决定尝试一下 Webhook。\n\n于是我要完成的事情便是完成一个能够将我最新版本的博客，随时同步到备份服务器的 Webhook。简单分析一下我需要什么：\n\n1.  一台外网可以访问的主机\n\n2.  一个能够响应 Webhook 的服务器\n\n3.  配置 Webhook\n\n## 1\\. 一台外网可访问的主机\n\n什么叫外网可访问的主机？像阿里云的试用版就不行，它不提供外网 IP。而我使用的是 DigitalOcean 的云主机，主要的作用是架梯子，现在也顺便用来做备份服务器。当然你们也可以用类似 SAE 的服务，虽然没有 IP，但有独立的外网访问地址。\n\n## 2\\. 响应 Webhook 的服务器\n\n为了响应 Webhook 所发出的请求，从而做一些我们想做的事情，我们得先实现一个响应服务器。本文采用 Node 来实现一个原型，你当然也可以用 PHP，python 等，全凭个人喜好啦。代码很短，就直接陈列在下方了：\n\n\n\n\n\n```\nvar http = require('http')\n  , exec = require('exec')\n\nconst PORT = 9988\n  , PATH = '../html'\n\nvar deployServer = http.createServer(function(request, response) {\n  if (request.url.search(/deploy\\/?$/i) > 0) {\n\n    var commands = [\n      'cd ' + PATH,\n      'git pull'\n    ].join(' && ')\n\n    exec(commands, function(err, out, code) {\n      if (err instanceof Error) {\n        response.writeHead(500)\n        response.end('Server Internal Error.')\n        throw err\n      }\n      process.stderr.write(err)\n      process.stdout.write(out)\n      response.writeHead(200)\n      response.end('Deploy Done.')\n\n    })\n\n  } else {\n\n    response.writeHead(404)\n    response.end('Not Found.')\n\n  }\n})\n\ndeployServer.listen(PORT)\n```\n\n如果还需要实现更多，更复杂的功能，直接在 `commands` 数组中添加便是。此处我的博客根目录 `html` 与部署服务器根目录同属一个目录，所以配置常量 `PATH = '../html'`。只要启动了服务器，那么 Webhook 就可以通过类似于 **[http://104.236.xxx.xxx](http://104.236.xxx.xxx):9988/deploy/** 的路径来部署我的博客备份啦。\n\n\n\n```\n# 在后台启动部署服务器\n$ node server.js &\n```\n\n我以为服务器部署到这儿就完了，其实并没有，我遇到了一些麻烦。\n\n### Run Node Server Forever\n\n我在实际使用的时候发现，我的 Node 服务器时不时会自动停掉，具体原因我暂时还没有弄清楚。不过似乎很多人都遇到了这样的困扰，要解决这个问题，[forever](https://github.com/foreverjs/forever) 是个不错的选择。借助 forever 这个库，它可以保证 Node 持续运行下去，一旦服务器挂了，它都会重启服务器。\n\n安装 forever：\n\n\n\n```\n$ [sudo] npm install -g forever\n```\n\n运行：\n\n```\n$ cd { 部署服务器的根目录 }\n$ forever start server.js\n```\n\n我在 DigitalOcean 上的服务器安装的是 **Ubuntu** 系统，而 Ubuntu 中原本就有一个叫 node 的包。为了避免冲突，在 Ubuntu 上安装或使用 Node 得用 nodejs 这个名字。而 forever 默认是使用 node 作为执行脚本的程序名。所以为了处理 Ubuntu 存在的这种特殊情况，在启动 forever 时得另外添加一个参数：\n\n\n\n```\n$ forever start server.js -c nodejs\n```\n\n## 3\\. 配置 Webhook\n\n如果像是本文这种最简易的应用，Webhook 的配置是十分简单的。首先进入你的 repo 主页，通过点击页面上的按钮 **[settings]** -> **[Webhooks & service]** 进入 Webhooks 配置主页面。也可以通过下面这个链接直接进入配置页面：\n\n\n\n```\nhttps://github.com/[ 用户名 ]/[ 仓库名称 ]/settings/hooks\n```\n\n此处只需要配置 Webhook 所发出的 POST 请求发往何处即可，于是我们就配置我们所需要的路径： **[http://104.236.xxx.xxx](http://104.236.xxx.xxx):9988/deploy/**。这个地址指向的就是那个能够响应 Webhook 所发出请求的服务器。\n\n![](https://segmentfault.com/image?src=http://jerryblog-image.b0.upaiyun.com/blog/posts/webhooks-config.png&objectId=1190000003908244&token=015aea6ef8d20f821ca1da666c2a949b)\n\n配置好 Webhook 后，Github 会发送一个 ping 来测试这个地址。如果成功了，那么这个 Webhook 前就会加上一个绿色的勾；如果你得到的是一个红色的叉，那就好好检查一下哪儿出问题了吧！\n","slug":"Webhook 实践 —— 自动部署","published":1,"updated":"2018-10-17T05:48:51.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr2p0000k4nzmoue5get","content":"<p><a href=\"https://developer.github.com/webhooks/\" target=\"_blank\" rel=\"noopener\">Webhook</a>，也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 <strong>push</strong> 事件。如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。</p>\n<p>如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。</p>\n<p>Github 开发者平台的文档中对 Webhook 的所能做的事是这样描述的：</p>\n<blockquote>\n<p>You’re only limited by your imagination.</p>\n</blockquote>\n<h2 id=\"面临的问题\"><a href=\"#面临的问题\" class=\"headerlink\" title=\"面临的问题\"></a>面临的问题</h2><p>我目前正好面临了这样一个问题 —— 麻烦的人肉部署。也许有人看过我之前的一篇博文《<a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\" target=\"_blank\" rel=\"noopener\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a>》。为了解决文章中的这个问题，我最后建立了一个只服务于百度爬虫的一个备份服务器。但是随之而来的问题是，每次我的博客有些更新，都不得不 ssh 到那台服务器上把代码 pull 下来。如此做了两三次以后，我觉得我不能再这么堕落下去，于是还是决定尝试一下 Webhook。</p>\n<p>于是我要完成的事情便是完成一个能够将我最新版本的博客，随时同步到备份服务器的 Webhook。简单分析一下我需要什么：</p>\n<ol>\n<li><p>一台外网可以访问的主机</p>\n</li>\n<li><p>一个能够响应 Webhook 的服务器</p>\n</li>\n<li><p>配置 Webhook</p>\n</li>\n</ol>\n<h2 id=\"1-一台外网可访问的主机\"><a href=\"#1-一台外网可访问的主机\" class=\"headerlink\" title=\"1. 一台外网可访问的主机\"></a>1. 一台外网可访问的主机</h2><p>什么叫外网可访问的主机？像阿里云的试用版就不行，它不提供外网 IP。而我使用的是 DigitalOcean 的云主机，主要的作用是架梯子，现在也顺便用来做备份服务器。当然你们也可以用类似 SAE 的服务，虽然没有 IP，但有独立的外网访问地址。</p>\n<h2 id=\"2-响应-Webhook-的服务器\"><a href=\"#2-响应-Webhook-的服务器\" class=\"headerlink\" title=\"2. 响应 Webhook 的服务器\"></a>2. 响应 Webhook 的服务器</h2><p>为了响应 Webhook 所发出的请求，从而做一些我们想做的事情，我们得先实现一个响应服务器。本文采用 Node 来实现一个原型，你当然也可以用 PHP，python 等，全凭个人喜好啦。代码很短，就直接陈列在下方了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">  , exec = require(&apos;exec&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const PORT = 9988</span><br><span class=\"line\">  , PATH = &apos;../html&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">var deployServer = http.createServer(function(request, response) &#123;</span><br><span class=\"line\">  if (request.url.search(/deploy\\/?$/i) &gt; 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var commands = [</span><br><span class=\"line\">      &apos;cd &apos; + PATH,</span><br><span class=\"line\">      &apos;git pull&apos;</span><br><span class=\"line\">    ].join(&apos; &amp;&amp; &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    exec(commands, function(err, out, code) &#123;</span><br><span class=\"line\">      if (err instanceof Error) &#123;</span><br><span class=\"line\">        response.writeHead(500)</span><br><span class=\"line\">        response.end(&apos;Server Internal Error.&apos;)</span><br><span class=\"line\">        throw err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      process.stderr.write(err)</span><br><span class=\"line\">      process.stdout.write(out)</span><br><span class=\"line\">      response.writeHead(200)</span><br><span class=\"line\">      response.end(&apos;Deploy Done.&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.writeHead(404)</span><br><span class=\"line\">    response.end(&apos;Not Found.&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">deployServer.listen(PORT)</span><br></pre></td></tr></table></figure>\n<p>如果还需要实现更多，更复杂的功能，直接在 <code>commands</code> 数组中添加便是。此处我的博客根目录 <code>html</code> 与部署服务器根目录同属一个目录，所以配置常量 <code>PATH = &#39;../html&#39;</code>。只要启动了服务器，那么 Webhook 就可以通过类似于 <strong><a href=\"http://104.236.xxx.xxx\" target=\"_blank\" rel=\"noopener\">http://104.236.xxx.xxx</a>:9988/deploy/</strong> 的路径来部署我的博客备份啦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在后台启动部署服务器</span><br><span class=\"line\">$ node server.js &amp;</span><br></pre></td></tr></table></figure>\n<p>我以为服务器部署到这儿就完了，其实并没有，我遇到了一些麻烦。</p>\n<h3 id=\"Run-Node-Server-Forever\"><a href=\"#Run-Node-Server-Forever\" class=\"headerlink\" title=\"Run Node Server Forever\"></a>Run Node Server Forever</h3><p>我在实际使用的时候发现，我的 Node 服务器时不时会自动停掉，具体原因我暂时还没有弄清楚。不过似乎很多人都遇到了这样的困扰，要解决这个问题，<a href=\"https://github.com/foreverjs/forever\" target=\"_blank\" rel=\"noopener\">forever</a> 是个不错的选择。借助 forever 这个库，它可以保证 Node 持续运行下去，一旦服务器挂了，它都会重启服务器。</p>\n<p>安装 forever：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ [sudo] npm install -g forever</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &#123; 部署服务器的根目录 &#125;</span><br><span class=\"line\">$ forever start server.js</span><br></pre></td></tr></table></figure>\n<p>我在 DigitalOcean 上的服务器安装的是 <strong>Ubuntu</strong> 系统，而 Ubuntu 中原本就有一个叫 node 的包。为了避免冲突，在 Ubuntu 上安装或使用 Node 得用 nodejs 这个名字。而 forever 默认是使用 node 作为执行脚本的程序名。所以为了处理 Ubuntu 存在的这种特殊情况，在启动 forever 时得另外添加一个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ forever start server.js -c nodejs</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置-Webhook\"><a href=\"#3-配置-Webhook\" class=\"headerlink\" title=\"3. 配置 Webhook\"></a>3. 配置 Webhook</h2><p>如果像是本文这种最简易的应用，Webhook 的配置是十分简单的。首先进入你的 repo 主页，通过点击页面上的按钮 <strong>[settings]</strong> -&gt; <strong>[Webhooks &amp; service]</strong> 进入 Webhooks 配置主页面。也可以通过下面这个链接直接进入配置页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/[ 用户名 ]/[ 仓库名称 ]/settings/hooks</span><br></pre></td></tr></table></figure>\n<p>此处只需要配置 Webhook 所发出的 POST 请求发往何处即可，于是我们就配置我们所需要的路径： <strong><a href=\"http://104.236.xxx.xxx\" target=\"_blank\" rel=\"noopener\">http://104.236.xxx.xxx</a>:9988/deploy/</strong>。这个地址指向的就是那个能够响应 Webhook 所发出请求的服务器。</p>\n<p><img src=\"https://segmentfault.com/image?src=http://jerryblog-image.b0.upaiyun.com/blog/posts/webhooks-config.png&amp;objectId=1190000003908244&amp;token=015aea6ef8d20f821ca1da666c2a949b\" alt=\"\"></p>\n<p>配置好 Webhook 后，Github 会发送一个 ping 来测试这个地址。如果成功了，那么这个 Webhook 前就会加上一个绿色的勾；如果你得到的是一个红色的叉，那就好好检查一下哪儿出问题了吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.github.com/webhooks/\" target=\"_blank\" rel=\"noopener\">Webhook</a>，也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 <strong>push</strong> 事件。如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。</p>\n<p>如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。</p>\n<p>Github 开发者平台的文档中对 Webhook 的所能做的事是这样描述的：</p>\n<blockquote>\n<p>You’re only limited by your imagination.</p>\n</blockquote>\n<h2 id=\"面临的问题\"><a href=\"#面临的问题\" class=\"headerlink\" title=\"面临的问题\"></a>面临的问题</h2><p>我目前正好面临了这样一个问题 —— 麻烦的人肉部署。也许有人看过我之前的一篇博文《<a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\" target=\"_blank\" rel=\"noopener\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a>》。为了解决文章中的这个问题，我最后建立了一个只服务于百度爬虫的一个备份服务器。但是随之而来的问题是，每次我的博客有些更新，都不得不 ssh 到那台服务器上把代码 pull 下来。如此做了两三次以后，我觉得我不能再这么堕落下去，于是还是决定尝试一下 Webhook。</p>\n<p>于是我要完成的事情便是完成一个能够将我最新版本的博客，随时同步到备份服务器的 Webhook。简单分析一下我需要什么：</p>\n<ol>\n<li><p>一台外网可以访问的主机</p>\n</li>\n<li><p>一个能够响应 Webhook 的服务器</p>\n</li>\n<li><p>配置 Webhook</p>\n</li>\n</ol>\n<h2 id=\"1-一台外网可访问的主机\"><a href=\"#1-一台外网可访问的主机\" class=\"headerlink\" title=\"1. 一台外网可访问的主机\"></a>1. 一台外网可访问的主机</h2><p>什么叫外网可访问的主机？像阿里云的试用版就不行，它不提供外网 IP。而我使用的是 DigitalOcean 的云主机，主要的作用是架梯子，现在也顺便用来做备份服务器。当然你们也可以用类似 SAE 的服务，虽然没有 IP，但有独立的外网访问地址。</p>\n<h2 id=\"2-响应-Webhook-的服务器\"><a href=\"#2-响应-Webhook-的服务器\" class=\"headerlink\" title=\"2. 响应 Webhook 的服务器\"></a>2. 响应 Webhook 的服务器</h2><p>为了响应 Webhook 所发出的请求，从而做一些我们想做的事情，我们得先实现一个响应服务器。本文采用 Node 来实现一个原型，你当然也可以用 PHP，python 等，全凭个人喜好啦。代码很短，就直接陈列在下方了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(&apos;http&apos;)</span><br><span class=\"line\">  , exec = require(&apos;exec&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const PORT = 9988</span><br><span class=\"line\">  , PATH = &apos;../html&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">var deployServer = http.createServer(function(request, response) &#123;</span><br><span class=\"line\">  if (request.url.search(/deploy\\/?$/i) &gt; 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var commands = [</span><br><span class=\"line\">      &apos;cd &apos; + PATH,</span><br><span class=\"line\">      &apos;git pull&apos;</span><br><span class=\"line\">    ].join(&apos; &amp;&amp; &apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    exec(commands, function(err, out, code) &#123;</span><br><span class=\"line\">      if (err instanceof Error) &#123;</span><br><span class=\"line\">        response.writeHead(500)</span><br><span class=\"line\">        response.end(&apos;Server Internal Error.&apos;)</span><br><span class=\"line\">        throw err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      process.stderr.write(err)</span><br><span class=\"line\">      process.stdout.write(out)</span><br><span class=\"line\">      response.writeHead(200)</span><br><span class=\"line\">      response.end(&apos;Deploy Done.&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.writeHead(404)</span><br><span class=\"line\">    response.end(&apos;Not Found.&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">deployServer.listen(PORT)</span><br></pre></td></tr></table></figure>\n<p>如果还需要实现更多，更复杂的功能，直接在 <code>commands</code> 数组中添加便是。此处我的博客根目录 <code>html</code> 与部署服务器根目录同属一个目录，所以配置常量 <code>PATH = &#39;../html&#39;</code>。只要启动了服务器，那么 Webhook 就可以通过类似于 <strong><a href=\"http://104.236.xxx.xxx\" target=\"_blank\" rel=\"noopener\">http://104.236.xxx.xxx</a>:9988/deploy/</strong> 的路径来部署我的博客备份啦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在后台启动部署服务器</span><br><span class=\"line\">$ node server.js &amp;</span><br></pre></td></tr></table></figure>\n<p>我以为服务器部署到这儿就完了，其实并没有，我遇到了一些麻烦。</p>\n<h3 id=\"Run-Node-Server-Forever\"><a href=\"#Run-Node-Server-Forever\" class=\"headerlink\" title=\"Run Node Server Forever\"></a>Run Node Server Forever</h3><p>我在实际使用的时候发现，我的 Node 服务器时不时会自动停掉，具体原因我暂时还没有弄清楚。不过似乎很多人都遇到了这样的困扰，要解决这个问题，<a href=\"https://github.com/foreverjs/forever\" target=\"_blank\" rel=\"noopener\">forever</a> 是个不错的选择。借助 forever 这个库，它可以保证 Node 持续运行下去，一旦服务器挂了，它都会重启服务器。</p>\n<p>安装 forever：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ [sudo] npm install -g forever</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &#123; 部署服务器的根目录 &#125;</span><br><span class=\"line\">$ forever start server.js</span><br></pre></td></tr></table></figure>\n<p>我在 DigitalOcean 上的服务器安装的是 <strong>Ubuntu</strong> 系统，而 Ubuntu 中原本就有一个叫 node 的包。为了避免冲突，在 Ubuntu 上安装或使用 Node 得用 nodejs 这个名字。而 forever 默认是使用 node 作为执行脚本的程序名。所以为了处理 Ubuntu 存在的这种特殊情况，在启动 forever 时得另外添加一个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ forever start server.js -c nodejs</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置-Webhook\"><a href=\"#3-配置-Webhook\" class=\"headerlink\" title=\"3. 配置 Webhook\"></a>3. 配置 Webhook</h2><p>如果像是本文这种最简易的应用，Webhook 的配置是十分简单的。首先进入你的 repo 主页，通过点击页面上的按钮 <strong>[settings]</strong> -&gt; <strong>[Webhooks &amp; service]</strong> 进入 Webhooks 配置主页面。也可以通过下面这个链接直接进入配置页面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/[ 用户名 ]/[ 仓库名称 ]/settings/hooks</span><br></pre></td></tr></table></figure>\n<p>此处只需要配置 Webhook 所发出的 POST 请求发往何处即可，于是我们就配置我们所需要的路径： <strong><a href=\"http://104.236.xxx.xxx\" target=\"_blank\" rel=\"noopener\">http://104.236.xxx.xxx</a>:9988/deploy/</strong>。这个地址指向的就是那个能够响应 Webhook 所发出请求的服务器。</p>\n<p><img src=\"https://segmentfault.com/image?src=http://jerryblog-image.b0.upaiyun.com/blog/posts/webhooks-config.png&amp;objectId=1190000003908244&amp;token=015aea6ef8d20f821ca1da666c2a949b\" alt=\"\"></p>\n<p>配置好 Webhook 后，Github 会发送一个 ping 来测试这个地址。如果成功了，那么这个 Webhook 前就会加上一个绿色的勾；如果你得到的是一个红色的叉，那就好好检查一下哪儿出问题了吧！</p>\n"},{"title":"AES-RSA加密机制","date":"2017-12-05T03:37:00.000Z","_content":"\n在服务器与终端设备进行HTTP通讯时，常常会被网络抓包、反编译（Android [APK反编译工具](https://link.jianshu.com?t=http://idoog.me/?p=2933)）等技术得到HTTP通讯接口地址和参数。为了确保信息的安全，我们采用AES+RSA组合的方式进行接口参数加密和解密。\n\n1.关于RSA加密机制：公钥用于对数据进行加密，私钥对数据进行解密，两者不可逆。公钥和私钥是同时生成的，一一对应。比如：A拥有公钥，B拥有公钥和私钥。A将数据通过公钥进行加密后，发送密文给B，B可以通过私钥和公钥进行解密。\n\n2.AES加密也叫对称加密：A用密码对数据进行AES加密后，B用同样的密码对密文进行AES解密。\n\n\n具体操作方法：\n\n1.在终端中采用openssl方式输入密钥的相关属性（公司名、邮箱等），然后在终端当前所在的地址下，生成公钥和私钥共7个文件（7个文件如何使用请看附录的拓展了链接）。\n\n2.此时假设Android客户端拥有公钥PublicKey,服务器端拥有公钥PublicKey和私钥PrivateKey。\n\n3.安卓发送请求到服务器端：安卓随机生成Byte[]随机密码，假设RandomKey=“123456”，通过AES算法，对Json数据利用进行加密。\n\n4.但是此刻服务器并不知道客户端的RandomKey是什么，因此需要同时将Randomkey传给服务器，否则服务器无法通过AES对Json数据进行解密。但是如果直接发送请求，Randomkey就会暴露，所以要对RandomKey进行不可逆的RSA加密。\n\n5.安卓将使用Randomkey进行AES加密的Json数据，和使用PublicKey进行RSA加密的RandomKey通过HTTP传送到服务器端。数据请求工作完成。\n\n6.服务器端接收到AES加密的Json数据和Rsa加密的RandomKey数据。\n\n7.服务器通过私钥PrivateKey对加密后的RandomKey进行Rsa解密。得到安卓生成的原始Randomkey。\n\n8.利用原始的RandomKey对加密后的Json数据进行AES对称解密。至此已经得到安卓端发过来的原始Json数据。进行常规的服务器业务操作，然后将返回数据通过安卓端的RandomKey进行AES加密gouhou后，Response返回。\n\n9.安卓端接收到Response的数据后，利用之前本地生成的RandomKey直接进行AES解密即可。\n\n详细的流程图可以查看下图。\n\n![image](http://upload-images.jianshu.io/upload_images/265023-b64e781d365f1200.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n注意事项：\n\n1.在实际的开发过程中，发现RSA和AES有不同的密文生成标准，会不兼容IOS。IOS在RSA算法中需要的公钥与JAVA不同。详细的解决方案请查看：http://www.cnblogs.com/makemelike/articles/3802518.html\n\n2.AES加密不可以使用超过128Byte的KEY，因为在jdk1.7以上的版本不支持超过128Byte的KEY。\n\n小结：从性能上来测，整个客户端送加密数据开始到解密得到回传的原始数据不超过300ms（Iphone4和Centos Java服务器传输测试）。本方案没有采用TOKEN的方式，或许以后用到。公钥如何更新也需要继续完善。\n\n附：具体的JAVA和IOS加密解密Demo迟点整理给出。","source":"_posts/aes-rsa加密机制.md","raw":"---\ntitle: AES-RSA加密机制\ndate: 2017-12-05 11:37:00\ntags: [RSA,AES]\ncategories: 加解密\n---\n\n在服务器与终端设备进行HTTP通讯时，常常会被网络抓包、反编译（Android [APK反编译工具](https://link.jianshu.com?t=http://idoog.me/?p=2933)）等技术得到HTTP通讯接口地址和参数。为了确保信息的安全，我们采用AES+RSA组合的方式进行接口参数加密和解密。\n\n1.关于RSA加密机制：公钥用于对数据进行加密，私钥对数据进行解密，两者不可逆。公钥和私钥是同时生成的，一一对应。比如：A拥有公钥，B拥有公钥和私钥。A将数据通过公钥进行加密后，发送密文给B，B可以通过私钥和公钥进行解密。\n\n2.AES加密也叫对称加密：A用密码对数据进行AES加密后，B用同样的密码对密文进行AES解密。\n\n\n具体操作方法：\n\n1.在终端中采用openssl方式输入密钥的相关属性（公司名、邮箱等），然后在终端当前所在的地址下，生成公钥和私钥共7个文件（7个文件如何使用请看附录的拓展了链接）。\n\n2.此时假设Android客户端拥有公钥PublicKey,服务器端拥有公钥PublicKey和私钥PrivateKey。\n\n3.安卓发送请求到服务器端：安卓随机生成Byte[]随机密码，假设RandomKey=“123456”，通过AES算法，对Json数据利用进行加密。\n\n4.但是此刻服务器并不知道客户端的RandomKey是什么，因此需要同时将Randomkey传给服务器，否则服务器无法通过AES对Json数据进行解密。但是如果直接发送请求，Randomkey就会暴露，所以要对RandomKey进行不可逆的RSA加密。\n\n5.安卓将使用Randomkey进行AES加密的Json数据，和使用PublicKey进行RSA加密的RandomKey通过HTTP传送到服务器端。数据请求工作完成。\n\n6.服务器端接收到AES加密的Json数据和Rsa加密的RandomKey数据。\n\n7.服务器通过私钥PrivateKey对加密后的RandomKey进行Rsa解密。得到安卓生成的原始Randomkey。\n\n8.利用原始的RandomKey对加密后的Json数据进行AES对称解密。至此已经得到安卓端发过来的原始Json数据。进行常规的服务器业务操作，然后将返回数据通过安卓端的RandomKey进行AES加密gouhou后，Response返回。\n\n9.安卓端接收到Response的数据后，利用之前本地生成的RandomKey直接进行AES解密即可。\n\n详细的流程图可以查看下图。\n\n![image](http://upload-images.jianshu.io/upload_images/265023-b64e781d365f1200.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n注意事项：\n\n1.在实际的开发过程中，发现RSA和AES有不同的密文生成标准，会不兼容IOS。IOS在RSA算法中需要的公钥与JAVA不同。详细的解决方案请查看：http://www.cnblogs.com/makemelike/articles/3802518.html\n\n2.AES加密不可以使用超过128Byte的KEY，因为在jdk1.7以上的版本不支持超过128Byte的KEY。\n\n小结：从性能上来测，整个客户端送加密数据开始到解密得到回传的原始数据不超过300ms（Iphone4和Centos Java服务器传输测试）。本方案没有采用TOKEN的方式，或许以后用到。公钥如何更新也需要继续完善。\n\n附：具体的JAVA和IOS加密解密Demo迟点整理给出。","slug":"aes-rsa加密机制","published":1,"updated":"2018-10-17T05:48:51.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr2x0001k4nz4ole8mjt","content":"<p>在服务器与终端设备进行HTTP通讯时，常常会被网络抓包、反编译（Android <a href=\"https://link.jianshu.com?t=http://idoog.me/?p=2933\" target=\"_blank\" rel=\"noopener\">APK反编译工具</a>）等技术得到HTTP通讯接口地址和参数。为了确保信息的安全，我们采用AES+RSA组合的方式进行接口参数加密和解密。</p>\n<p>1.关于RSA加密机制：公钥用于对数据进行加密，私钥对数据进行解密，两者不可逆。公钥和私钥是同时生成的，一一对应。比如：A拥有公钥，B拥有公钥和私钥。A将数据通过公钥进行加密后，发送密文给B，B可以通过私钥和公钥进行解密。</p>\n<p>2.AES加密也叫对称加密：A用密码对数据进行AES加密后，B用同样的密码对密文进行AES解密。</p>\n<p>具体操作方法：</p>\n<p>1.在终端中采用openssl方式输入密钥的相关属性（公司名、邮箱等），然后在终端当前所在的地址下，生成公钥和私钥共7个文件（7个文件如何使用请看附录的拓展了链接）。</p>\n<p>2.此时假设Android客户端拥有公钥PublicKey,服务器端拥有公钥PublicKey和私钥PrivateKey。</p>\n<p>3.安卓发送请求到服务器端：安卓随机生成Byte[]随机密码，假设RandomKey=“123456”，通过AES算法，对Json数据利用进行加密。</p>\n<p>4.但是此刻服务器并不知道客户端的RandomKey是什么，因此需要同时将Randomkey传给服务器，否则服务器无法通过AES对Json数据进行解密。但是如果直接发送请求，Randomkey就会暴露，所以要对RandomKey进行不可逆的RSA加密。</p>\n<p>5.安卓将使用Randomkey进行AES加密的Json数据，和使用PublicKey进行RSA加密的RandomKey通过HTTP传送到服务器端。数据请求工作完成。</p>\n<p>6.服务器端接收到AES加密的Json数据和Rsa加密的RandomKey数据。</p>\n<p>7.服务器通过私钥PrivateKey对加密后的RandomKey进行Rsa解密。得到安卓生成的原始Randomkey。</p>\n<p>8.利用原始的RandomKey对加密后的Json数据进行AES对称解密。至此已经得到安卓端发过来的原始Json数据。进行常规的服务器业务操作，然后将返回数据通过安卓端的RandomKey进行AES加密gouhou后，Response返回。</p>\n<p>9.安卓端接收到Response的数据后，利用之前本地生成的RandomKey直接进行AES解密即可。</p>\n<p>详细的流程图可以查看下图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/265023-b64e781d365f1200.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"></p>\n<p>注意事项：</p>\n<p>1.在实际的开发过程中，发现RSA和AES有不同的密文生成标准，会不兼容IOS。IOS在RSA算法中需要的公钥与JAVA不同。详细的解决方案请查看：<a href=\"http://www.cnblogs.com/makemelike/articles/3802518.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/makemelike/articles/3802518.html</a></p>\n<p>2.AES加密不可以使用超过128Byte的KEY，因为在jdk1.7以上的版本不支持超过128Byte的KEY。</p>\n<p>小结：从性能上来测，整个客户端送加密数据开始到解密得到回传的原始数据不超过300ms（Iphone4和Centos Java服务器传输测试）。本方案没有采用TOKEN的方式，或许以后用到。公钥如何更新也需要继续完善。</p>\n<p>附：具体的JAVA和IOS加密解密Demo迟点整理给出。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在服务器与终端设备进行HTTP通讯时，常常会被网络抓包、反编译（Android <a href=\"https://link.jianshu.com?t=http://idoog.me/?p=2933\" target=\"_blank\" rel=\"noopener\">APK反编译工具</a>）等技术得到HTTP通讯接口地址和参数。为了确保信息的安全，我们采用AES+RSA组合的方式进行接口参数加密和解密。</p>\n<p>1.关于RSA加密机制：公钥用于对数据进行加密，私钥对数据进行解密，两者不可逆。公钥和私钥是同时生成的，一一对应。比如：A拥有公钥，B拥有公钥和私钥。A将数据通过公钥进行加密后，发送密文给B，B可以通过私钥和公钥进行解密。</p>\n<p>2.AES加密也叫对称加密：A用密码对数据进行AES加密后，B用同样的密码对密文进行AES解密。</p>\n<p>具体操作方法：</p>\n<p>1.在终端中采用openssl方式输入密钥的相关属性（公司名、邮箱等），然后在终端当前所在的地址下，生成公钥和私钥共7个文件（7个文件如何使用请看附录的拓展了链接）。</p>\n<p>2.此时假设Android客户端拥有公钥PublicKey,服务器端拥有公钥PublicKey和私钥PrivateKey。</p>\n<p>3.安卓发送请求到服务器端：安卓随机生成Byte[]随机密码，假设RandomKey=“123456”，通过AES算法，对Json数据利用进行加密。</p>\n<p>4.但是此刻服务器并不知道客户端的RandomKey是什么，因此需要同时将Randomkey传给服务器，否则服务器无法通过AES对Json数据进行解密。但是如果直接发送请求，Randomkey就会暴露，所以要对RandomKey进行不可逆的RSA加密。</p>\n<p>5.安卓将使用Randomkey进行AES加密的Json数据，和使用PublicKey进行RSA加密的RandomKey通过HTTP传送到服务器端。数据请求工作完成。</p>\n<p>6.服务器端接收到AES加密的Json数据和Rsa加密的RandomKey数据。</p>\n<p>7.服务器通过私钥PrivateKey对加密后的RandomKey进行Rsa解密。得到安卓生成的原始Randomkey。</p>\n<p>8.利用原始的RandomKey对加密后的Json数据进行AES对称解密。至此已经得到安卓端发过来的原始Json数据。进行常规的服务器业务操作，然后将返回数据通过安卓端的RandomKey进行AES加密gouhou后，Response返回。</p>\n<p>9.安卓端接收到Response的数据后，利用之前本地生成的RandomKey直接进行AES解密即可。</p>\n<p>详细的流程图可以查看下图。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/265023-b64e781d365f1200.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"></p>\n<p>注意事项：</p>\n<p>1.在实际的开发过程中，发现RSA和AES有不同的密文生成标准，会不兼容IOS。IOS在RSA算法中需要的公钥与JAVA不同。详细的解决方案请查看：<a href=\"http://www.cnblogs.com/makemelike/articles/3802518.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/makemelike/articles/3802518.html</a></p>\n<p>2.AES加密不可以使用超过128Byte的KEY，因为在jdk1.7以上的版本不支持超过128Byte的KEY。</p>\n<p>小结：从性能上来测，整个客户端送加密数据开始到解密得到回传的原始数据不超过300ms（Iphone4和Centos Java服务器传输测试）。本方案没有采用TOKEN的方式，或许以后用到。公钥如何更新也需要继续完善。</p>\n<p>附：具体的JAVA和IOS加密解密Demo迟点整理给出。</p>\n"},{"title":"Branch和Tag的区别","date":"2017-07-18T05:00:00.000Z","_content":"Branch和Tag的区别：\n\ntag多用于建立里程碑。比如开发达到某中程度，发布某个版本，如V1.0，可以使用tag标注。这样，以后对于程序版本号就可以找到对应的代码状态，并进行build等操作。理论上，tag作为里程碑的镜像存储，应该是只读的才对。\n相比，branch是工程需要并行开发不同版本而创建的。如一个原型项目完成后，可能有不同的客户购买并定制，于是就需要在这个原型上构建两个独立的开发库，各自并行开发不同客户的需要。这样，branch可以是进程中的工程，而且之后会不断修改的。\n\n由此，可以看出tag和branch的差别。tag更重要的是记录某个里程碑，只是希望得到那个状态时的代码状态，这对bug的确认和查找很有用处。而各个branch之间是可以肆意各自的改动，互不相干的，branch上也可以有自己的tag。","source":"_posts/git-Branch和Tag的区别.md","raw":"---\ntitle: Branch和Tag的区别\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\nBranch和Tag的区别：\n\ntag多用于建立里程碑。比如开发达到某中程度，发布某个版本，如V1.0，可以使用tag标注。这样，以后对于程序版本号就可以找到对应的代码状态，并进行build等操作。理论上，tag作为里程碑的镜像存储，应该是只读的才对。\n相比，branch是工程需要并行开发不同版本而创建的。如一个原型项目完成后，可能有不同的客户购买并定制，于是就需要在这个原型上构建两个独立的开发库，各自并行开发不同客户的需要。这样，branch可以是进程中的工程，而且之后会不断修改的。\n\n由此，可以看出tag和branch的差别。tag更重要的是记录某个里程碑，只是希望得到那个状态时的代码状态，这对bug的确认和查找很有用处。而各个branch之间是可以肆意各自的改动，互不相干的，branch上也可以有自己的tag。","slug":"git-Branch和Tag的区别","published":1,"updated":"2018-10-17T05:48:51.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr340004k4nz8mlr2bbj","content":"<p>Branch和Tag的区别：</p>\n<p>tag多用于建立里程碑。比如开发达到某中程度，发布某个版本，如V1.0，可以使用tag标注。这样，以后对于程序版本号就可以找到对应的代码状态，并进行build等操作。理论上，tag作为里程碑的镜像存储，应该是只读的才对。<br>相比，branch是工程需要并行开发不同版本而创建的。如一个原型项目完成后，可能有不同的客户购买并定制，于是就需要在这个原型上构建两个独立的开发库，各自并行开发不同客户的需要。这样，branch可以是进程中的工程，而且之后会不断修改的。</p>\n<p>由此，可以看出tag和branch的差别。tag更重要的是记录某个里程碑，只是希望得到那个状态时的代码状态，这对bug的确认和查找很有用处。而各个branch之间是可以肆意各自的改动，互不相干的，branch上也可以有自己的tag。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Branch和Tag的区别：</p>\n<p>tag多用于建立里程碑。比如开发达到某中程度，发布某个版本，如V1.0，可以使用tag标注。这样，以后对于程序版本号就可以找到对应的代码状态，并进行build等操作。理论上，tag作为里程碑的镜像存储，应该是只读的才对。<br>相比，branch是工程需要并行开发不同版本而创建的。如一个原型项目完成后，可能有不同的客户购买并定制，于是就需要在这个原型上构建两个独立的开发库，各自并行开发不同客户的需要。这样，branch可以是进程中的工程，而且之后会不断修改的。</p>\n<p>由此，可以看出tag和branch的差别。tag更重要的是记录某个里程碑，只是希望得到那个状态时的代码状态，这对bug的确认和查找很有用处。而各个branch之间是可以肆意各自的改动，互不相干的，branch上也可以有自己的tag。</p>\n"},{"title":"配置Druid解密数据库密码","date":"2018-10-17T03:37:00.000Z","_content":"\n首先我们得下载一个druid-1.0.16.jar的包\n\n其次键入命令&nbsp;java -cp druid-1.0.16.jar com.alibaba.druid.filter.config.ConfigTools your_password\n\n这时候会生成privatekey，publickey，以及password，相关的截图如下\n\n![](https://yapengwen.github.io/img/20161123020626355.png)\n\n\n注意1：如果使用的不是druid-1.0.16.jar可能只会生成一个password。\n\n注意2：如果没配置好，可能会报一大推奇奇怪怪的错误，比如：**org.springframework.beans.factory.BeanCreationException:&nbsp;Error&nbsp;creatingbean&nbsp;with name 'shiroFilter':....**\n\n\n\n配置Druid解密数据库密码\n\n```java\njdbc.type=mysql\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/jesng?useUnicode=true&amp;characterEncoding=utf-8\njdbc.username=root\njdbc.password=IVpkS/WvZQKLcm4+f7xlLFo5FzxGIj3O1br9TcvLlq2a17mmt0SWe9Qq1hyVKsnbsRdU6FKTItc6vVIF9RRpTw==\njdbc.publickey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKYBLQ067pCDwEfysD6rAIWZD4C2K7BO09NFYMmA+VD4i+28znGk9F3w3uCFp6vYf633rPJpx+hoHU/+9gBIewUCAwEAAQ==\n```\n\n\n配置Druid解密数据库密码的主要新增的两行配置。\n\n```java\n1、\n<property name=\"connectionProperties\"\nvalue=\"druid.stat.slowSqlMillis=5000;config.decrypt=true;config.decrypt.key=${jdbc.publickey}\"/>\n\n作用：配置ConfigFilter解密密码  ，注意出的publickey对应\n2、<property name=\"filters\" value=\"config\" />  \n作用：提示Druid数据源需要对数据库密码进行解密  \n```\n","source":"_posts/druid_解密数据库密码.md","raw":"---\ntitle: 配置Druid解密数据库密码\ndate: 2018-10-17 11:37:00\ntags: [DRUID]\ncategories: java\n---\n\n首先我们得下载一个druid-1.0.16.jar的包\n\n其次键入命令&nbsp;java -cp druid-1.0.16.jar com.alibaba.druid.filter.config.ConfigTools your_password\n\n这时候会生成privatekey，publickey，以及password，相关的截图如下\n\n![](https://yapengwen.github.io/img/20161123020626355.png)\n\n\n注意1：如果使用的不是druid-1.0.16.jar可能只会生成一个password。\n\n注意2：如果没配置好，可能会报一大推奇奇怪怪的错误，比如：**org.springframework.beans.factory.BeanCreationException:&nbsp;Error&nbsp;creatingbean&nbsp;with name 'shiroFilter':....**\n\n\n\n配置Druid解密数据库密码\n\n```java\njdbc.type=mysql\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/jesng?useUnicode=true&amp;characterEncoding=utf-8\njdbc.username=root\njdbc.password=IVpkS/WvZQKLcm4+f7xlLFo5FzxGIj3O1br9TcvLlq2a17mmt0SWe9Qq1hyVKsnbsRdU6FKTItc6vVIF9RRpTw==\njdbc.publickey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKYBLQ067pCDwEfysD6rAIWZD4C2K7BO09NFYMmA+VD4i+28znGk9F3w3uCFp6vYf633rPJpx+hoHU/+9gBIewUCAwEAAQ==\n```\n\n\n配置Druid解密数据库密码的主要新增的两行配置。\n\n```java\n1、\n<property name=\"connectionProperties\"\nvalue=\"druid.stat.slowSqlMillis=5000;config.decrypt=true;config.decrypt.key=${jdbc.publickey}\"/>\n\n作用：配置ConfigFilter解密密码  ，注意出的publickey对应\n2、<property name=\"filters\" value=\"config\" />  \n作用：提示Druid数据源需要对数据库密码进行解密  \n```\n","slug":"druid_解密数据库密码","published":1,"updated":"2018-10-17T06:06:24.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr360005k4nzsuxzkp4u","content":"<p>首先我们得下载一个druid-1.0.16.jar的包</p>\n<p>其次键入命令&nbsp;java -cp druid-1.0.16.jar com.alibaba.druid.filter.config.ConfigTools your_password</p>\n<p>这时候会生成privatekey，publickey，以及password，相关的截图如下</p>\n<p><img src=\"https://yapengwen.github.io/img/20161123020626355.png\" alt=\"\"></p>\n<p>注意1：如果使用的不是druid-1.0.16.jar可能只会生成一个password。</p>\n<p>注意2：如果没配置好，可能会报一大推奇奇怪怪的错误，比如：<strong>org.springframework.beans.factory.BeanCreationException:&nbsp;Error&nbsp;creatingbean&nbsp;with name ‘shiroFilter’:….</strong></p>\n<p>配置Druid解密数据库密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.type=mysql</span><br><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql:<span class=\"comment\">//localhost:3306/jesng?useUnicode=true&amp;amp;characterEncoding=utf-8</span></span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=IVpkS/WvZQKLcm4+f7xlLFo5FzxGIj3O1br9TcvLlq2a17mmt0SWe9Qq1hyVKsnbsRdU6FKTItc6vVIF9RRpTw==</span><br><span class=\"line\">jdbc.publickey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKYBLQ067pCDwEfysD6rAIWZD4C2K7BO09NFYMmA+VD4i+<span class=\"number\">28</span>znGk9F3w3uCFp6vYf633rPJpx+hoHU/+<span class=\"number\">9</span>gBIewUCAwEAAQ==</span><br></pre></td></tr></table></figure>\n<p>配置Druid解密数据库密码的主要新增的两行配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、</span><br><span class=\"line\">&lt;property name=<span class=\"string\">\"connectionProperties\"</span></span><br><span class=\"line\">value=<span class=\"string\">\"druid.stat.slowSqlMillis=5000;config.decrypt=true;config.decrypt.key=$&#123;jdbc.publickey&#125;\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">作用：配置ConfigFilter解密密码  ，注意出的publickey对应</span><br><span class=\"line\"><span class=\"number\">2</span>、&lt;property name=<span class=\"string\">\"filters\"</span> value=<span class=\"string\">\"config\"</span> /&gt;  </span><br><span class=\"line\">作用：提示Druid数据源需要对数据库密码进行解密</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>首先我们得下载一个druid-1.0.16.jar的包</p>\n<p>其次键入命令&nbsp;java -cp druid-1.0.16.jar com.alibaba.druid.filter.config.ConfigTools your_password</p>\n<p>这时候会生成privatekey，publickey，以及password，相关的截图如下</p>\n<p><img src=\"https://yapengwen.github.io/img/20161123020626355.png\" alt=\"\"></p>\n<p>注意1：如果使用的不是druid-1.0.16.jar可能只会生成一个password。</p>\n<p>注意2：如果没配置好，可能会报一大推奇奇怪怪的错误，比如：<strong>org.springframework.beans.factory.BeanCreationException:&nbsp;Error&nbsp;creatingbean&nbsp;with name ‘shiroFilter’:….</strong></p>\n<p>配置Druid解密数据库密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.type=mysql</span><br><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql:<span class=\"comment\">//localhost:3306/jesng?useUnicode=true&amp;amp;characterEncoding=utf-8</span></span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=IVpkS/WvZQKLcm4+f7xlLFo5FzxGIj3O1br9TcvLlq2a17mmt0SWe9Qq1hyVKsnbsRdU6FKTItc6vVIF9RRpTw==</span><br><span class=\"line\">jdbc.publickey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKYBLQ067pCDwEfysD6rAIWZD4C2K7BO09NFYMmA+VD4i+<span class=\"number\">28</span>znGk9F3w3uCFp6vYf633rPJpx+hoHU/+<span class=\"number\">9</span>gBIewUCAwEAAQ==</span><br></pre></td></tr></table></figure>\n<p>配置Druid解密数据库密码的主要新增的两行配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、</span><br><span class=\"line\">&lt;property name=<span class=\"string\">\"connectionProperties\"</span></span><br><span class=\"line\">value=<span class=\"string\">\"druid.stat.slowSqlMillis=5000;config.decrypt=true;config.decrypt.key=$&#123;jdbc.publickey&#125;\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">作用：配置ConfigFilter解密密码  ，注意出的publickey对应</span><br><span class=\"line\"><span class=\"number\">2</span>、&lt;property name=<span class=\"string\">\"filters\"</span> value=<span class=\"string\">\"config\"</span> /&gt;  </span><br><span class=\"line\">作用：提示Druid数据源需要对数据库密码进行解密</span><br></pre></td></tr></table></figure>\n"},{"title":"GitHub 基本常用知识解答","date":"2017-07-18T05:00:00.000Z","_content":"1、Fork、Watch、Star 是什么意思？\n\nfork的意思是从别人的代码库中复制一份到你自己的代码库，与普通的复制不同，fork包含了原有库中的所有提交记录，\n\nfork后这个代码库是完全独立的，属于你自己，你可以在自己的库中做任何修改，当然也可以通过Pull Request向原来的库提交合并请求。\n\n\n\n顺便说一下Watch和Star：\n\n*   Watch，意思是关注，关注后，代码库中有新的commit你都会收到通知；\n\n*   Star，与watch不同，star相当于收藏，你可以方便地找到你star过的库，但是不会收到关于那个库的任何通知。\n\n2、gitHub 上的SSH公钥 是什么意思 ？\n\n 作用：使用SSH公钥可以让你在你的电脑和Git@OSC通讯的时候使用安全连接\n\n\n\n通常，通过ssh登录远程服务器时，使用**密码认证**，分别输入用户名和密码，两者满足一定规则就可以登录。但是密码认证有以下的缺点：\n\n*   用户无法设置空密码（即使系统允许空密码，也会十分危险）\n*   密码容易被人偷窥或猜到\n*   服务器上的一个帐户若要给多人使用，则必须让所有使用者都知道密码，导致密码容易泄露，而且修改密码时必须通知所有人\n\n而使用**公钥认证**则可以解决上述问题。\n\n*   公钥认证允许使用空密码，省去每次登录都需要输入密码的麻烦\n*   多个使用者可以通过各自的密钥登录到系统上的同一个用户\n\n公钥认证的原理\n\n所谓的**公钥认证**，实际上是使用一对加密字符串，一个称为**公钥**(public key)，任何人都可以看到其内容，用于加密；\n\n另一个称为**密钥**(private key)，只有拥有者才能看到，用于解密。通过公钥加密过的密文使用密钥可以轻松解密，但根据公钥来猜测密钥却十分困难。\n\nssh 的公钥认证就是使用了这一特性。服务器和客户端都各自拥有自己的公钥和密钥。\n\n为了说明方便，以下将使用这些符号。\n\n| Ac | 客户端公钥 |\n| Bc | 客户端密钥 |\n| As | 服务器公钥 |\n| Bs | 服务器密钥 |\n\n在认证之前，客户端需要通过某种方法将公钥 Ac 登录到服务器上。\n\n认证过程分为两个步骤。\n\n1.  会话密钥(session key)生成\n    1.  客户端请求连接服务器，服务器将 As 发送给客户端。\n    2.  服务器生成**会话ID**(session id)，设为 p，发送给客户端。\n    3.  客户端生成**会话密钥**(session key)，设为 q，并计算 r = p xor q。\n    4.  客户端将 r 用 As 进行加密，结果发送给服务器。\n    5.  服务器用 Bs 进行解密，获得 r。\n    6.  服务器进行 r xor p 的运算，获得 q。\n    7.  至此服务器和客户端都知道了**会话密钥**q，以后的传输都将被 q 加密。\n2.  认证\n    1.  服务器生成随机数 x，并用 Ac 加密后生成结果 S(x)，发送给客户端\n    2.  客户端使用 Bc 解密 S(x) 得到 x\n    3.  客户端计算 q + x 的 md5 值 n(q+x)，q为上一步得到的会话密钥\n    4.  服务器计算 q + x 的 md5 值 m(q+x)\n    5.  客户端将 n(q+x) 发送给服务器\n    6.  服务器比较 m(q+x) 和 n(q+x)，两者相同则认证成功\n\n**3、.gitignore文件**\n\n.gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。\n\n一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。\n\n我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。\n\n这时我们就需要.gitignore了。比如一般c#的项目我的.gitignore是这样写的：\n\n**4、Git fetch和git pull的区别**\n\n Git中从远程的分支获取最新的版本到本地有这样2个命令：\n\n\n 1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge\n\n git fetch origin master\n git log -p master..origin/master\n git merge origin/master   以上命令的含义：\n\n\n 首先从远程的origin的master主分支下载最新的版本到origin/master分支上\n 然后比较本地的master分支和origin/master分支的差别\n 最后进行合并\n 上述过程其实可以用以下更清晰的方式来进行：\n\n\n git fetch origin master:tmp\n git diff tmp\n git merge tmp\n\n从远程获取最新的版本到本地的test分支上之后再进行比较合并\n\n\n2.git pull：相当于是从远程获取最新版本并merge到本地\n\n\n git pull origin master\n\n 上述命令其实相当于git fetch 和 git merge\n 在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并\n\n","source":"_posts/git-GitHub 基本常用知识解答.md","raw":"---\ntitle: GitHub 基本常用知识解答\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n1、Fork、Watch、Star 是什么意思？\n\nfork的意思是从别人的代码库中复制一份到你自己的代码库，与普通的复制不同，fork包含了原有库中的所有提交记录，\n\nfork后这个代码库是完全独立的，属于你自己，你可以在自己的库中做任何修改，当然也可以通过Pull Request向原来的库提交合并请求。\n\n\n\n顺便说一下Watch和Star：\n\n*   Watch，意思是关注，关注后，代码库中有新的commit你都会收到通知；\n\n*   Star，与watch不同，star相当于收藏，你可以方便地找到你star过的库，但是不会收到关于那个库的任何通知。\n\n2、gitHub 上的SSH公钥 是什么意思 ？\n\n 作用：使用SSH公钥可以让你在你的电脑和Git@OSC通讯的时候使用安全连接\n\n\n\n通常，通过ssh登录远程服务器时，使用**密码认证**，分别输入用户名和密码，两者满足一定规则就可以登录。但是密码认证有以下的缺点：\n\n*   用户无法设置空密码（即使系统允许空密码，也会十分危险）\n*   密码容易被人偷窥或猜到\n*   服务器上的一个帐户若要给多人使用，则必须让所有使用者都知道密码，导致密码容易泄露，而且修改密码时必须通知所有人\n\n而使用**公钥认证**则可以解决上述问题。\n\n*   公钥认证允许使用空密码，省去每次登录都需要输入密码的麻烦\n*   多个使用者可以通过各自的密钥登录到系统上的同一个用户\n\n公钥认证的原理\n\n所谓的**公钥认证**，实际上是使用一对加密字符串，一个称为**公钥**(public key)，任何人都可以看到其内容，用于加密；\n\n另一个称为**密钥**(private key)，只有拥有者才能看到，用于解密。通过公钥加密过的密文使用密钥可以轻松解密，但根据公钥来猜测密钥却十分困难。\n\nssh 的公钥认证就是使用了这一特性。服务器和客户端都各自拥有自己的公钥和密钥。\n\n为了说明方便，以下将使用这些符号。\n\n| Ac | 客户端公钥 |\n| Bc | 客户端密钥 |\n| As | 服务器公钥 |\n| Bs | 服务器密钥 |\n\n在认证之前，客户端需要通过某种方法将公钥 Ac 登录到服务器上。\n\n认证过程分为两个步骤。\n\n1.  会话密钥(session key)生成\n    1.  客户端请求连接服务器，服务器将 As 发送给客户端。\n    2.  服务器生成**会话ID**(session id)，设为 p，发送给客户端。\n    3.  客户端生成**会话密钥**(session key)，设为 q，并计算 r = p xor q。\n    4.  客户端将 r 用 As 进行加密，结果发送给服务器。\n    5.  服务器用 Bs 进行解密，获得 r。\n    6.  服务器进行 r xor p 的运算，获得 q。\n    7.  至此服务器和客户端都知道了**会话密钥**q，以后的传输都将被 q 加密。\n2.  认证\n    1.  服务器生成随机数 x，并用 Ac 加密后生成结果 S(x)，发送给客户端\n    2.  客户端使用 Bc 解密 S(x) 得到 x\n    3.  客户端计算 q + x 的 md5 值 n(q+x)，q为上一步得到的会话密钥\n    4.  服务器计算 q + x 的 md5 值 m(q+x)\n    5.  客户端将 n(q+x) 发送给服务器\n    6.  服务器比较 m(q+x) 和 n(q+x)，两者相同则认证成功\n\n**3、.gitignore文件**\n\n.gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。\n\n一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。\n\n我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。\n\n这时我们就需要.gitignore了。比如一般c#的项目我的.gitignore是这样写的：\n\n**4、Git fetch和git pull的区别**\n\n Git中从远程的分支获取最新的版本到本地有这样2个命令：\n\n\n 1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge\n\n git fetch origin master\n git log -p master..origin/master\n git merge origin/master   以上命令的含义：\n\n\n 首先从远程的origin的master主分支下载最新的版本到origin/master分支上\n 然后比较本地的master分支和origin/master分支的差别\n 最后进行合并\n 上述过程其实可以用以下更清晰的方式来进行：\n\n\n git fetch origin master:tmp\n git diff tmp\n git merge tmp\n\n从远程获取最新的版本到本地的test分支上之后再进行比较合并\n\n\n2.git pull：相当于是从远程获取最新版本并merge到本地\n\n\n git pull origin master\n\n 上述命令其实相当于git fetch 和 git merge\n 在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并\n\n","slug":"git-GitHub 基本常用知识解答","published":1,"updated":"2018-10-17T05:48:51.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr370006k4nz1nu6wazw","content":"<p>1、Fork、Watch、Star 是什么意思？</p>\n<p>fork的意思是从别人的代码库中复制一份到你自己的代码库，与普通的复制不同，fork包含了原有库中的所有提交记录，</p>\n<p>fork后这个代码库是完全独立的，属于你自己，你可以在自己的库中做任何修改，当然也可以通过Pull Request向原来的库提交合并请求。</p>\n<p>顺便说一下Watch和Star：</p>\n<ul>\n<li><p>Watch，意思是关注，关注后，代码库中有新的commit你都会收到通知；</p>\n</li>\n<li><p>Star，与watch不同，star相当于收藏，你可以方便地找到你star过的库，但是不会收到关于那个库的任何通知。</p>\n</li>\n</ul>\n<p>2、gitHub 上的SSH公钥 是什么意思 ？</p>\n<p> 作用：使用SSH公钥可以让你在你的电脑和Git@OSC通讯的时候使用安全连接</p>\n<p>通常，通过ssh登录远程服务器时，使用<strong>密码认证</strong>，分别输入用户名和密码，两者满足一定规则就可以登录。但是密码认证有以下的缺点：</p>\n<ul>\n<li>用户无法设置空密码（即使系统允许空密码，也会十分危险）</li>\n<li>密码容易被人偷窥或猜到</li>\n<li>服务器上的一个帐户若要给多人使用，则必须让所有使用者都知道密码，导致密码容易泄露，而且修改密码时必须通知所有人</li>\n</ul>\n<p>而使用<strong>公钥认证</strong>则可以解决上述问题。</p>\n<ul>\n<li>公钥认证允许使用空密码，省去每次登录都需要输入密码的麻烦</li>\n<li>多个使用者可以通过各自的密钥登录到系统上的同一个用户</li>\n</ul>\n<p>公钥认证的原理</p>\n<p>所谓的<strong>公钥认证</strong>，实际上是使用一对加密字符串，一个称为<strong>公钥</strong>(public key)，任何人都可以看到其内容，用于加密；</p>\n<p>另一个称为<strong>密钥</strong>(private key)，只有拥有者才能看到，用于解密。通过公钥加密过的密文使用密钥可以轻松解密，但根据公钥来猜测密钥却十分困难。</p>\n<p>ssh 的公钥认证就是使用了这一特性。服务器和客户端都各自拥有自己的公钥和密钥。</p>\n<p>为了说明方便，以下将使用这些符号。</p>\n<p>| Ac | 客户端公钥 |<br>| Bc | 客户端密钥 |<br>| As | 服务器公钥 |<br>| Bs | 服务器密钥 |</p>\n<p>在认证之前，客户端需要通过某种方法将公钥 Ac 登录到服务器上。</p>\n<p>认证过程分为两个步骤。</p>\n<ol>\n<li>会话密钥(session key)生成<ol>\n<li>客户端请求连接服务器，服务器将 As 发送给客户端。</li>\n<li>服务器生成<strong>会话ID</strong>(session id)，设为 p，发送给客户端。</li>\n<li>客户端生成<strong>会话密钥</strong>(session key)，设为 q，并计算 r = p xor q。</li>\n<li>客户端将 r 用 As 进行加密，结果发送给服务器。</li>\n<li>服务器用 Bs 进行解密，获得 r。</li>\n<li>服务器进行 r xor p 的运算，获得 q。</li>\n<li>至此服务器和客户端都知道了<strong>会话密钥</strong>q，以后的传输都将被 q 加密。</li>\n</ol>\n</li>\n<li>认证<ol>\n<li>服务器生成随机数 x，并用 Ac 加密后生成结果 S(x)，发送给客户端</li>\n<li>客户端使用 Bc 解密 S(x) 得到 x</li>\n<li>客户端计算 q + x 的 md5 值 n(q+x)，q为上一步得到的会话密钥</li>\n<li>服务器计算 q + x 的 md5 值 m(q+x)</li>\n<li>客户端将 n(q+x) 发送给服务器</li>\n<li>服务器比较 m(q+x) 和 n(q+x)，两者相同则认证成功</li>\n</ol>\n</li>\n</ol>\n<p><strong>3、.gitignore文件</strong></p>\n<p>.gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。</p>\n<p>一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。</p>\n<p>我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。</p>\n<p>这时我们就需要.gitignore了。比如一般c#的项目我的.gitignore是这样写的：</p>\n<p><strong>4、Git fetch和git pull的区别</strong></p>\n<p> Git中从远程的分支获取最新的版本到本地有这样2个命令：</p>\n<p> 1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge</p>\n<p> git fetch origin master<br> git log -p master..origin/master<br> git merge origin/master   以上命令的含义：</p>\n<p> 首先从远程的origin的master主分支下载最新的版本到origin/master分支上<br> 然后比较本地的master分支和origin/master分支的差别<br> 最后进行合并<br> 上述过程其实可以用以下更清晰的方式来进行：</p>\n<p> git fetch origin master:tmp<br> git diff tmp<br> git merge tmp</p>\n<p>从远程获取最新的版本到本地的test分支上之后再进行比较合并</p>\n<p>2.git pull：相当于是从远程获取最新版本并merge到本地</p>\n<p> git pull origin master</p>\n<p> 上述命令其实相当于git fetch 和 git merge<br> 在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、Fork、Watch、Star 是什么意思？</p>\n<p>fork的意思是从别人的代码库中复制一份到你自己的代码库，与普通的复制不同，fork包含了原有库中的所有提交记录，</p>\n<p>fork后这个代码库是完全独立的，属于你自己，你可以在自己的库中做任何修改，当然也可以通过Pull Request向原来的库提交合并请求。</p>\n<p>顺便说一下Watch和Star：</p>\n<ul>\n<li><p>Watch，意思是关注，关注后，代码库中有新的commit你都会收到通知；</p>\n</li>\n<li><p>Star，与watch不同，star相当于收藏，你可以方便地找到你star过的库，但是不会收到关于那个库的任何通知。</p>\n</li>\n</ul>\n<p>2、gitHub 上的SSH公钥 是什么意思 ？</p>\n<p> 作用：使用SSH公钥可以让你在你的电脑和Git@OSC通讯的时候使用安全连接</p>\n<p>通常，通过ssh登录远程服务器时，使用<strong>密码认证</strong>，分别输入用户名和密码，两者满足一定规则就可以登录。但是密码认证有以下的缺点：</p>\n<ul>\n<li>用户无法设置空密码（即使系统允许空密码，也会十分危险）</li>\n<li>密码容易被人偷窥或猜到</li>\n<li>服务器上的一个帐户若要给多人使用，则必须让所有使用者都知道密码，导致密码容易泄露，而且修改密码时必须通知所有人</li>\n</ul>\n<p>而使用<strong>公钥认证</strong>则可以解决上述问题。</p>\n<ul>\n<li>公钥认证允许使用空密码，省去每次登录都需要输入密码的麻烦</li>\n<li>多个使用者可以通过各自的密钥登录到系统上的同一个用户</li>\n</ul>\n<p>公钥认证的原理</p>\n<p>所谓的<strong>公钥认证</strong>，实际上是使用一对加密字符串，一个称为<strong>公钥</strong>(public key)，任何人都可以看到其内容，用于加密；</p>\n<p>另一个称为<strong>密钥</strong>(private key)，只有拥有者才能看到，用于解密。通过公钥加密过的密文使用密钥可以轻松解密，但根据公钥来猜测密钥却十分困难。</p>\n<p>ssh 的公钥认证就是使用了这一特性。服务器和客户端都各自拥有自己的公钥和密钥。</p>\n<p>为了说明方便，以下将使用这些符号。</p>\n<p>| Ac | 客户端公钥 |<br>| Bc | 客户端密钥 |<br>| As | 服务器公钥 |<br>| Bs | 服务器密钥 |</p>\n<p>在认证之前，客户端需要通过某种方法将公钥 Ac 登录到服务器上。</p>\n<p>认证过程分为两个步骤。</p>\n<ol>\n<li>会话密钥(session key)生成<ol>\n<li>客户端请求连接服务器，服务器将 As 发送给客户端。</li>\n<li>服务器生成<strong>会话ID</strong>(session id)，设为 p，发送给客户端。</li>\n<li>客户端生成<strong>会话密钥</strong>(session key)，设为 q，并计算 r = p xor q。</li>\n<li>客户端将 r 用 As 进行加密，结果发送给服务器。</li>\n<li>服务器用 Bs 进行解密，获得 r。</li>\n<li>服务器进行 r xor p 的运算，获得 q。</li>\n<li>至此服务器和客户端都知道了<strong>会话密钥</strong>q，以后的传输都将被 q 加密。</li>\n</ol>\n</li>\n<li>认证<ol>\n<li>服务器生成随机数 x，并用 Ac 加密后生成结果 S(x)，发送给客户端</li>\n<li>客户端使用 Bc 解密 S(x) 得到 x</li>\n<li>客户端计算 q + x 的 md5 值 n(q+x)，q为上一步得到的会话密钥</li>\n<li>服务器计算 q + x 的 md5 值 m(q+x)</li>\n<li>客户端将 n(q+x) 发送给服务器</li>\n<li>服务器比较 m(q+x) 和 n(q+x)，两者相同则认证成功</li>\n</ol>\n</li>\n</ol>\n<p><strong>3、.gitignore文件</strong></p>\n<p>.gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。</p>\n<p>一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。</p>\n<p>我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。</p>\n<p>这时我们就需要.gitignore了。比如一般c#的项目我的.gitignore是这样写的：</p>\n<p><strong>4、Git fetch和git pull的区别</strong></p>\n<p> Git中从远程的分支获取最新的版本到本地有这样2个命令：</p>\n<p> 1.git fetch：相当于是从远程获取最新版本到本地，不会自动merge</p>\n<p> git fetch origin master<br> git log -p master..origin/master<br> git merge origin/master   以上命令的含义：</p>\n<p> 首先从远程的origin的master主分支下载最新的版本到origin/master分支上<br> 然后比较本地的master分支和origin/master分支的差别<br> 最后进行合并<br> 上述过程其实可以用以下更清晰的方式来进行：</p>\n<p> git fetch origin master:tmp<br> git diff tmp<br> git merge tmp</p>\n<p>从远程获取最新的版本到本地的test分支上之后再进行比较合并</p>\n<p>2.git pull：相当于是从远程获取最新版本并merge到本地</p>\n<p> git pull origin master</p>\n<p> 上述命令其实相当于git fetch 和 git merge<br> 在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并</p>\n"},{"title":"GitHub 基本常用知识解答2","date":"2017-07-18T05:00:00.000Z","_content":"\n**1、如何拥有一个Git仓库的两种途径**\n\n （1）在已有的目录中，初始化一个新的。\n\n （2）比如一个新的项目，或者一个已存在的项目，但该项目尚未有版本控制。如果你想要复制一份别人的项目， 或者与别人合作某个项目，也可以从一个公开的 Git 仓库克隆。\n\n**2、Git分支管理策略**\n\n [http://www.ruanyifeng.com/blog/2012/07/git.html](http://www.ruanyifeng.com/blog/2012/07/git.html \"http://www.ruanyifeng.com/blog/2012/07/git.html\")\n\n [GIT分支管理是一门艺术](http://kb.cnblogs.com/page/132209/)\n\n**3、Git详解**\n\n[Git详解之一 Git起步](http://www.open-open.com/lib/view/open1328069609436.html \"http://www.open-open.com/lib/view/open1328069609436.html\")\n\n[Git详解之二 Git基础](http://www.open-open.com/lib/view/open1328069733264.html \"Git详解之二 Git基础 \")\n\n [Git详解之三 Git分支](http://www.open-open.com/lib/view/open1328069889514.html \"Git详解之三 Git分支\")\n\n [Git详解之四 服务器上的Git](http://www.open-open.com/lib/view/open1328069988843.html \"Git详解之四 服务器上的Git \")\n\n [Git详解之五 分布式Git](http://www.open-open.com/lib/view/open1328070090108.html \"Git详解之五 分布式Git \")\n\n[ Git详解之六 Git工具](http://www.open-open.com/lib/view/open1328070367499.html \"Git详解之六 Git工具 \")\n\n**4、Git教程**\n\n [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 \"Git教程\")","source":"_posts/git-GitHub 基本常用知识解答2.md","raw":"---\ntitle: GitHub 基本常用知识解答2\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n\n**1、如何拥有一个Git仓库的两种途径**\n\n （1）在已有的目录中，初始化一个新的。\n\n （2）比如一个新的项目，或者一个已存在的项目，但该项目尚未有版本控制。如果你想要复制一份别人的项目， 或者与别人合作某个项目，也可以从一个公开的 Git 仓库克隆。\n\n**2、Git分支管理策略**\n\n [http://www.ruanyifeng.com/blog/2012/07/git.html](http://www.ruanyifeng.com/blog/2012/07/git.html \"http://www.ruanyifeng.com/blog/2012/07/git.html\")\n\n [GIT分支管理是一门艺术](http://kb.cnblogs.com/page/132209/)\n\n**3、Git详解**\n\n[Git详解之一 Git起步](http://www.open-open.com/lib/view/open1328069609436.html \"http://www.open-open.com/lib/view/open1328069609436.html\")\n\n[Git详解之二 Git基础](http://www.open-open.com/lib/view/open1328069733264.html \"Git详解之二 Git基础 \")\n\n [Git详解之三 Git分支](http://www.open-open.com/lib/view/open1328069889514.html \"Git详解之三 Git分支\")\n\n [Git详解之四 服务器上的Git](http://www.open-open.com/lib/view/open1328069988843.html \"Git详解之四 服务器上的Git \")\n\n [Git详解之五 分布式Git](http://www.open-open.com/lib/view/open1328070090108.html \"Git详解之五 分布式Git \")\n\n[ Git详解之六 Git工具](http://www.open-open.com/lib/view/open1328070367499.html \"Git详解之六 Git工具 \")\n\n**4、Git教程**\n\n [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 \"Git教程\")","slug":"git-GitHub 基本常用知识解答2","published":1,"updated":"2018-10-17T05:48:51.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3a000ak4nzn4xzamih","content":"<p><strong>1、如何拥有一个Git仓库的两种途径</strong></p>\n<p> （1）在已有的目录中，初始化一个新的。</p>\n<p> （2）比如一个新的项目，或者一个已存在的项目，但该项目尚未有版本控制。如果你想要复制一份别人的项目， 或者与别人合作某个项目，也可以从一个公开的 Git 仓库克隆。</p>\n<p><strong>2、Git分支管理策略</strong></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" title=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>\n<p> <a href=\"http://kb.cnblogs.com/page/132209/\" target=\"_blank\" rel=\"noopener\">GIT分支管理是一门艺术</a></p>\n<p><strong>3、Git详解</strong></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328069609436.html\" title=\"http://www.open-open.com/lib/view/open1328069609436.html\" target=\"_blank\" rel=\"noopener\">Git详解之一 Git起步</a></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328069733264.html\" title=\"Git详解之二 Git基础 \" target=\"_blank\" rel=\"noopener\">Git详解之二 Git基础</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328069889514.html\" title=\"Git详解之三 Git分支\" target=\"_blank\" rel=\"noopener\">Git详解之三 Git分支</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328069988843.html\" title=\"Git详解之四 服务器上的Git \" target=\"_blank\" rel=\"noopener\">Git详解之四 服务器上的Git</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328070090108.html\" title=\"Git详解之五 分布式Git \" target=\"_blank\" rel=\"noopener\">Git详解之五 分布式Git</a></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328070367499.html\" title=\"Git详解之六 Git工具 \" target=\"_blank\" rel=\"noopener\"> Git详解之六 Git工具</a></p>\n<p><strong>4、Git教程</strong></p>\n<p> <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" title=\"Git教程\" target=\"_blank\" rel=\"noopener\">Git教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1、如何拥有一个Git仓库的两种途径</strong></p>\n<p> （1）在已有的目录中，初始化一个新的。</p>\n<p> （2）比如一个新的项目，或者一个已存在的项目，但该项目尚未有版本控制。如果你想要复制一份别人的项目， 或者与别人合作某个项目，也可以从一个公开的 Git 仓库克隆。</p>\n<p><strong>2、Git分支管理策略</strong></p>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" title=\"http://www.ruanyifeng.com/blog/2012/07/git.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p>\n<p> <a href=\"http://kb.cnblogs.com/page/132209/\" target=\"_blank\" rel=\"noopener\">GIT分支管理是一门艺术</a></p>\n<p><strong>3、Git详解</strong></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328069609436.html\" title=\"http://www.open-open.com/lib/view/open1328069609436.html\" target=\"_blank\" rel=\"noopener\">Git详解之一 Git起步</a></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328069733264.html\" title=\"Git详解之二 Git基础 \" target=\"_blank\" rel=\"noopener\">Git详解之二 Git基础</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328069889514.html\" title=\"Git详解之三 Git分支\" target=\"_blank\" rel=\"noopener\">Git详解之三 Git分支</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328069988843.html\" title=\"Git详解之四 服务器上的Git \" target=\"_blank\" rel=\"noopener\">Git详解之四 服务器上的Git</a></p>\n<p> <a href=\"http://www.open-open.com/lib/view/open1328070090108.html\" title=\"Git详解之五 分布式Git \" target=\"_blank\" rel=\"noopener\">Git详解之五 分布式Git</a></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1328070367499.html\" title=\"Git详解之六 Git工具 \" target=\"_blank\" rel=\"noopener\"> Git详解之六 Git工具</a></p>\n<p><strong>4、Git教程</strong></p>\n<p> <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" title=\"Git教程\" target=\"_blank\" rel=\"noopener\">Git教程</a></p>\n"},{"title":"git和github 关系","date":"2017-07-18T05:00:00.000Z","_content":"\n**1、git 和 github 是什么关系？**\n\ngit是一种版本控制系统。跟svn、cvs是同级的概念。\n\ngithub是一个网站，给用户提供git服务。这样你就不用自己部署git系统，直接用注册个账号，用他们提供的git服务就可以。\n\n1、git 是一个软件\n\n2、git 可以在 .git 文件夹里面维护你的历史代码\n\n3、指定了 remote 链接和用户信息（git 靠用户名+邮箱识别用户）之后，git 可以帮你将提交过的代码 push 到远程的仓库\n\n（任意提供了 git 托管服务的服务器上都可以，包括你自己建一个或者 GitHub/BitBucket 等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。\n\n**2、git 客户端下载**\n\n[http://git-scm.com/downloads](http://git-scm.com/downloads \"http://git-scm.com/downloads\")\n\n**3、github 网站地址**\n\n[https://github.com/](https://github.com/ \"https://github.com/\")","source":"_posts/git-git和github 关系.md","raw":"---\ntitle: git和github 关系\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n\n**1、git 和 github 是什么关系？**\n\ngit是一种版本控制系统。跟svn、cvs是同级的概念。\n\ngithub是一个网站，给用户提供git服务。这样你就不用自己部署git系统，直接用注册个账号，用他们提供的git服务就可以。\n\n1、git 是一个软件\n\n2、git 可以在 .git 文件夹里面维护你的历史代码\n\n3、指定了 remote 链接和用户信息（git 靠用户名+邮箱识别用户）之后，git 可以帮你将提交过的代码 push 到远程的仓库\n\n（任意提供了 git 托管服务的服务器上都可以，包括你自己建一个或者 GitHub/BitBucket 等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。\n\n**2、git 客户端下载**\n\n[http://git-scm.com/downloads](http://git-scm.com/downloads \"http://git-scm.com/downloads\")\n\n**3、github 网站地址**\n\n[https://github.com/](https://github.com/ \"https://github.com/\")","slug":"git-git和github 关系","published":1,"updated":"2018-10-17T05:48:51.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3d000ck4nzhahms1uw","content":"<p><strong>1、git 和 github 是什么关系？</strong></p>\n<p>git是一种版本控制系统。跟svn、cvs是同级的概念。</p>\n<p>github是一个网站，给用户提供git服务。这样你就不用自己部署git系统，直接用注册个账号，用他们提供的git服务就可以。</p>\n<p>1、git 是一个软件</p>\n<p>2、git 可以在 .git 文件夹里面维护你的历史代码</p>\n<p>3、指定了 remote 链接和用户信息（git 靠用户名+邮箱识别用户）之后，git 可以帮你将提交过的代码 push 到远程的仓库</p>\n<p>（任意提供了 git 托管服务的服务器上都可以，包括你自己建一个或者 GitHub/BitBucket 等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。</p>\n<p><strong>2、git 客户端下载</strong></p>\n<p><a href=\"http://git-scm.com/downloads\" title=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/downloads</a></p>\n<p><strong>3、github 网站地址</strong></p>\n<p><a href=\"https://github.com/\" title=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1、git 和 github 是什么关系？</strong></p>\n<p>git是一种版本控制系统。跟svn、cvs是同级的概念。</p>\n<p>github是一个网站，给用户提供git服务。这样你就不用自己部署git系统，直接用注册个账号，用他们提供的git服务就可以。</p>\n<p>1、git 是一个软件</p>\n<p>2、git 可以在 .git 文件夹里面维护你的历史代码</p>\n<p>3、指定了 remote 链接和用户信息（git 靠用户名+邮箱识别用户）之后，git 可以帮你将提交过的代码 push 到远程的仓库</p>\n<p>（任意提供了 git 托管服务的服务器上都可以，包括你自己建一个或者 GitHub/BitBucket 等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。</p>\n<p><strong>2、git 客户端下载</strong></p>\n<p><a href=\"http://git-scm.com/downloads\" title=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/downloads</a></p>\n<p><strong>3、github 网站地址</strong></p>\n<p><a href=\"https://github.com/\" title=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n"},{"title":"github 快速实现多人协作","date":"2017-07-18T05:00:00.000Z","_content":"\n前言：最近要做github多人协作，也就是多人开发。搜索了一些资料，千篇一律，而且操作麻烦。今天就整理一下，github多人协作的简单实现方法。\n\n下面的教程**不会出现**：公钥、组织、team、pull request\n\n* * *\n\n1、首先**小张**在github上创建一个仓库，比如叫做：[GlideDemo](https://github.com/zyj1609wz/GlideDemo)\n\n ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104742433-560617925.png)\n\n### **2、** 小张**开始邀请**小王\n\n创建仓库后，然后开始添加** 小王**了。 注意在第三步的时候，要输入**小王的github用户名。**\n\n**  ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104926840-123244029.png)**\n\n### **3、小王接收小张的邀请**\n\n**小王**在[github](https://github.com/ \"https://github.com/\")登录自己的账户，登录完成后，将在屏幕的右上角看到一个铃铛，双击铃铛。\n\n** ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901105239511-1477966844.gif)**\n\n**   小王在完成接受邀请后，就可以看到小张的项目仓库了。并且可以push代码到仓库。**\n\n**4、小张查看所有的协作伙伴。**\n\n** ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901112908371-1896274717.png)**","source":"_posts/git-github 快速实现多人协作.md","raw":"---\ntitle: github 快速实现多人协作\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n\n前言：最近要做github多人协作，也就是多人开发。搜索了一些资料，千篇一律，而且操作麻烦。今天就整理一下，github多人协作的简单实现方法。\n\n下面的教程**不会出现**：公钥、组织、team、pull request\n\n* * *\n\n1、首先**小张**在github上创建一个仓库，比如叫做：[GlideDemo](https://github.com/zyj1609wz/GlideDemo)\n\n ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104742433-560617925.png)\n\n### **2、** 小张**开始邀请**小王\n\n创建仓库后，然后开始添加** 小王**了。 注意在第三步的时候，要输入**小王的github用户名。**\n\n**  ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104926840-123244029.png)**\n\n### **3、小王接收小张的邀请**\n\n**小王**在[github](https://github.com/ \"https://github.com/\")登录自己的账户，登录完成后，将在屏幕的右上角看到一个铃铛，双击铃铛。\n\n** ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901105239511-1477966844.gif)**\n\n**   小王在完成接受邀请后，就可以看到小张的项目仓库了。并且可以push代码到仓库。**\n\n**4、小张查看所有的协作伙伴。**\n\n** ![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160901112908371-1896274717.png)**","slug":"git-github 快速实现多人协作","published":1,"updated":"2018-10-17T05:48:51.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3h000hk4nz681x7zoo","content":"<p>前言：最近要做github多人协作，也就是多人开发。搜索了一些资料，千篇一律，而且操作麻烦。今天就整理一下，github多人协作的简单实现方法。</p>\n<p>下面的教程<strong>不会出现</strong>：公钥、组织、team、pull request</p>\n<hr>\n<p>1、首先<strong>小张</strong>在github上创建一个仓库，比如叫做：<a href=\"https://github.com/zyj1609wz/GlideDemo\" target=\"_blank\" rel=\"noopener\">GlideDemo</a></p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104742433-560617925.png\" alt=\"\"></p>\n<h3 id=\"2、-小张开始邀请小王\"><a href=\"#2、-小张开始邀请小王\" class=\"headerlink\" title=\"2、 小张开始邀请小王\"></a><strong>2、</strong> 小张<strong>开始邀请</strong>小王</h3><p>创建仓库后，然后开始添加<strong> 小王</strong>了。 注意在第三步的时候，要输入<strong>小王的github用户名。</strong></p>\n<p><strong>  <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104926840-123244029.png\" alt=\"\"></strong></p>\n<h3 id=\"3、小王接收小张的邀请\"><a href=\"#3、小王接收小张的邀请\" class=\"headerlink\" title=\"3、小王接收小张的邀请\"></a><strong>3、小王接收小张的邀请</strong></h3><p><strong>小王</strong>在<a href=\"https://github.com/\" title=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>登录自己的账户，登录完成后，将在屏幕的右上角看到一个铃铛，双击铃铛。</p>\n<p><strong> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901105239511-1477966844.gif\" alt=\"\"></strong></p>\n<p><strong>   小王在完成接受邀请后，就可以看到小张的项目仓库了。并且可以push代码到仓库。</strong></p>\n<p><strong>4、小张查看所有的协作伙伴。</strong></p>\n<p><strong> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901112908371-1896274717.png\" alt=\"\"></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：最近要做github多人协作，也就是多人开发。搜索了一些资料，千篇一律，而且操作麻烦。今天就整理一下，github多人协作的简单实现方法。</p>\n<p>下面的教程<strong>不会出现</strong>：公钥、组织、team、pull request</p>\n<hr>\n<p>1、首先<strong>小张</strong>在github上创建一个仓库，比如叫做：<a href=\"https://github.com/zyj1609wz/GlideDemo\" target=\"_blank\" rel=\"noopener\">GlideDemo</a></p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104742433-560617925.png\" alt=\"\"></p>\n<h3 id=\"2、-小张开始邀请小王\"><a href=\"#2、-小张开始邀请小王\" class=\"headerlink\" title=\"2、 小张开始邀请小王\"></a><strong>2、</strong> 小张<strong>开始邀请</strong>小王</h3><p>创建仓库后，然后开始添加<strong> 小王</strong>了。 注意在第三步的时候，要输入<strong>小王的github用户名。</strong></p>\n<p><strong>  <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901104926840-123244029.png\" alt=\"\"></strong></p>\n<h3 id=\"3、小王接收小张的邀请\"><a href=\"#3、小王接收小张的邀请\" class=\"headerlink\" title=\"3、小王接收小张的邀请\"></a><strong>3、小王接收小张的邀请</strong></h3><p><strong>小王</strong>在<a href=\"https://github.com/\" title=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>登录自己的账户，登录完成后，将在屏幕的右上角看到一个铃铛，双击铃铛。</p>\n<p><strong> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901105239511-1477966844.gif\" alt=\"\"></strong></p>\n<p><strong>   小王在完成接受邀请后，就可以看到小张的项目仓库了。并且可以push代码到仓库。</strong></p>\n<p><strong>4、小张查看所有的协作伙伴。</strong></p>\n<p><strong> <img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160901112908371-1896274717.png\" alt=\"\"></strong></p>\n"},{"title":"pull request 是什么意思","date":"2017-07-18T05:00:00.000Z","_content":"\n1、git 上有常见的pull request 功能\n\n ![](http://images2015.cnblogs.com/blog/605655/201601/605655-20160115184616913-1303099209.png)\n\n**2、pull request 的含义**\n\n 解释一：\n\n 有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2。\n\n 然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。\n\n 如果被审核通过并正式合并，这样你就为项目A做贡献了。\n\n 解释二：\n\n\n我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。\n\n老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。\n\n最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。\n\n当你想更正别人仓库里的错误时，要走一个流程：\n\n1.  先 fork 别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的\n2.  clone 到本地分支，做一些 bug fix\n3.  发起 pull request 给原仓库，让他看到你修改的 bug\n4.  原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中\n\n至此，整个 pull request 的过程就结束了。\n\n\n\n\n\n相关地址:[http://www.zhihu.com/question/21682976](http://www.zhihu.com/question/21682976 \"http://www.zhihu.com/question/21682976\")\n\n","source":"_posts/git-pull request 是什么意思.md","raw":"---\ntitle: pull request 是什么意思\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n\n1、git 上有常见的pull request 功能\n\n ![](http://images2015.cnblogs.com/blog/605655/201601/605655-20160115184616913-1303099209.png)\n\n**2、pull request 的含义**\n\n 解释一：\n\n 有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2。\n\n 然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。\n\n 如果被审核通过并正式合并，这样你就为项目A做贡献了。\n\n 解释二：\n\n\n我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。\n\n老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。\n\n最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。\n\n当你想更正别人仓库里的错误时，要走一个流程：\n\n1.  先 fork 别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的\n2.  clone 到本地分支，做一些 bug fix\n3.  发起 pull request 给原仓库，让他看到你修改的 bug\n4.  原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中\n\n至此，整个 pull request 的过程就结束了。\n\n\n\n\n\n相关地址:[http://www.zhihu.com/question/21682976](http://www.zhihu.com/question/21682976 \"http://www.zhihu.com/question/21682976\")\n\n","slug":"git-pull request 是什么意思","published":1,"updated":"2018-10-17T05:48:51.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3j000kk4nzb3z05vg2","content":"<p>1、git 上有常见的pull request 功能</p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/605655/201601/605655-20160115184616913-1303099209.png\" alt=\"\"></p>\n<p><strong>2、pull request 的含义</strong></p>\n<p> 解释一：</p>\n<p> 有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2。</p>\n<p> 然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。</p>\n<p> 如果被审核通过并正式合并，这样你就为项目A做贡献了。</p>\n<p> 解释二：</p>\n<p>我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。</p>\n<p>老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。</p>\n<p>最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。</p>\n<p>当你想更正别人仓库里的错误时，要走一个流程：</p>\n<ol>\n<li>先 fork 别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的</li>\n<li>clone 到本地分支，做一些 bug fix</li>\n<li>发起 pull request 给原仓库，让他看到你修改的 bug</li>\n<li>原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中</li>\n</ol>\n<p>至此，整个 pull request 的过程就结束了。</p>\n<p>相关地址:<a href=\"http://www.zhihu.com/question/21682976\" title=\"http://www.zhihu.com/question/21682976\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/21682976</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、git 上有常见的pull request 功能</p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/605655/201601/605655-20160115184616913-1303099209.png\" alt=\"\"></p>\n<p><strong>2、pull request 的含义</strong></p>\n<p> 解释一：</p>\n<p> 有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2。</p>\n<p> 然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。</p>\n<p> 如果被审核通过并正式合并，这样你就为项目A做贡献了。</p>\n<p> 解释二：</p>\n<p>我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。</p>\n<p>老师把你的试卷拿过来，相当于先 fork。在你的卷子上做一些修改批注，相当于 git commit。</p>\n<p>最后把改好的试卷给你，相当于发 pull request，你拿到试卷重新改正错误，相当于 merge。</p>\n<p>当你想更正别人仓库里的错误时，要走一个流程：</p>\n<ol>\n<li>先 fork 别人的仓库，相当于拷贝一份，相信我，不会有人直接让你改修原仓库的</li>\n<li>clone 到本地分支，做一些 bug fix</li>\n<li>发起 pull request 给原仓库，让他看到你修改的 bug</li>\n<li>原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中</li>\n</ol>\n<p>至此，整个 pull request 的过程就结束了。</p>\n<p>相关地址:<a href=\"http://www.zhihu.com/question/21682976\" title=\"http://www.zhihu.com/question/21682976\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/21682976</a></p>\n"},{"title":"分支管理策略","date":"2017-07-18T05:00:00.000Z","_content":"\n**分支管理策略**\n\n下面我们来说一下一般企业中开发一个项目的分支策略：\n\n*   主分支 master\n*   开发分支 develop\n*   功能分支 feature\n*   预发布分支? release\n*   bug?分支 fixbug\n*   其它分支 other\n\n**1).主分支 master**\n\n代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png)\n\nGit主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n\n**2).开发分支 develop**\n\n主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_HYVm.png)\n\n这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在Master分支上，对Develop分支进行\"合并\"（merge）。\n\n**3).功能分支 feature**\n\n功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_v2ve.png)\n\n功能分支的名字，可以采用feature-*的形式命名。\n\n**4).预发布分支? release**\n\n预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n**5).bug 分支 fixbug**\n\nbug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_PIf1.png)\n\n**6).其它分支 other**\n\n还有就是其它分支了，大家可以根据需要创建即可……\n\n### 9.团队多人开发协作\n\n在上面的章节中我们讲解了Git的分支管理策略，一般开发团队中有这样几个分支，master、develop、feature、release、 bug、other分支，或者你还有其它分支，那有博友会问了，你讲了那么多分支，都在本地放着我们怎么查看和推送分支到远程服务器上呢？嘿嘿，我们说大 家别急我们在这一章节中就来重点讲解，在团队多人协作中的分支推送与抓取。\n","source":"_posts/git-分支管理策略.md","raw":"---\ntitle: 分支管理策略\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n\n**分支管理策略**\n\n下面我们来说一下一般企业中开发一个项目的分支策略：\n\n*   主分支 master\n*   开发分支 develop\n*   功能分支 feature\n*   预发布分支? release\n*   bug?分支 fixbug\n*   其它分支 other\n\n**1).主分支 master**\n\n代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png)\n\nGit主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n\n**2).开发分支 develop**\n\n主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_HYVm.png)\n\n这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在Master分支上，对Develop分支进行\"合并\"（merge）。\n\n**3).功能分支 feature**\n\n功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_v2ve.png)\n\n功能分支的名字，可以采用feature-*的形式命名。\n\n**4).预发布分支? release**\n\n预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n**5).bug 分支 fixbug**\n\nbug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n![image](http://static.oschina.net/uploads/img/201406/05112016_PIf1.png)\n\n**6).其它分支 other**\n\n还有就是其它分支了，大家可以根据需要创建即可……\n\n### 9.团队多人开发协作\n\n在上面的章节中我们讲解了Git的分支管理策略，一般开发团队中有这样几个分支，master、develop、feature、release、 bug、other分支，或者你还有其它分支，那有博友会问了，你讲了那么多分支，都在本地放着我们怎么查看和推送分支到远程服务器上呢？嘿嘿，我们说大 家别急我们在这一章节中就来重点讲解，在团队多人协作中的分支推送与抓取。\n","slug":"git-分支管理策略","published":1,"updated":"2018-10-17T05:48:51.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3o000pk4nzbqqtdfvl","content":"<p><strong>分支管理策略</strong></p>\n<p>下面我们来说一下一般企业中开发一个项目的分支策略：</p>\n<ul>\n<li>主分支 master</li>\n<li>开发分支 develop</li>\n<li>功能分支 feature</li>\n<li>预发布分支? release</li>\n<li>bug?分支 fixbug</li>\n<li>其它分支 other</li>\n</ul>\n<p><strong>1).主分支 master</strong></p>\n<p>代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png\" alt=\"image\"></p>\n<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>\n<p><strong>2).开发分支 develop</strong></p>\n<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_HYVm.png\" alt=\"image\"></p>\n<p>这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>\n<p><strong>3).功能分支 feature</strong></p>\n<p>功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_v2ve.png\" alt=\"image\"></p>\n<p>功能分支的名字，可以采用feature-*的形式命名。</p>\n<p><strong>4).预发布分支? release</strong></p>\n<p>预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>\n<p><strong>5).bug 分支 fixbug</strong></p>\n<p>bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_PIf1.png\" alt=\"image\"></p>\n<p><strong>6).其它分支 other</strong></p>\n<p>还有就是其它分支了，大家可以根据需要创建即可……</p>\n<h3 id=\"9-团队多人开发协作\"><a href=\"#9-团队多人开发协作\" class=\"headerlink\" title=\"9.团队多人开发协作\"></a>9.团队多人开发协作</h3><p>在上面的章节中我们讲解了Git的分支管理策略，一般开发团队中有这样几个分支，master、develop、feature、release、 bug、other分支，或者你还有其它分支，那有博友会问了，你讲了那么多分支，都在本地放着我们怎么查看和推送分支到远程服务器上呢？嘿嘿，我们说大 家别急我们在这一章节中就来重点讲解，在团队多人协作中的分支推送与抓取。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>分支管理策略</strong></p>\n<p>下面我们来说一下一般企业中开发一个项目的分支策略：</p>\n<ul>\n<li>主分支 master</li>\n<li>开发分支 develop</li>\n<li>功能分支 feature</li>\n<li>预发布分支? release</li>\n<li>bug?分支 fixbug</li>\n<li>其它分支 other</li>\n</ul>\n<p><strong>1).主分支 master</strong></p>\n<p>代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png\" alt=\"image\"></p>\n<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>\n<p><strong>2).开发分支 develop</strong></p>\n<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_HYVm.png\" alt=\"image\"></p>\n<p>这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>\n<p><strong>3).功能分支 feature</strong></p>\n<p>功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_v2ve.png\" alt=\"image\"></p>\n<p>功能分支的名字，可以采用feature-*的形式命名。</p>\n<p><strong>4).预发布分支? release</strong></p>\n<p>预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>\n<p><strong>5).bug 分支 fixbug</strong></p>\n<p>bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>\n<p><img src=\"http://static.oschina.net/uploads/img/201406/05112016_PIf1.png\" alt=\"image\"></p>\n<p><strong>6).其它分支 other</strong></p>\n<p>还有就是其它分支了，大家可以根据需要创建即可……</p>\n<h3 id=\"9-团队多人开发协作\"><a href=\"#9-团队多人开发协作\" class=\"headerlink\" title=\"9.团队多人开发协作\"></a>9.团队多人开发协作</h3><p>在上面的章节中我们讲解了Git的分支管理策略，一般开发团队中有这样几个分支，master、develop、feature、release、 bug、other分支，或者你还有其它分支，那有博友会问了，你讲了那么多分支，都在本地放着我们怎么查看和推送分支到远程服务器上呢？嘿嘿，我们说大 家别急我们在这一章节中就来重点讲解，在团队多人协作中的分支推送与抓取。</p>\n"},{"title":"GitHub 实现多人协同提交代码并且权限分组管理","date":"2017-07-17T05:00:00.000Z","_content":"\n前言：\n\n在上一篇文章中[Android github 快速实现多人协作](http://www.cnblogs.com/zhaoyanjun/p/5829142.html)(http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。\n\n其优点是：操作简单，快速上手。缺点是：没有办法实现权限控制。为啥要权限控制？这是一个蛋疼的问题，因为我们为了项目的安全考虑，需要对一部分人开放只读权限(只能 read、clone) ; 或者对一部分人开放写权限(只能 read、clone、push) ; 或者对一部分人开放管理者权限(只能 read、clone、push、给仓库添加成员 )。事实上github对权限的管理只有4种，前三种权限分别是 Admin(管理者)、Write(只写) 、Read(只读) 。最后一种权限比较特殊，它是该组织的创建者，拥有至高无上的的权利。\n\n## 正文：\n\n要想弄清楚github权限管理，需要了解几个概念。**organization（组织）、repository（仓库）、Team（团队）**。\n\n在了解这些概念之前，先听我讲一个小故事。话说从前有个生意人，由于他聪明又能干，他开了水果摊、奶茶店、还有一个网吧。转眼10年过去了，他积累了很多钱，也有了很牛逼的权利，总的来说就是有钱有势有人，于是乎有一天他带领100个兄弟成立一个黑帮组织：青帮。组织成立后，他把100个兄弟分成4个team, 每个team 25个人。团队成立后，兄弟们总不能坐着饿死吧，于是乎他有开了一个ktv 、一个超市、一个足浴大保健。那么问题就来了，怎么让4个team接手这3个项目，要有明确的权限控制，如果权限控制不得当，就会出现自家兄弟互相抢地盘的问题。一个项目可以让多个team管理，一个team可以管多个项目，所以team和项目之间是多对多的关系。\n\n* 小故事的中的角色资产分析\n\n生意人所拥有的资产：3个项目：水果摊、奶菜店、网吧。\n\n1个组织：青帮\n\n青帮组织所拥有的资产：3个项目：Ktv、超市、足浴大保健\n\n 4个team\n\n注意：水果摊、奶菜店、网吧 这三个项目只属于生意人的资产，不归任何组织所拥有。那延伸一下，生意人是可以再次创建一个新的项目，比如一个4s店；同时他也可以再创建一个新的组织，比如一个洪帮组织。同样在洪帮组织里面可以创建多个team。\n\n现在可以把思路转换到github中，对应关系\n\n生意人  -->  **你注册的github账户**\n\n水果摊  --> **repository（仓库）**\n\n青帮 --> **organization（**组织**）**\n\n团队--> ****Team（**团队**）****\n\n### 1、github实战--创建组织\n\n在故事中，生意人可以创建项目和组织。对应到github上的用户可以创建仓库和组织。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919134451262-1641512058.png)\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135811152-676430683.png)\n\n完整的实例\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135831887-796744077.gif)\n\n### 2、github实战--在组织中创建仓库\n\n当创建完组织后，来看看组织的结构\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919140654590-1651498572.png)\n\n在Organ-Name 组织下，创建一个仓库\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141042527-1718710011.gif)\n\n### 3、github实战--在组织中创建team\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141552606-1805098616.gif)\n\n团队创建完成后，默认这个团队的成员只有一个人，就是该账号。下面就开始给这个team添加其他成员。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919143047918-225222184.gif)\n\n邀请成功以后，需要被邀请人去自己的邮箱点击一下，确认邀请\n\n### 4、github实战--在组织中给仓库添加team并且设置权限。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919145301793-2066352342.gif)\n\n 可以看到，仓库对team的权限控制有三种\n\n*  Admin 管理者权限(只能 read、clone、push、给仓库添加成员 )\n*   Write 写权限(只能 read、clone、push)\n*   Read 读权限(只能 read、clone)\n\n另外任意一个Team可以供多个组织使用，到这里权限添加已经全部完成了。\n\n### 总结\n\n* 通过这篇文章可以在github愉快的使用权限管理了，但是github不能免费的创建私有仓库，这是一个很严重的问题。如果是开源项目，用github完全没有问题。如果是私有项目，可以有以下几个途径达到要求\n\n 1、在github花钱购买私有仓库。\n\n 2、使用国内比较出名的开源中国git托管服务：[https://git.oschina.net/](https://git.oschina.net/ \"https://git.oschina.net/\")\n\n 3、使用GitLab,这需要在自己的服务器上部署。传送门：[https://about.gitlab.com/gitlab-com/](https://about.gitlab.com/gitlab-com/ \"https://about.gitlab.com/gitlab-com/\")\n\n\n文章转自[http://www.cnblogs.com/zhaoyanjun/p/5882784.html ](http://www.cnblogs.com/zhaoyanjun/p/5882784.html )","source":"_posts/git-github 实现多人协同提交代码并且权限分组管理.md","raw":"\n---\ntitle: GitHub 实现多人协同提交代码并且权限分组管理\ndate: 2017-07-17 13:00:00\ntags: GitHub\ncategories: git\n---\n\n前言：\n\n在上一篇文章中[Android github 快速实现多人协作](http://www.cnblogs.com/zhaoyanjun/p/5829142.html)(http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。\n\n其优点是：操作简单，快速上手。缺点是：没有办法实现权限控制。为啥要权限控制？这是一个蛋疼的问题，因为我们为了项目的安全考虑，需要对一部分人开放只读权限(只能 read、clone) ; 或者对一部分人开放写权限(只能 read、clone、push) ; 或者对一部分人开放管理者权限(只能 read、clone、push、给仓库添加成员 )。事实上github对权限的管理只有4种，前三种权限分别是 Admin(管理者)、Write(只写) 、Read(只读) 。最后一种权限比较特殊，它是该组织的创建者，拥有至高无上的的权利。\n\n## 正文：\n\n要想弄清楚github权限管理，需要了解几个概念。**organization（组织）、repository（仓库）、Team（团队）**。\n\n在了解这些概念之前，先听我讲一个小故事。话说从前有个生意人，由于他聪明又能干，他开了水果摊、奶茶店、还有一个网吧。转眼10年过去了，他积累了很多钱，也有了很牛逼的权利，总的来说就是有钱有势有人，于是乎有一天他带领100个兄弟成立一个黑帮组织：青帮。组织成立后，他把100个兄弟分成4个team, 每个team 25个人。团队成立后，兄弟们总不能坐着饿死吧，于是乎他有开了一个ktv 、一个超市、一个足浴大保健。那么问题就来了，怎么让4个team接手这3个项目，要有明确的权限控制，如果权限控制不得当，就会出现自家兄弟互相抢地盘的问题。一个项目可以让多个team管理，一个team可以管多个项目，所以team和项目之间是多对多的关系。\n\n* 小故事的中的角色资产分析\n\n生意人所拥有的资产：3个项目：水果摊、奶菜店、网吧。\n\n1个组织：青帮\n\n青帮组织所拥有的资产：3个项目：Ktv、超市、足浴大保健\n\n 4个team\n\n注意：水果摊、奶菜店、网吧 这三个项目只属于生意人的资产，不归任何组织所拥有。那延伸一下，生意人是可以再次创建一个新的项目，比如一个4s店；同时他也可以再创建一个新的组织，比如一个洪帮组织。同样在洪帮组织里面可以创建多个team。\n\n现在可以把思路转换到github中，对应关系\n\n生意人  -->  **你注册的github账户**\n\n水果摊  --> **repository（仓库）**\n\n青帮 --> **organization（**组织**）**\n\n团队--> ****Team（**团队**）****\n\n### 1、github实战--创建组织\n\n在故事中，生意人可以创建项目和组织。对应到github上的用户可以创建仓库和组织。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919134451262-1641512058.png)\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135811152-676430683.png)\n\n完整的实例\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135831887-796744077.gif)\n\n### 2、github实战--在组织中创建仓库\n\n当创建完组织后，来看看组织的结构\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919140654590-1651498572.png)\n\n在Organ-Name 组织下，创建一个仓库\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141042527-1718710011.gif)\n\n### 3、github实战--在组织中创建team\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141552606-1805098616.gif)\n\n团队创建完成后，默认这个团队的成员只有一个人，就是该账号。下面就开始给这个team添加其他成员。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919143047918-225222184.gif)\n\n邀请成功以后，需要被邀请人去自己的邮箱点击一下，确认邀请\n\n### 4、github实战--在组织中给仓库添加team并且设置权限。\n\n![](http://images2015.cnblogs.com/blog/605655/201609/605655-20160919145301793-2066352342.gif)\n\n 可以看到，仓库对team的权限控制有三种\n\n*  Admin 管理者权限(只能 read、clone、push、给仓库添加成员 )\n*   Write 写权限(只能 read、clone、push)\n*   Read 读权限(只能 read、clone)\n\n另外任意一个Team可以供多个组织使用，到这里权限添加已经全部完成了。\n\n### 总结\n\n* 通过这篇文章可以在github愉快的使用权限管理了，但是github不能免费的创建私有仓库，这是一个很严重的问题。如果是开源项目，用github完全没有问题。如果是私有项目，可以有以下几个途径达到要求\n\n 1、在github花钱购买私有仓库。\n\n 2、使用国内比较出名的开源中国git托管服务：[https://git.oschina.net/](https://git.oschina.net/ \"https://git.oschina.net/\")\n\n 3、使用GitLab,这需要在自己的服务器上部署。传送门：[https://about.gitlab.com/gitlab-com/](https://about.gitlab.com/gitlab-com/ \"https://about.gitlab.com/gitlab-com/\")\n\n\n文章转自[http://www.cnblogs.com/zhaoyanjun/p/5882784.html ](http://www.cnblogs.com/zhaoyanjun/p/5882784.html )","slug":"git-github 实现多人协同提交代码并且权限分组管理","published":1,"updated":"2018-10-17T05:48:51.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3r000sk4nzyrkf9496","content":"<p>前言：</p>\n<p>在上一篇文章中<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5829142.html\" target=\"_blank\" rel=\"noopener\">Android github 快速实现多人协作</a>(<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。</a></p>\n<p>其优点是：操作简单，快速上手。缺点是：没有办法实现权限控制。为啥要权限控制？这是一个蛋疼的问题，因为我们为了项目的安全考虑，需要对一部分人开放只读权限(只能 read、clone) ; 或者对一部分人开放写权限(只能 read、clone、push) ; 或者对一部分人开放管理者权限(只能 read、clone、push、给仓库添加成员 )。事实上github对权限的管理只有4种，前三种权限分别是 Admin(管理者)、Write(只写) 、Read(只读) 。最后一种权限比较特殊，它是该组织的创建者，拥有至高无上的的权利。</p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>要想弄清楚github权限管理，需要了解几个概念。<strong>organization（组织）、repository（仓库）、Team（团队）</strong>。</p>\n<p>在了解这些概念之前，先听我讲一个小故事。话说从前有个生意人，由于他聪明又能干，他开了水果摊、奶茶店、还有一个网吧。转眼10年过去了，他积累了很多钱，也有了很牛逼的权利，总的来说就是有钱有势有人，于是乎有一天他带领100个兄弟成立一个黑帮组织：青帮。组织成立后，他把100个兄弟分成4个team, 每个team 25个人。团队成立后，兄弟们总不能坐着饿死吧，于是乎他有开了一个ktv 、一个超市、一个足浴大保健。那么问题就来了，怎么让4个team接手这3个项目，要有明确的权限控制，如果权限控制不得当，就会出现自家兄弟互相抢地盘的问题。一个项目可以让多个team管理，一个team可以管多个项目，所以team和项目之间是多对多的关系。</p>\n<ul>\n<li>小故事的中的角色资产分析</li>\n</ul>\n<p>生意人所拥有的资产：3个项目：水果摊、奶菜店、网吧。</p>\n<p>1个组织：青帮</p>\n<p>青帮组织所拥有的资产：3个项目：Ktv、超市、足浴大保健</p>\n<p> 4个team</p>\n<p>注意：水果摊、奶菜店、网吧 这三个项目只属于生意人的资产，不归任何组织所拥有。那延伸一下，生意人是可以再次创建一个新的项目，比如一个4s店；同时他也可以再创建一个新的组织，比如一个洪帮组织。同样在洪帮组织里面可以创建多个team。</p>\n<p>现在可以把思路转换到github中，对应关系</p>\n<p>生意人  –&gt;  <strong>你注册的github账户</strong></p>\n<p>水果摊  –&gt; <strong>repository（仓库）</strong></p>\n<p>青帮 –&gt; <strong>organization（</strong>组织<strong>）</strong></p>\n<p>团队–&gt; <strong>**Team（</strong>团队<strong>）**</strong></p>\n<h3 id=\"1、github实战–创建组织\"><a href=\"#1、github实战–创建组织\" class=\"headerlink\" title=\"1、github实战–创建组织\"></a>1、github实战–创建组织</h3><p>在故事中，生意人可以创建项目和组织。对应到github上的用户可以创建仓库和组织。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919134451262-1641512058.png\" alt=\"\"></p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135811152-676430683.png\" alt=\"\"></p>\n<p>完整的实例</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135831887-796744077.gif\" alt=\"\"></p>\n<h3 id=\"2、github实战–在组织中创建仓库\"><a href=\"#2、github实战–在组织中创建仓库\" class=\"headerlink\" title=\"2、github实战–在组织中创建仓库\"></a>2、github实战–在组织中创建仓库</h3><p>当创建完组织后，来看看组织的结构</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919140654590-1651498572.png\" alt=\"\"></p>\n<p>在Organ-Name 组织下，创建一个仓库</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141042527-1718710011.gif\" alt=\"\"></p>\n<h3 id=\"3、github实战–在组织中创建team\"><a href=\"#3、github实战–在组织中创建team\" class=\"headerlink\" title=\"3、github实战–在组织中创建team\"></a>3、github实战–在组织中创建team</h3><p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141552606-1805098616.gif\" alt=\"\"></p>\n<p>团队创建完成后，默认这个团队的成员只有一个人，就是该账号。下面就开始给这个team添加其他成员。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919143047918-225222184.gif\" alt=\"\"></p>\n<p>邀请成功以后，需要被邀请人去自己的邮箱点击一下，确认邀请</p>\n<h3 id=\"4、github实战–在组织中给仓库添加team并且设置权限。\"><a href=\"#4、github实战–在组织中给仓库添加team并且设置权限。\" class=\"headerlink\" title=\"4、github实战–在组织中给仓库添加team并且设置权限。\"></a>4、github实战–在组织中给仓库添加team并且设置权限。</h3><p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919145301793-2066352342.gif\" alt=\"\"></p>\n<p> 可以看到，仓库对team的权限控制有三种</p>\n<ul>\n<li>Admin 管理者权限(只能 read、clone、push、给仓库添加成员 )</li>\n<li>Write 写权限(只能 read、clone、push)</li>\n<li>Read 读权限(只能 read、clone)</li>\n</ul>\n<p>另外任意一个Team可以供多个组织使用，到这里权限添加已经全部完成了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>通过这篇文章可以在github愉快的使用权限管理了，但是github不能免费的创建私有仓库，这是一个很严重的问题。如果是开源项目，用github完全没有问题。如果是私有项目，可以有以下几个途径达到要求</p>\n<p>1、在github花钱购买私有仓库。</p>\n<p>2、使用国内比较出名的开源中国git托管服务：<a href=\"https://git.oschina.net/\" title=\"https://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">https://git.oschina.net/</a></p>\n<p>3、使用GitLab,这需要在自己的服务器上部署。传送门：<a href=\"https://about.gitlab.com/gitlab-com/\" title=\"https://about.gitlab.com/gitlab-com/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/gitlab-com/</a></p>\n</li>\n</ul>\n<p>文章转自<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5882784.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyanjun/p/5882784.html </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：</p>\n<p>在上一篇文章中<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5829142.html\" target=\"_blank\" rel=\"noopener\">Android github 快速实现多人协作</a>(<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyanjun/p/5829142.html)介绍了如何快速的实现多人协作的功能。</a></p>\n<p>其优点是：操作简单，快速上手。缺点是：没有办法实现权限控制。为啥要权限控制？这是一个蛋疼的问题，因为我们为了项目的安全考虑，需要对一部分人开放只读权限(只能 read、clone) ; 或者对一部分人开放写权限(只能 read、clone、push) ; 或者对一部分人开放管理者权限(只能 read、clone、push、给仓库添加成员 )。事实上github对权限的管理只有4种，前三种权限分别是 Admin(管理者)、Write(只写) 、Read(只读) 。最后一种权限比较特殊，它是该组织的创建者，拥有至高无上的的权利。</p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>要想弄清楚github权限管理，需要了解几个概念。<strong>organization（组织）、repository（仓库）、Team（团队）</strong>。</p>\n<p>在了解这些概念之前，先听我讲一个小故事。话说从前有个生意人，由于他聪明又能干，他开了水果摊、奶茶店、还有一个网吧。转眼10年过去了，他积累了很多钱，也有了很牛逼的权利，总的来说就是有钱有势有人，于是乎有一天他带领100个兄弟成立一个黑帮组织：青帮。组织成立后，他把100个兄弟分成4个team, 每个team 25个人。团队成立后，兄弟们总不能坐着饿死吧，于是乎他有开了一个ktv 、一个超市、一个足浴大保健。那么问题就来了，怎么让4个team接手这3个项目，要有明确的权限控制，如果权限控制不得当，就会出现自家兄弟互相抢地盘的问题。一个项目可以让多个team管理，一个team可以管多个项目，所以team和项目之间是多对多的关系。</p>\n<ul>\n<li>小故事的中的角色资产分析</li>\n</ul>\n<p>生意人所拥有的资产：3个项目：水果摊、奶菜店、网吧。</p>\n<p>1个组织：青帮</p>\n<p>青帮组织所拥有的资产：3个项目：Ktv、超市、足浴大保健</p>\n<p> 4个team</p>\n<p>注意：水果摊、奶菜店、网吧 这三个项目只属于生意人的资产，不归任何组织所拥有。那延伸一下，生意人是可以再次创建一个新的项目，比如一个4s店；同时他也可以再创建一个新的组织，比如一个洪帮组织。同样在洪帮组织里面可以创建多个team。</p>\n<p>现在可以把思路转换到github中，对应关系</p>\n<p>生意人  –&gt;  <strong>你注册的github账户</strong></p>\n<p>水果摊  –&gt; <strong>repository（仓库）</strong></p>\n<p>青帮 –&gt; <strong>organization（</strong>组织<strong>）</strong></p>\n<p>团队–&gt; <strong>**Team（</strong>团队<strong>）**</strong></p>\n<h3 id=\"1、github实战–创建组织\"><a href=\"#1、github实战–创建组织\" class=\"headerlink\" title=\"1、github实战–创建组织\"></a>1、github实战–创建组织</h3><p>在故事中，生意人可以创建项目和组织。对应到github上的用户可以创建仓库和组织。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919134451262-1641512058.png\" alt=\"\"></p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135811152-676430683.png\" alt=\"\"></p>\n<p>完整的实例</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919135831887-796744077.gif\" alt=\"\"></p>\n<h3 id=\"2、github实战–在组织中创建仓库\"><a href=\"#2、github实战–在组织中创建仓库\" class=\"headerlink\" title=\"2、github实战–在组织中创建仓库\"></a>2、github实战–在组织中创建仓库</h3><p>当创建完组织后，来看看组织的结构</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919140654590-1651498572.png\" alt=\"\"></p>\n<p>在Organ-Name 组织下，创建一个仓库</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141042527-1718710011.gif\" alt=\"\"></p>\n<h3 id=\"3、github实战–在组织中创建team\"><a href=\"#3、github实战–在组织中创建team\" class=\"headerlink\" title=\"3、github实战–在组织中创建team\"></a>3、github实战–在组织中创建team</h3><p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919141552606-1805098616.gif\" alt=\"\"></p>\n<p>团队创建完成后，默认这个团队的成员只有一个人，就是该账号。下面就开始给这个team添加其他成员。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919143047918-225222184.gif\" alt=\"\"></p>\n<p>邀请成功以后，需要被邀请人去自己的邮箱点击一下，确认邀请</p>\n<h3 id=\"4、github实战–在组织中给仓库添加team并且设置权限。\"><a href=\"#4、github实战–在组织中给仓库添加team并且设置权限。\" class=\"headerlink\" title=\"4、github实战–在组织中给仓库添加team并且设置权限。\"></a>4、github实战–在组织中给仓库添加team并且设置权限。</h3><p><img src=\"http://images2015.cnblogs.com/blog/605655/201609/605655-20160919145301793-2066352342.gif\" alt=\"\"></p>\n<p> 可以看到，仓库对team的权限控制有三种</p>\n<ul>\n<li>Admin 管理者权限(只能 read、clone、push、给仓库添加成员 )</li>\n<li>Write 写权限(只能 read、clone、push)</li>\n<li>Read 读权限(只能 read、clone)</li>\n</ul>\n<p>另外任意一个Team可以供多个组织使用，到这里权限添加已经全部完成了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>通过这篇文章可以在github愉快的使用权限管理了，但是github不能免费的创建私有仓库，这是一个很严重的问题。如果是开源项目，用github完全没有问题。如果是私有项目，可以有以下几个途径达到要求</p>\n<p>1、在github花钱购买私有仓库。</p>\n<p>2、使用国内比较出名的开源中国git托管服务：<a href=\"https://git.oschina.net/\" title=\"https://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">https://git.oschina.net/</a></p>\n<p>3、使用GitLab,这需要在自己的服务器上部署。传送门：<a href=\"https://about.gitlab.com/gitlab-com/\" title=\"https://about.gitlab.com/gitlab-com/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/gitlab-com/</a></p>\n</li>\n</ul>\n<p>文章转自<a href=\"http://www.cnblogs.com/zhaoyanjun/p/5882784.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaoyanjun/p/5882784.html </a></p>\n"},{"title":"和远程仓库比较、文件替换","date":"2017-07-18T05:00:00.000Z","_content":"Compare with:比较文件\n- Each Other：\n  选择两个文件互相比较\n- HEAD Revision：\n  已经提交的最新版本比较\n- Git index：\n   和准备commit的版本比较\n- Git index With HEAD：\n- Previous Revision：\n  和上一个版本比较\n- Branch Tag,or Reference：\n  选择分支，历史版本比较\n- Commit：\n 单文件和最新提交的文件比较\n\nreplace with：替换文件\n- HEAD Revision：\n已经提交的最新版本替换\n- Git index：\n准备commit的版本替换\n- Previous Revision：\n和上一个版本替换\n- Branch Tag,or Reference：\n选择分支，历史版本替换\n- Commit：\n单文件和最新提交的文件替换","source":"_posts/git-和远程仓库比较、文件替换.md","raw":"---\ntitle: 和远程仓库比较、文件替换\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\nCompare with:比较文件\n- Each Other：\n  选择两个文件互相比较\n- HEAD Revision：\n  已经提交的最新版本比较\n- Git index：\n   和准备commit的版本比较\n- Git index With HEAD：\n- Previous Revision：\n  和上一个版本比较\n- Branch Tag,or Reference：\n  选择分支，历史版本比较\n- Commit：\n 单文件和最新提交的文件比较\n\nreplace with：替换文件\n- HEAD Revision：\n已经提交的最新版本替换\n- Git index：\n准备commit的版本替换\n- Previous Revision：\n和上一个版本替换\n- Branch Tag,or Reference：\n选择分支，历史版本替换\n- Commit：\n单文件和最新提交的文件替换","slug":"git-和远程仓库比较、文件替换","published":1,"updated":"2018-10-17T05:48:51.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3u000wk4nzthkisg4c","content":"<p>Compare with:比较文件</p>\n<ul>\n<li>Each Other：<br>选择两个文件互相比较</li>\n<li>HEAD Revision：<br>已经提交的最新版本比较</li>\n<li>Git index：<br> 和准备commit的版本比较</li>\n<li>Git index With HEAD：</li>\n<li>Previous Revision：<br>和上一个版本比较</li>\n<li>Branch Tag,or Reference：<br>选择分支，历史版本比较</li>\n<li>Commit：<br>单文件和最新提交的文件比较</li>\n</ul>\n<p>replace with：替换文件</p>\n<ul>\n<li>HEAD Revision：<br>已经提交的最新版本替换</li>\n<li>Git index：<br>准备commit的版本替换</li>\n<li>Previous Revision：<br>和上一个版本替换</li>\n<li>Branch Tag,or Reference：<br>选择分支，历史版本替换</li>\n<li>Commit：<br>单文件和最新提交的文件替换</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Compare with:比较文件</p>\n<ul>\n<li>Each Other：<br>选择两个文件互相比较</li>\n<li>HEAD Revision：<br>已经提交的最新版本比较</li>\n<li>Git index：<br> 和准备commit的版本比较</li>\n<li>Git index With HEAD：</li>\n<li>Previous Revision：<br>和上一个版本比较</li>\n<li>Branch Tag,or Reference：<br>选择分支，历史版本比较</li>\n<li>Commit：<br>单文件和最新提交的文件比较</li>\n</ul>\n<p>replace with：替换文件</p>\n<ul>\n<li>HEAD Revision：<br>已经提交的最新版本替换</li>\n<li>Git index：<br>准备commit的版本替换</li>\n<li>Previous Revision：<br>和上一个版本替换</li>\n<li>Branch Tag,or Reference：<br>选择分支，历史版本替换</li>\n<li>Commit：<br>单文件和最新提交的文件替换</li>\n</ul>\n"},{"title":"版本回退reset和revert区别","date":"2017-07-18T05:00:00.000Z","_content":"总有一天你会遇到下面的问题.\n\n(1)改完代码匆忙提交,上线发现有问题,怎么办  赶紧回滚.\n\n(2)改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.\n\n大致分为下面2种情况:\n\n1.没有push\n\n这种情况发生在你的本地代码仓库,可能你add ,commit 以后发现代码有点问题,准备取消提交,用到下面命令\n\nreset\n\n```\ngit reset[--soft|--mixed|--hard\n```\n\n\n上面常见三种类型\n\n--mixed\n\n会保留源码,只是将git commit和index 信息回退到了某个版本.\n\ngit reset 默认是 --mixed 模式\ngit reset --mixed  等价于  git reset</pre>\n\n--soft\n\n保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\n--hard\n\n源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\n当然有人在push代码以后,也使用 reset --hard <commit...> 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现权是冲突.....\n\n所以,这种情况你要使用下面的方式\n\n2.已经push\n\n对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令\n\nrevert\n\ngit revert用于反转提交,执行evert命令时要求工作树必须是干净的.\n\ngit revert用一个新提交来消除一个历史提交所做的任何修改.\n\nrevert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)\n\nrevert 使用,需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 或者在adgit搭建的web环境历史提交记录里查看.\n\n\n```\ngit revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61\n```\n\n\n通常,前几位即可\n\n\n```\ngit revert c011eb3\n```\n\n\ngit revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit\n\n看似达到的效果是一样的,其实完全不同.\n\n第一:\n\n上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.\n\n第二:\n\n如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.\n\n第三:\n\nreset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.\n","source":"_posts/git-版本回退reset和revert区别.md","raw":"---\ntitle: 版本回退reset和revert区别\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\n总有一天你会遇到下面的问题.\n\n(1)改完代码匆忙提交,上线发现有问题,怎么办  赶紧回滚.\n\n(2)改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.\n\n大致分为下面2种情况:\n\n1.没有push\n\n这种情况发生在你的本地代码仓库,可能你add ,commit 以后发现代码有点问题,准备取消提交,用到下面命令\n\nreset\n\n```\ngit reset[--soft|--mixed|--hard\n```\n\n\n上面常见三种类型\n\n--mixed\n\n会保留源码,只是将git commit和index 信息回退到了某个版本.\n\ngit reset 默认是 --mixed 模式\ngit reset --mixed  等价于  git reset</pre>\n\n--soft\n\n保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\n--hard\n\n源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\n当然有人在push代码以后,也使用 reset --hard <commit...> 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现权是冲突.....\n\n所以,这种情况你要使用下面的方式\n\n2.已经push\n\n对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令\n\nrevert\n\ngit revert用于反转提交,执行evert命令时要求工作树必须是干净的.\n\ngit revert用一个新提交来消除一个历史提交所做的任何修改.\n\nrevert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)\n\nrevert 使用,需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 或者在adgit搭建的web环境历史提交记录里查看.\n\n\n```\ngit revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61\n```\n\n\n通常,前几位即可\n\n\n```\ngit revert c011eb3\n```\n\n\ngit revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit\n\n看似达到的效果是一样的,其实完全不同.\n\n第一:\n\n上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.\n\n第二:\n\n如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.\n\n第三:\n\nreset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.\n","slug":"git-版本回退reset和revert区别","published":1,"updated":"2018-10-17T06:49:06.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3w000zk4nzvvaqa4lb","content":"<p>总有一天你会遇到下面的问题.</p>\n<p>(1)改完代码匆忙提交,上线发现有问题,怎么办  赶紧回滚.</p>\n<p>(2)改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</p>\n<p>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</p>\n<p>大致分为下面2种情况:</p>\n<p>1.没有push</p>\n<p>这种情况发生在你的本地代码仓库,可能你add ,commit 以后发现代码有点问题,准备取消提交,用到下面命令</p>\n<p>reset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset[--soft|--mixed|--hard</span><br></pre></td></tr></table></figure>\n<p>上面常见三种类型</p>\n<p>–mixed</p>\n<p>会保留源码,只是将git commit和index 信息回退到了某个版本.</p>\n<p>git reset 默认是 –mixed 模式<br>git reset –mixed  等价于  git reset</p>\n<p>–soft</p>\n<p>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.</p>\n<p>–hard</p>\n<p>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)</p>\n<p>当然有人在push代码以后,也使用 reset –hard &lt;commit…&gt; 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现权是冲突…..</p>\n<p>所以,这种情况你要使用下面的方式</p>\n<p>2.已经push</p>\n<p>对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令</p>\n<p>revert</p>\n<p>git revert用于反转提交,执行evert命令时要求工作树必须是干净的.</p>\n<p>git revert用一个新提交来消除一个历史提交所做的任何修改.</p>\n<p>revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)</p>\n<p>revert 使用,需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 或者在adgit搭建的web环境历史提交记录里查看.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</span><br></pre></td></tr></table></figure>\n<p>通常,前几位即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert c011eb3</span><br></pre></td></tr></table></figure>\n<p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit</p>\n<p>看似达到的效果是一样的,其实完全不同.</p>\n<p>第一:</p>\n<p>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.</p>\n<p>第二:</p>\n<p>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.</p>\n<p>第三:</p>\n<p>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>总有一天你会遇到下面的问题.</p>\n<p>(1)改完代码匆忙提交,上线发现有问题,怎么办  赶紧回滚.</p>\n<p>(2)改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</p>\n<p>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</p>\n<p>大致分为下面2种情况:</p>\n<p>1.没有push</p>\n<p>这种情况发生在你的本地代码仓库,可能你add ,commit 以后发现代码有点问题,准备取消提交,用到下面命令</p>\n<p>reset</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset[--soft|--mixed|--hard</span><br></pre></td></tr></table></figure>\n<p>上面常见三种类型</p>\n<p>–mixed</p>\n<p>会保留源码,只是将git commit和index 信息回退到了某个版本.</p>\n<p>git reset 默认是 –mixed 模式<br>git reset –mixed  等价于  git reset</p>\n<p>–soft</p>\n<p>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.</p>\n<p>–hard</p>\n<p>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)</p>\n<p>当然有人在push代码以后,也使用 reset –hard &lt;commit…&gt; 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现权是冲突…..</p>\n<p>所以,这种情况你要使用下面的方式</p>\n<p>2.已经push</p>\n<p>对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令</p>\n<p>revert</p>\n<p>git revert用于反转提交,执行evert命令时要求工作树必须是干净的.</p>\n<p>git revert用一个新提交来消除一个历史提交所做的任何修改.</p>\n<p>revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)</p>\n<p>revert 使用,需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 或者在adgit搭建的web环境历史提交记录里查看.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</span><br></pre></td></tr></table></figure>\n<p>通常,前几位即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert c011eb3</span><br></pre></td></tr></table></figure>\n<p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit</p>\n<p>看似达到的效果是一样的,其实完全不同.</p>\n<p>第一:</p>\n<p>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.</p>\n<p>第二:</p>\n<p>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.</p>\n<p>第三:</p>\n<p>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.</p>\n"},{"title":"reset soft,hard,mixed之区别深解","date":"2017-07-18T05:00:00.000Z","_content":"GIT reset命令，似乎让人很迷惑，以至于误解，误用。但是事实上不应该如此难以理解，只要你理解到这个命令究竟在干什么。\n\n首先我们来看几个术语\n\n*   HEAD\n\n这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交\n\n*   Index\n\nindex也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit\n\n*   Working Copy\n\nworking copy代表你正在工作的那个文件集\n\n*   Flow\n\n当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。\n\n当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。\n\n然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”\n\n当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。\n\n下面这一段是另外一个牛人的解释：\n\n总的来说，git reset命令是用来将当前branch重置到另外一个commit的，而这个动作可能会将index以及work tree同样影响。比如如果你的master branch（当前checked out）是下面这个样子:\n\n\n- A - B - C (HEAD, master)\n\n\nHEAD和master branch tip是在一起的，而你希望将master指向到B，而不是C，那么你执行\n\ngit reset B以便移动master branch到B那个commit：\n\n\n- A - B (HEAD, master)      # - C is still here, but there'\n\n注意：git reset和checkout是不一样的。如果你运行git checkout B,那么你讲得到：\n\n\n- A - B (HEAD) - C (master)\n\n\n这时HEAD和master branch就不在一个点上了，你进入detached HEAD STATE. HEAD,work tree,index都指向了B，但是master branch却依然指向C。如果在这个点上，你执行一个新的commit D，那么你讲得到下面（当然这可能并不是你想要的，你可能想要的是创一个branch做bug fix）:\n\n\n- A - B - C (master)\n       \\\n        D (HEAD)\n\n\n*   Reset\n\n如果你仔细研究reset命令本身就知道，它本身做的事情就是重置HEAD(当前分支的版本顶端）到另外一个commit。假设我们有一个分支（名称本身无所谓，所以我们就简单称为\"super-duper-feature”分支吧），图形化表示如下：\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182225251979460.png)\n\n如果我们执行：\n\n\ngit reset HEAD\n\n\n任何事情都不会发生，这是因为我们告诉GIT重置这个分支到HEAD，而这个正是它现在所在的位置。\n\n\n\n\n当我们再执行上面的命令时（HEAD~1是“the commit right before HEAD”的别名，或者说：put differently \"HEAD's parent\"），我们的分支将会如下所示\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182229495415187.png)\n\n如果我们执行git reset HEAD~2,则意味着将HEAD从顶端的commit往下移动两个更早的commit。\n\n*   Parameters\n\n1.  soft\n\n--soft参数告诉Git重置HEAD到另外一个commit，但也到此为止。如果你指定--soft参数，Git将停止在那里而什么也不会根本变化。这意味着index,working copy都不会做任何变化，所有的在original HEAD和你重置到的那个commit之间的所有变更集都放在stage(index)区域中。\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182237338854646.png)\n\n　　2.hard\n\n--hard参数将会blow out everything.它将重置HEAD返回到另外一个commit(取决于~12的参数），重置index以便反映HEAD的变化，并且重置working copy也使得其完全匹配起来。这是一个比较危险的动作，具有破坏性，数据因此可能会丢失！如果真是发生了数据丢失又希望找回来，那么只有使用：[git reflog](http://blog.csdn.net/ibingow/article/details/7541402)命令了。makes everything match the commit you have reset to.你的所有本地修改将丢失。<span style=\"color: #000000; background-color: #cc99ff;\">如果我们希望彻底丢掉本地修改但是又不希望更改branch所指向的commit，则执行git reset --hard = git reset --hard HEAD</span>. i.e. don't change the branch but get rid of all local changes.另外一个场景是简单地移动branch从一个到另一个commit而保持index/work区域同步。这将确实令你丢失你的工作，因为它将修改你的work tree！![](http://images0.cnblogs.com/blog2015/737565/201505/182238305101646.png)\n\n　　3.mixed(default）\n\n--mixed是reset的默认参数，也就是当你不指定任何参数时的参数。它将重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，但是也到此为止。working copy不会被更改。所有该branch上从original HEAD（commit）到你重置到的那个commit之间的所有变更将作为local modifications保存在working area中，（被标示为local modification or untracked via git status)，但是并未staged的状态，你可以重新检视然后再做修改和commit\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182238202609380.png)\n\n[本文转自http://www.cnblogs.com/kidsitcn/p/4513297.html](http://www.cnblogs.com/kidsitcn/p/4513297.html)\n","source":"_posts/git-reset soft,hard,mixed之区别深解.md","raw":"---\ntitle: reset soft,hard,mixed之区别深解\ndate: 2017-07-18 13:00:00\ntags: GitHub\ncategories: git\n---\nGIT reset命令，似乎让人很迷惑，以至于误解，误用。但是事实上不应该如此难以理解，只要你理解到这个命令究竟在干什么。\n\n首先我们来看几个术语\n\n*   HEAD\n\n这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交\n\n*   Index\n\nindex也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit\n\n*   Working Copy\n\nworking copy代表你正在工作的那个文件集\n\n*   Flow\n\n当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。\n\n当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。\n\n然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”\n\n当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。\n\n下面这一段是另外一个牛人的解释：\n\n总的来说，git reset命令是用来将当前branch重置到另外一个commit的，而这个动作可能会将index以及work tree同样影响。比如如果你的master branch（当前checked out）是下面这个样子:\n\n\n- A - B - C (HEAD, master)\n\n\nHEAD和master branch tip是在一起的，而你希望将master指向到B，而不是C，那么你执行\n\ngit reset B以便移动master branch到B那个commit：\n\n\n- A - B (HEAD, master)      # - C is still here, but there'\n\n注意：git reset和checkout是不一样的。如果你运行git checkout B,那么你讲得到：\n\n\n- A - B (HEAD) - C (master)\n\n\n这时HEAD和master branch就不在一个点上了，你进入detached HEAD STATE. HEAD,work tree,index都指向了B，但是master branch却依然指向C。如果在这个点上，你执行一个新的commit D，那么你讲得到下面（当然这可能并不是你想要的，你可能想要的是创一个branch做bug fix）:\n\n\n- A - B - C (master)\n       \\\n        D (HEAD)\n\n\n*   Reset\n\n如果你仔细研究reset命令本身就知道，它本身做的事情就是重置HEAD(当前分支的版本顶端）到另外一个commit。假设我们有一个分支（名称本身无所谓，所以我们就简单称为\"super-duper-feature”分支吧），图形化表示如下：\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182225251979460.png)\n\n如果我们执行：\n\n\ngit reset HEAD\n\n\n任何事情都不会发生，这是因为我们告诉GIT重置这个分支到HEAD，而这个正是它现在所在的位置。\n\n\n\n\n当我们再执行上面的命令时（HEAD~1是“the commit right before HEAD”的别名，或者说：put differently \"HEAD's parent\"），我们的分支将会如下所示\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182229495415187.png)\n\n如果我们执行git reset HEAD~2,则意味着将HEAD从顶端的commit往下移动两个更早的commit。\n\n*   Parameters\n\n1.  soft\n\n--soft参数告诉Git重置HEAD到另外一个commit，但也到此为止。如果你指定--soft参数，Git将停止在那里而什么也不会根本变化。这意味着index,working copy都不会做任何变化，所有的在original HEAD和你重置到的那个commit之间的所有变更集都放在stage(index)区域中。\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182237338854646.png)\n\n　　2.hard\n\n--hard参数将会blow out everything.它将重置HEAD返回到另外一个commit(取决于~12的参数），重置index以便反映HEAD的变化，并且重置working copy也使得其完全匹配起来。这是一个比较危险的动作，具有破坏性，数据因此可能会丢失！如果真是发生了数据丢失又希望找回来，那么只有使用：[git reflog](http://blog.csdn.net/ibingow/article/details/7541402)命令了。makes everything match the commit you have reset to.你的所有本地修改将丢失。<span style=\"color: #000000; background-color: #cc99ff;\">如果我们希望彻底丢掉本地修改但是又不希望更改branch所指向的commit，则执行git reset --hard = git reset --hard HEAD</span>. i.e. don't change the branch but get rid of all local changes.另外一个场景是简单地移动branch从一个到另一个commit而保持index/work区域同步。这将确实令你丢失你的工作，因为它将修改你的work tree！![](http://images0.cnblogs.com/blog2015/737565/201505/182238305101646.png)\n\n　　3.mixed(default）\n\n--mixed是reset的默认参数，也就是当你不指定任何参数时的参数。它将重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，但是也到此为止。working copy不会被更改。所有该branch上从original HEAD（commit）到你重置到的那个commit之间的所有变更将作为local modifications保存在working area中，（被标示为local modification or untracked via git status)，但是并未staged的状态，你可以重新检视然后再做修改和commit\n\n![](http://images0.cnblogs.com/blog2015/737565/201505/182238202609380.png)\n\n[本文转自http://www.cnblogs.com/kidsitcn/p/4513297.html](http://www.cnblogs.com/kidsitcn/p/4513297.html)\n","slug":"git-reset soft,hard,mixed之区别深解","published":1,"updated":"2018-10-17T05:48:51.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr3y0012k4nzdeh908wk","content":"<p>GIT reset命令，似乎让人很迷惑，以至于误解，误用。但是事实上不应该如此难以理解，只要你理解到这个命令究竟在干什么。</p>\n<p>首先我们来看几个术语</p>\n<ul>\n<li>HEAD</li>\n</ul>\n<p>这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</p>\n<ul>\n<li>Index</li>\n</ul>\n<p>index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit</p>\n<ul>\n<li>Working Copy</li>\n</ul>\n<p>working copy代表你正在工作的那个文件集</p>\n<ul>\n<li>Flow</li>\n</ul>\n<p>当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。</p>\n<p>当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。</p>\n<p>然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”</p>\n<p>当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。</p>\n<p>下面这一段是另外一个牛人的解释：</p>\n<p>总的来说，git reset命令是用来将当前branch重置到另外一个commit的，而这个动作可能会将index以及work tree同样影响。比如如果你的master branch（当前checked out）是下面这个样子:</p>\n<ul>\n<li>A - B - C (HEAD, master)</li>\n</ul>\n<p>HEAD和master branch tip是在一起的，而你希望将master指向到B，而不是C，那么你执行</p>\n<p>git reset B以便移动master branch到B那个commit：</p>\n<ul>\n<li>A - B (HEAD, master)      # - C is still here, but there’</li>\n</ul>\n<p>注意：git reset和checkout是不一样的。如果你运行git checkout B,那么你讲得到：</p>\n<ul>\n<li>A - B (HEAD) - C (master)</li>\n</ul>\n<p>这时HEAD和master branch就不在一个点上了，你进入detached HEAD STATE. HEAD,work tree,index都指向了B，但是master branch却依然指向C。如果在这个点上，你执行一个新的commit D，那么你讲得到下面（当然这可能并不是你想要的，你可能想要的是创一个branch做bug fix）:</p>\n<ul>\n<li>A - B - C (master)<pre><code>\\\n D (HEAD)\n</code></pre></li>\n</ul>\n<ul>\n<li>Reset</li>\n</ul>\n<p>如果你仔细研究reset命令本身就知道，它本身做的事情就是重置HEAD(当前分支的版本顶端）到另外一个commit。假设我们有一个分支（名称本身无所谓，所以我们就简单称为”super-duper-feature”分支吧），图形化表示如下：</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182225251979460.png\" alt=\"\"></p>\n<p>如果我们执行：</p>\n<p>git reset HEAD</p>\n<p>任何事情都不会发生，这是因为我们告诉GIT重置这个分支到HEAD，而这个正是它现在所在的位置。</p>\n<p>当我们再执行上面的命令时（HEAD~1是“the commit right before HEAD”的别名，或者说：put differently “HEAD’s parent”），我们的分支将会如下所示</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182229495415187.png\" alt=\"\"></p>\n<p>如果我们执行git reset HEAD~2,则意味着将HEAD从顶端的commit往下移动两个更早的commit。</p>\n<ul>\n<li>Parameters</li>\n</ul>\n<ol>\n<li>soft</li>\n</ol>\n<p>–soft参数告诉Git重置HEAD到另外一个commit，但也到此为止。如果你指定–soft参数，Git将停止在那里而什么也不会根本变化。这意味着index,working copy都不会做任何变化，所有的在original HEAD和你重置到的那个commit之间的所有变更集都放在stage(index)区域中。</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182237338854646.png\" alt=\"\"></p>\n<p>　　2.hard</p>\n<p>–hard参数将会blow out everything.它将重置HEAD返回到另外一个commit(取决于~12的参数），重置index以便反映HEAD的变化，并且重置working copy也使得其完全匹配起来。这是一个比较危险的动作，具有破坏性，数据因此可能会丢失！如果真是发生了数据丢失又希望找回来，那么只有使用：<a href=\"http://blog.csdn.net/ibingow/article/details/7541402\" target=\"_blank\" rel=\"noopener\">git reflog</a>命令了。makes everything match the commit you have reset to.你的所有本地修改将丢失。<span style=\"color: #000000; background-color: #cc99ff;\">如果我们希望彻底丢掉本地修改但是又不希望更改branch所指向的commit，则执行git reset –hard = git reset –hard HEAD</span>. i.e. don’t change the branch but get rid of all local changes.另外一个场景是简单地移动branch从一个到另一个commit而保持index/work区域同步。这将确实令你丢失你的工作，因为它将修改你的work tree！<img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182238305101646.png\" alt=\"\"></p>\n<p>　　3.mixed(default）</p>\n<p>–mixed是reset的默认参数，也就是当你不指定任何参数时的参数。它将重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，但是也到此为止。working copy不会被更改。所有该branch上从original HEAD（commit）到你重置到的那个commit之间的所有变更将作为local modifications保存在working area中，（被标示为local modification or untracked via git status)，但是并未staged的状态，你可以重新检视然后再做修改和commit</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182238202609380.png\" alt=\"\"></p>\n<p><a href=\"http://www.cnblogs.com/kidsitcn/p/4513297.html\" target=\"_blank\" rel=\"noopener\">本文转自http://www.cnblogs.com/kidsitcn/p/4513297.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>GIT reset命令，似乎让人很迷惑，以至于误解，误用。但是事实上不应该如此难以理解，只要你理解到这个命令究竟在干什么。</p>\n<p>首先我们来看几个术语</p>\n<ul>\n<li>HEAD</li>\n</ul>\n<p>这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</p>\n<ul>\n<li>Index</li>\n</ul>\n<p>index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit</p>\n<ul>\n<li>Working Copy</li>\n</ul>\n<p>working copy代表你正在工作的那个文件集</p>\n<ul>\n<li>Flow</li>\n</ul>\n<p>当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。</p>\n<p>当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。</p>\n<p>然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”</p>\n<p>当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。</p>\n<p>下面这一段是另外一个牛人的解释：</p>\n<p>总的来说，git reset命令是用来将当前branch重置到另外一个commit的，而这个动作可能会将index以及work tree同样影响。比如如果你的master branch（当前checked out）是下面这个样子:</p>\n<ul>\n<li>A - B - C (HEAD, master)</li>\n</ul>\n<p>HEAD和master branch tip是在一起的，而你希望将master指向到B，而不是C，那么你执行</p>\n<p>git reset B以便移动master branch到B那个commit：</p>\n<ul>\n<li>A - B (HEAD, master)      # - C is still here, but there’</li>\n</ul>\n<p>注意：git reset和checkout是不一样的。如果你运行git checkout B,那么你讲得到：</p>\n<ul>\n<li>A - B (HEAD) - C (master)</li>\n</ul>\n<p>这时HEAD和master branch就不在一个点上了，你进入detached HEAD STATE. HEAD,work tree,index都指向了B，但是master branch却依然指向C。如果在这个点上，你执行一个新的commit D，那么你讲得到下面（当然这可能并不是你想要的，你可能想要的是创一个branch做bug fix）:</p>\n<ul>\n<li>A - B - C (master)<pre><code>\\\n D (HEAD)\n</code></pre></li>\n</ul>\n<ul>\n<li>Reset</li>\n</ul>\n<p>如果你仔细研究reset命令本身就知道，它本身做的事情就是重置HEAD(当前分支的版本顶端）到另外一个commit。假设我们有一个分支（名称本身无所谓，所以我们就简单称为”super-duper-feature”分支吧），图形化表示如下：</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182225251979460.png\" alt=\"\"></p>\n<p>如果我们执行：</p>\n<p>git reset HEAD</p>\n<p>任何事情都不会发生，这是因为我们告诉GIT重置这个分支到HEAD，而这个正是它现在所在的位置。</p>\n<p>当我们再执行上面的命令时（HEAD~1是“the commit right before HEAD”的别名，或者说：put differently “HEAD’s parent”），我们的分支将会如下所示</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182229495415187.png\" alt=\"\"></p>\n<p>如果我们执行git reset HEAD~2,则意味着将HEAD从顶端的commit往下移动两个更早的commit。</p>\n<ul>\n<li>Parameters</li>\n</ul>\n<ol>\n<li>soft</li>\n</ol>\n<p>–soft参数告诉Git重置HEAD到另外一个commit，但也到此为止。如果你指定–soft参数，Git将停止在那里而什么也不会根本变化。这意味着index,working copy都不会做任何变化，所有的在original HEAD和你重置到的那个commit之间的所有变更集都放在stage(index)区域中。</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182237338854646.png\" alt=\"\"></p>\n<p>　　2.hard</p>\n<p>–hard参数将会blow out everything.它将重置HEAD返回到另外一个commit(取决于~12的参数），重置index以便反映HEAD的变化，并且重置working copy也使得其完全匹配起来。这是一个比较危险的动作，具有破坏性，数据因此可能会丢失！如果真是发生了数据丢失又希望找回来，那么只有使用：<a href=\"http://blog.csdn.net/ibingow/article/details/7541402\" target=\"_blank\" rel=\"noopener\">git reflog</a>命令了。makes everything match the commit you have reset to.你的所有本地修改将丢失。<span style=\"color: #000000; background-color: #cc99ff;\">如果我们希望彻底丢掉本地修改但是又不希望更改branch所指向的commit，则执行git reset –hard = git reset –hard HEAD</span>. i.e. don’t change the branch but get rid of all local changes.另外一个场景是简单地移动branch从一个到另一个commit而保持index/work区域同步。这将确实令你丢失你的工作，因为它将修改你的work tree！<img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182238305101646.png\" alt=\"\"></p>\n<p>　　3.mixed(default）</p>\n<p>–mixed是reset的默认参数，也就是当你不指定任何参数时的参数。它将重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，但是也到此为止。working copy不会被更改。所有该branch上从original HEAD（commit）到你重置到的那个commit之间的所有变更将作为local modifications保存在working area中，（被标示为local modification or untracked via git status)，但是并未staged的状态，你可以重新检视然后再做修改和commit</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/737565/201505/182238202609380.png\" alt=\"\"></p>\n<p><a href=\"http://www.cnblogs.com/kidsitcn/p/4513297.html\" target=\"_blank\" rel=\"noopener\">本文转自http://www.cnblogs.com/kidsitcn/p/4513297.html</a></p>\n"},{"title":"Hello World","date":"2016-07-13T01:27:38.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-07-13 09:27:38\ntags: hexo\ncategories: hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-10-17T05:48:51.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr410015k4nzyit9ch4l","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"多边形的质心","date":"2016-12-23T03:04:02.000Z","_content":"\n\n这个公式可以计算出，一个非自相交多变行的质点，设定多边形有n个顶点，(x0,y0), (x1,y1), ..., (xn−1,yn−1)\n\n![polygonCentroid](https://yapengwen.github.io/img/polygonCentroid.png)\n\n多边形的面积\n\n![polygonCentroid](https://yapengwen.github.io/img/polygonarea.png)\n\n(Cx, Cy)就是多边形的质心他永远落在多边形内\n\n```javascript\n//根据围栏信息计算质点\nfunction CentroidOfPolygon(coords){\n//\tvar coords = [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93]\n\tvar xarr = new Array();\n\tvar yarr = new Array();\n\tfor(var i = 0; i < coords.length; i++){\n\t\tif(i%2 ==0){\n\t\t\txarr.push(coords[i]);\n\t\t}else{\n\t\t\tyarr.push(coords[i]);\n\t\t}\n\t}\n\tvar A = 0;\n\tvar cx = 0;\n\tvar cy = 0;\n\tvar n = xarr.length;\n\tfor(var i = 0; i < n-1; i++){\n\t\tvar Aitem = xarr[i]*yarr[i+1] - xarr[i+1]*yarr[i]\n\t\tA = A + Aitem;\n\t\tvar cxItem = (xarr[i]+xarr[i+1])*(xarr[i]*yarr[i+1]-xarr[i+1]*yarr[i])\n\t\tcx = cx + cxItem;\n\t\tvar cyItem = (yarr[i]+yarr[i+1])*(xarr[i]*yarr[i+1]-xarr[i+1]*yarr[i])\n\t\tcy = cy + cyItem;\n\t}\n\tA = A/2;\n\tcx = cx/(6*A);\n\tcy = cy/(6*A);\n\n\tvar retarr = new Array();\n\tretarr.push(cx);\n\tretarr.push(cy);\n\treturn retarr;\n}\n```\n\n参考文章[https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon)\n","source":"_posts/javascript-Centroid_of_polygon.md","raw":"---\ntitle: 多边形的质心\ndate: 2016-12-23 11:04:02\ntags: arithmetic\ncategories: javascript\n---\n\n\n这个公式可以计算出，一个非自相交多变行的质点，设定多边形有n个顶点，(x0,y0), (x1,y1), ..., (xn−1,yn−1)\n\n![polygonCentroid](https://yapengwen.github.io/img/polygonCentroid.png)\n\n多边形的面积\n\n![polygonCentroid](https://yapengwen.github.io/img/polygonarea.png)\n\n(Cx, Cy)就是多边形的质心他永远落在多边形内\n\n```javascript\n//根据围栏信息计算质点\nfunction CentroidOfPolygon(coords){\n//\tvar coords = [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93]\n\tvar xarr = new Array();\n\tvar yarr = new Array();\n\tfor(var i = 0; i < coords.length; i++){\n\t\tif(i%2 ==0){\n\t\t\txarr.push(coords[i]);\n\t\t}else{\n\t\t\tyarr.push(coords[i]);\n\t\t}\n\t}\n\tvar A = 0;\n\tvar cx = 0;\n\tvar cy = 0;\n\tvar n = xarr.length;\n\tfor(var i = 0; i < n-1; i++){\n\t\tvar Aitem = xarr[i]*yarr[i+1] - xarr[i+1]*yarr[i]\n\t\tA = A + Aitem;\n\t\tvar cxItem = (xarr[i]+xarr[i+1])*(xarr[i]*yarr[i+1]-xarr[i+1]*yarr[i])\n\t\tcx = cx + cxItem;\n\t\tvar cyItem = (yarr[i]+yarr[i+1])*(xarr[i]*yarr[i+1]-xarr[i+1]*yarr[i])\n\t\tcy = cy + cyItem;\n\t}\n\tA = A/2;\n\tcx = cx/(6*A);\n\tcy = cy/(6*A);\n\n\tvar retarr = new Array();\n\tretarr.push(cx);\n\tretarr.push(cy);\n\treturn retarr;\n}\n```\n\n参考文章[https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon)\n","slug":"javascript-Centroid_of_polygon","published":1,"updated":"2018-10-17T05:48:51.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr430018k4nzooyrdomg","content":"<p>这个公式可以计算出，一个非自相交多变行的质点，设定多边形有n个顶点，(x0,y0), (x1,y1), …, (xn−1,yn−1)</p>\n<p><img src=\"https://yapengwen.github.io/img/polygonCentroid.png\" alt=\"polygonCentroid\"></p>\n<p>多边形的面积</p>\n<p><img src=\"https://yapengwen.github.io/img/polygonarea.png\" alt=\"polygonCentroid\"></p>\n<p>(Cx, Cy)就是多边形的质心他永远落在多边形内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据围栏信息计算质点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CentroidOfPolygon</span>(<span class=\"params\">coords</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tvar coords = [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93]</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; coords.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\txarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tyarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> A = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n = xarr.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> Aitem = xarr[i]*yarr[i+<span class=\"number\">1</span>] - xarr[i+<span class=\"number\">1</span>]*yarr[i]</span><br><span class=\"line\">\t\tA = A + Aitem;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cxItem = (xarr[i]+xarr[i+<span class=\"number\">1</span>])*(xarr[i]*yarr[i+<span class=\"number\">1</span>]-xarr[i+<span class=\"number\">1</span>]*yarr[i])</span><br><span class=\"line\">\t\tcx = cx + cxItem;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cyItem = (yarr[i]+yarr[i+<span class=\"number\">1</span>])*(xarr[i]*yarr[i+<span class=\"number\">1</span>]-xarr[i+<span class=\"number\">1</span>]*yarr[i])</span><br><span class=\"line\">\t\tcy = cy + cyItem;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tA = A/<span class=\"number\">2</span>;</span><br><span class=\"line\">\tcx = cx/(<span class=\"number\">6</span>*A);</span><br><span class=\"line\">\tcy = cy/(<span class=\"number\">6</span>*A);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> retarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\tretarr.push(cx);</span><br><span class=\"line\">\tretarr.push(cy);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retarr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章<a href=\"https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个公式可以计算出，一个非自相交多变行的质点，设定多边形有n个顶点，(x0,y0), (x1,y1), …, (xn−1,yn−1)</p>\n<p><img src=\"https://yapengwen.github.io/img/polygonCentroid.png\" alt=\"polygonCentroid\"></p>\n<p>多边形的面积</p>\n<p><img src=\"https://yapengwen.github.io/img/polygonarea.png\" alt=\"polygonCentroid\"></p>\n<p>(Cx, Cy)就是多边形的质心他永远落在多边形内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据围栏信息计算质点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CentroidOfPolygon</span>(<span class=\"params\">coords</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tvar coords = [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93]</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; coords.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\txarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tyarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> A = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n = xarr.length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> Aitem = xarr[i]*yarr[i+<span class=\"number\">1</span>] - xarr[i+<span class=\"number\">1</span>]*yarr[i]</span><br><span class=\"line\">\t\tA = A + Aitem;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cxItem = (xarr[i]+xarr[i+<span class=\"number\">1</span>])*(xarr[i]*yarr[i+<span class=\"number\">1</span>]-xarr[i+<span class=\"number\">1</span>]*yarr[i])</span><br><span class=\"line\">\t\tcx = cx + cxItem;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> cyItem = (yarr[i]+yarr[i+<span class=\"number\">1</span>])*(xarr[i]*yarr[i+<span class=\"number\">1</span>]-xarr[i+<span class=\"number\">1</span>]*yarr[i])</span><br><span class=\"line\">\t\tcy = cy + cyItem;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tA = A/<span class=\"number\">2</span>;</span><br><span class=\"line\">\tcx = cx/(<span class=\"number\">6</span>*A);</span><br><span class=\"line\">\tcy = cy/(<span class=\"number\">6</span>*A);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> retarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\tretarr.push(cx);</span><br><span class=\"line\">\tretarr.push(cy);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retarr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考文章<a href=\"https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon</a></p>\n"},{"_content":"\n设计模式遵循的原则有6个：\n1、开闭原则（Open Close Principle）\n\n　　对扩展开放，对修改关闭。\n\n2、里氏代换原则（Liskov Substitution Principle）\n\n　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。\n\n3、依赖倒转原则（Dependence Inversion Principle）\n\n　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。\n\n4、接口隔离原则（Interface Segregation Principle）\n\n　　使用多个隔离的借口来降低耦合度。\n\n5、迪米特法则（最少知道原则）（Demeter Principle）\n\n　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n6、合成复用原则（Composite Reuse Principle）\n\n　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。\n","source":"_posts/java设计模式.md","raw":"\n设计模式遵循的原则有6个：\n1、开闭原则（Open Close Principle）\n\n　　对扩展开放，对修改关闭。\n\n2、里氏代换原则（Liskov Substitution Principle）\n\n　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。\n\n3、依赖倒转原则（Dependence Inversion Principle）\n\n　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。\n\n4、接口隔离原则（Interface Segregation Principle）\n\n　　使用多个隔离的借口来降低耦合度。\n\n5、迪米特法则（最少知道原则）（Demeter Principle）\n\n　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n6、合成复用原则（Composite Reuse Principle）\n\n　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。\n","slug":"java设计模式","published":1,"date":"2018-10-17T06:45:57.678Z","updated":"2018-10-17T05:48:51.148Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr46001dk4nz2ugghq6k","content":"<p>设计模式遵循的原则有6个：<br>1、开闭原则（Open Close Principle）</p>\n<p>　　对扩展开放，对修改关闭。</p>\n<p>2、里氏代换原则（Liskov Substitution Principle）</p>\n<p>　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>3、依赖倒转原则（Dependence Inversion Principle）</p>\n<p>　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</p>\n<p>4、接口隔离原则（Interface Segregation Principle）</p>\n<p>　　使用多个隔离的借口来降低耦合度。</p>\n<p>5、迪米特法则（最少知道原则）（Demeter Principle）</p>\n<p>　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p>6、合成复用原则（Composite Reuse Principle）</p>\n<p>　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>设计模式遵循的原则有6个：<br>1、开闭原则（Open Close Principle）</p>\n<p>　　对扩展开放，对修改关闭。</p>\n<p>2、里氏代换原则（Liskov Substitution Principle）</p>\n<p>　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>3、依赖倒转原则（Dependence Inversion Principle）</p>\n<p>　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</p>\n<p>4、接口隔离原则（Interface Segregation Principle）</p>\n<p>　　使用多个隔离的借口来降低耦合度。</p>\n<p>5、迪米特法则（最少知道原则）（Demeter Principle）</p>\n<p>　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p>6、合成复用原则（Composite Reuse Principle）</p>\n<p>　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</p>\n"},{"title":"计算多边形不超出矩形范围的最大缩放比例","date":"2016-12-29T01:16:29.000Z","_content":"\n计算方法\n1. 获取矩形的width,height也就是x,y\n2. 循环多边形的每个坐标点，取到最大的xmax,ymax\n3. 计算scalex的缩放比例=xmax/x;计算scaley的缩放比例=ymax/y\n4. 最大缩放比例就是scalex和scaley中最小的比例\n\n__js代码__\n\n```javascript\n//根据围栏信息计算围栏的最大X和最大Y根据矩形大小计算缩放比例\nfunction PolygonMaxXY(coords){\n\tvar xarr = new Array();\n\tvar yarr = new Array();\n\tfor(var i = 0; i < coords.length; i++){\n\t\tif(i%2 ==0){\n\t\t\txarr.push(coords[i]);\n\t\t}else{\n\t\t\tyarr.push(coords[i]);\n\t\t}\n\t}\n\tvar maxx = 0;\n\tvar maxy = 0;\n\tfor(key in xarr){\n\t\tif(xarr[key]>maxx){\n\t\t\tmaxx = xarr[key];\n\t\t}\n\t}\n\tfor(key in yarr){\n\t\tif(yarr[key]>maxy){\n\t\t\tmaxy = yarr[key];\n\t\t}\n\t}\n\tvar width = $(\"#container\").width();\n\tvar height = $(\"#container\").height();\n\tvar stant = 0\n\tvar stantx = width/maxx;\n\tvar stanty = height/maxy;\n\tif(stantx<stanty){\n\t\tstant = stantx;\n\t}else{\n\t\tstant = stanty;\n\t}\n\t$(\"#mapscalestand\").val(stant);\n\t$(\"#mapscale\").val(stant);\n}\n```\n按照计算比例放大缩小还原多边形\n---\n\n放大  \n```javascript\nfunction bebig(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale=parseFloat($(\"#mapscale\").val());\n\tif(scale==(mapscalestand*2)){\n\t\treturn;\n\t}else{\n\t\tscale=scale+(mapscalestand/10);\n\t}\n\tif(scale>(mapscalestand*2)){\n\t\tscale=mapscalestand*2;\n\t}\n\t$(\"#mapscale\").val(scale);\n\t$(\"#container\").html(\"\");\n\n\txianshi();\n\n}\n\n```\n\n 缩小\n```javascript\nfunction besmall(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale= parseFloat($(\"#mapscale\").val());\n\tif(scale==(mapscalestand/2)){\n\t\treturn;\n\t}else{\n\t\tscale=scale-(mapscalestand/10);\n\t}\n\tif(scale<(mapscalestand/2)){\n\t\tscale=mapscalestand/2;\n\t}\n\t$(\"#mapscale\").val(scale);\n\t$(\"#container\").html(\"\");\n\txianshi();\n}\n```\n还原\n```javascript\nfunction reload(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\t$(\"#mapscale\").val(mapscalestand);\n\t$(\"#container\").html(\"\");\n\txianshi();\n}\n```\n滚动\n```javascript\nfunction wheelload(num){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale = parseFloat($(\"#mapscale\").val());\n\tif(num>0){\n\t\tif(scale==(mapscalestand*2)){\n\t\t\treturn;\n\t\t}else{\n\t\t\tscale=scale+(mapscalestand/10);\n\t\t}\n\t\tif(scale>(mapscalestand*2)){\n\t\t\tscale=mapscalestand*2;\n\t\t}\n\t\t$(\"#mapscale\").val(scale);\n\t\t$(\"#container\").html(\"\");\n\n\t\txianshi();\n\t}else{\n\t\tif(scale==(mapscalestand/2)){\n\t\t\treturn;\n\t\t}else{\n\t\t\tscale=scale-(mapscalestand/10);\n\t\t}\n\t\tif(scale<(mapscalestand/2)){\n\t\t\tscale=mapscalestand/2;\n\t\t}\n\t\t$(\"#mapscale\").val(scale);\n\t\t$(\"#container\").html(\"\");\n\t\txianshi();\n\t}\n}\n```\n","source":"_posts/javascript-PolygonMaxXY.md","raw":"---\ntitle: 计算多边形不超出矩形范围的最大缩放比例\ndate: 2016-12-29 09:16:29\ntags: arithmetic\ncategories: javascript\n---\n\n计算方法\n1. 获取矩形的width,height也就是x,y\n2. 循环多边形的每个坐标点，取到最大的xmax,ymax\n3. 计算scalex的缩放比例=xmax/x;计算scaley的缩放比例=ymax/y\n4. 最大缩放比例就是scalex和scaley中最小的比例\n\n__js代码__\n\n```javascript\n//根据围栏信息计算围栏的最大X和最大Y根据矩形大小计算缩放比例\nfunction PolygonMaxXY(coords){\n\tvar xarr = new Array();\n\tvar yarr = new Array();\n\tfor(var i = 0; i < coords.length; i++){\n\t\tif(i%2 ==0){\n\t\t\txarr.push(coords[i]);\n\t\t}else{\n\t\t\tyarr.push(coords[i]);\n\t\t}\n\t}\n\tvar maxx = 0;\n\tvar maxy = 0;\n\tfor(key in xarr){\n\t\tif(xarr[key]>maxx){\n\t\t\tmaxx = xarr[key];\n\t\t}\n\t}\n\tfor(key in yarr){\n\t\tif(yarr[key]>maxy){\n\t\t\tmaxy = yarr[key];\n\t\t}\n\t}\n\tvar width = $(\"#container\").width();\n\tvar height = $(\"#container\").height();\n\tvar stant = 0\n\tvar stantx = width/maxx;\n\tvar stanty = height/maxy;\n\tif(stantx<stanty){\n\t\tstant = stantx;\n\t}else{\n\t\tstant = stanty;\n\t}\n\t$(\"#mapscalestand\").val(stant);\n\t$(\"#mapscale\").val(stant);\n}\n```\n按照计算比例放大缩小还原多边形\n---\n\n放大  \n```javascript\nfunction bebig(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale=parseFloat($(\"#mapscale\").val());\n\tif(scale==(mapscalestand*2)){\n\t\treturn;\n\t}else{\n\t\tscale=scale+(mapscalestand/10);\n\t}\n\tif(scale>(mapscalestand*2)){\n\t\tscale=mapscalestand*2;\n\t}\n\t$(\"#mapscale\").val(scale);\n\t$(\"#container\").html(\"\");\n\n\txianshi();\n\n}\n\n```\n\n 缩小\n```javascript\nfunction besmall(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale= parseFloat($(\"#mapscale\").val());\n\tif(scale==(mapscalestand/2)){\n\t\treturn;\n\t}else{\n\t\tscale=scale-(mapscalestand/10);\n\t}\n\tif(scale<(mapscalestand/2)){\n\t\tscale=mapscalestand/2;\n\t}\n\t$(\"#mapscale\").val(scale);\n\t$(\"#container\").html(\"\");\n\txianshi();\n}\n```\n还原\n```javascript\nfunction reload(){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\t$(\"#mapscale\").val(mapscalestand);\n\t$(\"#container\").html(\"\");\n\txianshi();\n}\n```\n滚动\n```javascript\nfunction wheelload(num){\n\tvar mapscalestand = parseFloat($(\"#mapscalestand\").val());\n\tvar scale = parseFloat($(\"#mapscale\").val());\n\tif(num>0){\n\t\tif(scale==(mapscalestand*2)){\n\t\t\treturn;\n\t\t}else{\n\t\t\tscale=scale+(mapscalestand/10);\n\t\t}\n\t\tif(scale>(mapscalestand*2)){\n\t\t\tscale=mapscalestand*2;\n\t\t}\n\t\t$(\"#mapscale\").val(scale);\n\t\t$(\"#container\").html(\"\");\n\n\t\txianshi();\n\t}else{\n\t\tif(scale==(mapscalestand/2)){\n\t\t\treturn;\n\t\t}else{\n\t\t\tscale=scale-(mapscalestand/10);\n\t\t}\n\t\tif(scale<(mapscalestand/2)){\n\t\t\tscale=mapscalestand/2;\n\t\t}\n\t\t$(\"#mapscale\").val(scale);\n\t\t$(\"#container\").html(\"\");\n\t\txianshi();\n\t}\n}\n```\n","slug":"javascript-PolygonMaxXY","published":1,"updated":"2018-10-17T05:48:51.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr49001gk4nzmi5vgfm1","content":"<p>计算方法</p>\n<ol>\n<li>获取矩形的width,height也就是x,y</li>\n<li>循环多边形的每个坐标点，取到最大的xmax,ymax</li>\n<li>计算scalex的缩放比例=xmax/x;计算scaley的缩放比例=ymax/y</li>\n<li>最大缩放比例就是scalex和scaley中最小的比例</li>\n</ol>\n<p><strong>js代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据围栏信息计算围栏的最大X和最大Y根据矩形大小计算缩放比例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PolygonMaxXY</span>(<span class=\"params\">coords</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; coords.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\txarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tyarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> xarr)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xarr[key]&gt;maxx)&#123;</span><br><span class=\"line\">\t\t\tmaxx = xarr[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> yarr)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(yarr[key]&gt;maxy)&#123;</span><br><span class=\"line\">\t\t\tmaxy = yarr[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> width = $(<span class=\"string\">\"#container\"</span>).width();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> height = $(<span class=\"string\">\"#container\"</span>).height();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stant = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stantx = width/maxx;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stanty = height/maxy;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(stantx&lt;stanty)&#123;</span><br><span class=\"line\">\t\tstant = stantx;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tstant = stanty;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscalestand\"</span>).val(stant);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(stant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按照计算比例放大缩小还原多边形\"><a href=\"#按照计算比例放大缩小还原多边形\" class=\"headerlink\" title=\"按照计算比例放大缩小还原多边形\"></a>按照计算比例放大缩小还原多边形</h2><p>放大<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bebig</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale=<span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale==(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscale=scale+(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale&gt;(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\tscale=mapscalestand*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 缩小<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">besmall</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale= <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale==(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscale=scale-(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale&lt;(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\tscale=mapscalestand/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还原<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reload</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(mapscalestand);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>滚动<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wheelload</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale==(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tscale=scale+(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale&gt;(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\tscale=mapscalestand*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\txianshi();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale==(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tscale=scale-(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale&lt;(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\tscale=mapscalestand/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\txianshi();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>计算方法</p>\n<ol>\n<li>获取矩形的width,height也就是x,y</li>\n<li>循环多边形的每个坐标点，取到最大的xmax,ymax</li>\n<li>计算scalex的缩放比例=xmax/x;计算scaley的缩放比例=ymax/y</li>\n<li>最大缩放比例就是scalex和scaley中最小的比例</li>\n</ol>\n<p><strong>js代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据围栏信息计算围栏的最大X和最大Y根据矩形大小计算缩放比例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PolygonMaxXY</span>(<span class=\"params\">coords</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> yarr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; coords.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\txarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tyarr.push(coords[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> maxy = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> xarr)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xarr[key]&gt;maxx)&#123;</span><br><span class=\"line\">\t\t\tmaxx = xarr[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> yarr)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(yarr[key]&gt;maxy)&#123;</span><br><span class=\"line\">\t\t\tmaxy = yarr[key];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> width = $(<span class=\"string\">\"#container\"</span>).width();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> height = $(<span class=\"string\">\"#container\"</span>).height();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stant = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stantx = width/maxx;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stanty = height/maxy;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(stantx&lt;stanty)&#123;</span><br><span class=\"line\">\t\tstant = stantx;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tstant = stanty;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscalestand\"</span>).val(stant);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(stant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按照计算比例放大缩小还原多边形\"><a href=\"#按照计算比例放大缩小还原多边形\" class=\"headerlink\" title=\"按照计算比例放大缩小还原多边形\"></a>按照计算比例放大缩小还原多边形</h2><p>放大<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bebig</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale=<span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale==(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscale=scale+(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale&gt;(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\tscale=mapscalestand*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 缩小<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">besmall</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale= <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale==(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscale=scale-(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(scale&lt;(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\tscale=mapscalestand/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还原<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reload</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t$(<span class=\"string\">\"#mapscale\"</span>).val(mapscalestand);</span><br><span class=\"line\">\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\txianshi();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>滚动<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wheelload</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapscalestand = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscalestand\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scale = <span class=\"built_in\">parseFloat</span>($(<span class=\"string\">\"#mapscale\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale==(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tscale=scale+(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale&gt;(mapscalestand*<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\tscale=mapscalestand*<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\txianshi();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale==(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tscale=scale-(mapscalestand/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(scale&lt;(mapscalestand/<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">\t\t\tscale=mapscalestand/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#mapscale\"</span>).val(scale);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#container\"</span>).html(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\txianshi();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"jprofiler_监控远程linux服务器的JVM进程","date":"2017-12-05T03:37:00.000Z","_content":"\n### jprofiler_监控远程linux服务器的JVM进程(实践)\n几天前写了一篇文章，[jprofiler_监控远程linux服务器的tomcat进程(实践)](http://www.cnblogs.com/gossip/p/6090979.html)，介绍了使用jprofiler怎样监控远程linux的tomcat进程，这两天想了想，除了可以监控tomcat进程，是不是也可以监控其它的Java进程，可是找了一圈都是监控tomcat，于是就打算亲手实验一下本文打算把一个简单的java程序打包成jar包，并部署到linux服务器运行，然后使用jprofiler监控该jar包java程序可参考文章：[Java部署_IntelliJ创建一个可运行的jar包（实践）](http://www.cnblogs.com/gossip/p/6093705.html)</div><div>\n**操作步骤如下：**  \n1、将jar包拷贝到linux并运行  \n![](https://yapengwen.github.io/img/35158-20161123152222393-97209354.png)  \n2、使用jprofiler的``jpenable``工具对jar包进行监控（需要先在linux安装解压jprofiler）  \njpenable目录：/usr/local/jprofiler9/bin  \n最后输出：You can now use the JProfiler...代表运行成功![](https://yapengwen.github.io/img/35158-20161123152222784-1667486593.png)  \n3、JProfiler启动远程监控  \nSession-->NewSession![](https://yapengwen.github.io/img/35158-20161123152223300-1537569135.png)  \n监控到对象![](https://yapengwen.github.io/img/35158-20161123152223893-970376784.png)\n","source":"_posts/jprofiler_remote_linux.md","raw":"---\ntitle: jprofiler_监控远程linux服务器的JVM进程\ndate: 2017-12-05 11:37:00\ntags: [jprofiler,linux]\ncategories: java\n---\n\n### jprofiler_监控远程linux服务器的JVM进程(实践)\n几天前写了一篇文章，[jprofiler_监控远程linux服务器的tomcat进程(实践)](http://www.cnblogs.com/gossip/p/6090979.html)，介绍了使用jprofiler怎样监控远程linux的tomcat进程，这两天想了想，除了可以监控tomcat进程，是不是也可以监控其它的Java进程，可是找了一圈都是监控tomcat，于是就打算亲手实验一下本文打算把一个简单的java程序打包成jar包，并部署到linux服务器运行，然后使用jprofiler监控该jar包java程序可参考文章：[Java部署_IntelliJ创建一个可运行的jar包（实践）](http://www.cnblogs.com/gossip/p/6093705.html)</div><div>\n**操作步骤如下：**  \n1、将jar包拷贝到linux并运行  \n![](https://yapengwen.github.io/img/35158-20161123152222393-97209354.png)  \n2、使用jprofiler的``jpenable``工具对jar包进行监控（需要先在linux安装解压jprofiler）  \njpenable目录：/usr/local/jprofiler9/bin  \n最后输出：You can now use the JProfiler...代表运行成功![](https://yapengwen.github.io/img/35158-20161123152222784-1667486593.png)  \n3、JProfiler启动远程监控  \nSession-->NewSession![](https://yapengwen.github.io/img/35158-20161123152223300-1537569135.png)  \n监控到对象![](https://yapengwen.github.io/img/35158-20161123152223893-970376784.png)\n","slug":"jprofiler_remote_linux","published":1,"updated":"2018-10-17T06:06:24.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4b001jk4nzppzihpgv","content":"<h3 id=\"jprofiler-监控远程linux服务器的JVM进程-实践\"><a href=\"#jprofiler-监控远程linux服务器的JVM进程-实践\" class=\"headerlink\" title=\"jprofiler_监控远程linux服务器的JVM进程(实践)\"></a>jprofiler_监控远程linux服务器的JVM进程(实践)</h3><p>几天前写了一篇文章，<a href=\"http://www.cnblogs.com/gossip/p/6090979.html\" target=\"_blank\" rel=\"noopener\">jprofiler_监控远程linux服务器的tomcat进程(实践)</a>，介绍了使用jprofiler怎样监控远程linux的tomcat进程，这两天想了想，除了可以监控tomcat进程，是不是也可以监控其它的Java进程，可是找了一圈都是监控tomcat，于是就打算亲手实验一下本文打算把一个简单的java程序打包成jar包，并部署到linux服务器运行，然后使用jprofiler监控该jar包java程序可参考文章：<a href=\"http://www.cnblogs.com/gossip/p/6093705.html\" target=\"_blank\" rel=\"noopener\">Java部署_IntelliJ创建一个可运行的jar包（实践）</a><div><br><strong>操作步骤如下：</strong><br>1、将jar包拷贝到linux并运行<br><img src=\"https://yapengwen.github.io/img/35158-20161123152222393-97209354.png\" alt=\"\"><br>2、使用jprofiler的<code>jpenable</code>工具对jar包进行监控（需要先在linux安装解压jprofiler）<br>jpenable目录：/usr/local/jprofiler9/bin<br>最后输出：You can now use the JProfiler…代表运行成功<img src=\"https://yapengwen.github.io/img/35158-20161123152222784-1667486593.png\" alt=\"\"><br>3、JProfiler启动远程监控<br>Session–&gt;NewSession<img src=\"https://yapengwen.github.io/img/35158-20161123152223300-1537569135.png\" alt=\"\"><br>监控到对象<img src=\"https://yapengwen.github.io/img/35158-20161123152223893-970376784.png\" alt=\"\"></div></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"jprofiler-监控远程linux服务器的JVM进程-实践\"><a href=\"#jprofiler-监控远程linux服务器的JVM进程-实践\" class=\"headerlink\" title=\"jprofiler_监控远程linux服务器的JVM进程(实践)\"></a>jprofiler_监控远程linux服务器的JVM进程(实践)</h3><p>几天前写了一篇文章，<a href=\"http://www.cnblogs.com/gossip/p/6090979.html\" target=\"_blank\" rel=\"noopener\">jprofiler_监控远程linux服务器的tomcat进程(实践)</a>，介绍了使用jprofiler怎样监控远程linux的tomcat进程，这两天想了想，除了可以监控tomcat进程，是不是也可以监控其它的Java进程，可是找了一圈都是监控tomcat，于是就打算亲手实验一下本文打算把一个简单的java程序打包成jar包，并部署到linux服务器运行，然后使用jprofiler监控该jar包java程序可参考文章：<a href=\"http://www.cnblogs.com/gossip/p/6093705.html\" target=\"_blank\" rel=\"noopener\">Java部署_IntelliJ创建一个可运行的jar包（实践）</a><div><br><strong>操作步骤如下：</strong><br>1、将jar包拷贝到linux并运行<br><img src=\"https://yapengwen.github.io/img/35158-20161123152222393-97209354.png\" alt=\"\"><br>2、使用jprofiler的<code>jpenable</code>工具对jar包进行监控（需要先在linux安装解压jprofiler）<br>jpenable目录：/usr/local/jprofiler9/bin<br>最后输出：You can now use the JProfiler…代表运行成功<img src=\"https://yapengwen.github.io/img/35158-20161123152222784-1667486593.png\" alt=\"\"><br>3、JProfiler启动远程监控<br>Session–&gt;NewSession<img src=\"https://yapengwen.github.io/img/35158-20161123152223300-1537569135.png\" alt=\"\"><br>监控到对象<img src=\"https://yapengwen.github.io/img/35158-20161123152223893-970376784.png\" alt=\"\"></div></p>\n"},{"title":"GibiHub+hexo搭建博客","date":"2016-12-19T09:19:48.000Z","_content":"\n需要的工具：\n\n-  github\n-  node.js\n-  hexo\n\n按一下步骤完成搭建\n1.  Create a new repository具体方法[github](https://pages.github.com/)官方GitHub Pages方法\n2.  下载hexo具体看[hexo](https://hexo.io)官方\n3.  用[markdown](http://www.kancloud.cn/wizardforcel/markdown-simple-world/97380)写博客","source":"_posts/git-new-article.md","raw":"---\ntitle: GibiHub+hexo搭建博客\ndate: 2016-12-19 17:19:48\ntags: hexo\ncategories: git\n---\n\n需要的工具：\n\n-  github\n-  node.js\n-  hexo\n\n按一下步骤完成搭建\n1.  Create a new repository具体方法[github](https://pages.github.com/)官方GitHub Pages方法\n2.  下载hexo具体看[hexo](https://hexo.io)官方\n3.  用[markdown](http://www.kancloud.cn/wizardforcel/markdown-simple-world/97380)写博客","slug":"git-new-article","published":1,"updated":"2018-10-17T05:48:51.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4e001ok4nzc6qsodjw","content":"<p>需要的工具：</p>\n<ul>\n<li>github</li>\n<li>node.js</li>\n<li>hexo</li>\n</ul>\n<p>按一下步骤完成搭建</p>\n<ol>\n<li>Create a new repository具体方法<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github</a>官方GitHub Pages方法</li>\n<li>下载hexo具体看<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>官方</li>\n<li>用<a href=\"http://www.kancloud.cn/wizardforcel/markdown-simple-world/97380\" target=\"_blank\" rel=\"noopener\">markdown</a>写博客</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>需要的工具：</p>\n<ul>\n<li>github</li>\n<li>node.js</li>\n<li>hexo</li>\n</ul>\n<p>按一下步骤完成搭建</p>\n<ol>\n<li>Create a new repository具体方法<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github</a>官方GitHub Pages方法</li>\n<li>下载hexo具体看<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo</a>官方</li>\n<li>用<a href=\"http://www.kancloud.cn/wizardforcel/markdown-simple-world/97380\" target=\"_blank\" rel=\"noopener\">markdown</a>写博客</li>\n</ol>\n"},{"title":"生成16位数字订单号","date":"2016-12-30T02:16:07.000Z","_content":"\n\nUUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。\n\n```java\npublic static String getOrderIdByUUId() {\n         int hashCodeV = UUID.randomUUID().toString().hashCode();  \n         if(hashCodeV < 0) {//有可能是负数  \n             hashCodeV = - hashCodeV;  \n         }   \n         return String.format(\"%016d\", hashCodeV);  \n     }\n```\n该方法出自一下三种方法的第三种方案\n\n\n\n__前提背景__  \n相信做过银联支付的都知道，银联的订单号要求商户提供一个不重复的16位数字订单号（不重复指的是对商户本身，不用考虑银联有多个商户会与其他商户的订单号重复）。16位数其实很短，要考虑每秒并发1w或者10w或100万时，重复订单号将数不过来。\n\n需要考虑的因素：  \n 若使用数据库保存流水号，集群部署时，同步关键字不再有效。当然同步对性能也有非常大的影响；  \n 若使用时间，必须要精确到毫秒、微妙级别，长度就不止16位了。  \n 若使用数据库字段自增，数据库并发时硬件将吃不消。  \n 获取订单号时检查表的最大值，这种方案是最不可取的。  \n\n以下将给出本人经过深入研究的三种方案，按顺序，最优的方案为第三个。  \n备注：  \n如果要测试产生重复订单号的情况，可以建立一个表，把订单号字段设置为唯一性，然后开启1000或10000或更多的线程去请求方法，每个线程循环5次或10次来请求，在方法里面写插入语句。或者可以使用Apache的ab工具并发测试。\n使用方法：ab -n5000 -c5000 http://192.168.1.102:8888/kjcx/aaa.action\n\n__1. 可选方案一__  \n本方案使用的是当前时间，包括毫秒数、纳秒数，不需要数据库参与计算，性能不用说。\n算法：  \n```java\n OrderId=  \nmachineId+  \n (System.currentTimeMillis()+\"\").substring(1)+  \n(System.nanoTime()+\"\").substring(7,10);  \n```\n\n讲解：  \n参数machineId：是集群时的机器代码，可以1-9任意。部署时，分别为部署的项目手动修改该值，以确保集群的多台机器在系统时间上不一致的问题（毫无疑问每台机器的毫秒数基本上不一致）。  \n参数System.currentTimeMillis():这是java里面的获取1970年到目前的毫秒数,是一个13位数的数字，与Date.getTime()函数的结果一样，比如1378049585093。经过研究，在2013年，前三位是137，在2023年是168，到2033年才199.所以，我决定第一位数字1可以去掉，不要占位置了。可以肯定绝大多数系统用不了10年20年。这样，参数2就变成了12位数的数字，加上参数1machineId才13位数。\n参数System.nanoTime()：这是java里面的取纳秒数，经过深入研究，在同一毫秒内，位置7,8,9这三个数字是会变化的。所以决定截取这三个数字出来拼接成一个16位数的订单号。  \n总结：理论上此方案在同一秒内，可以应对1000*1000个订单号，但是经过测试，在每秒并发2000的时候，还是会出现2-10个重复。\n\n__2. 可选方案二__  \n本方案使用的是获得会话ID（sessionId）来产生hashCode。  \n算法：  \n```java\n OrderId=  \n machineId+  \n session().getId().hashCode();\n```\n讲解：  \n参数machineId不再讲解，与方案一致。  \n参数2 session().getId().hashCode()是值在web系统中获取用户浏览器与web容器的唯一会话编号，再把该会话ID转换为该字符串的hashCode值，如1939354961。该值可能是一个11位数的或10位数的，或者在前面还会出现-号，也就是有可能该值是负数，没关系，取正。然后再对该值进行左补0到15位数，基本上可以应对位数不一致的问题。  \n我们知道，hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。可以想象，hashCode的值如果出现重复，那就是一个值了，而不是不同的值。又因为sessionId是客户端、与浏览器有关联的，所以基本上不会出现重复，但是如果用户在同一个会话有效期内、同一个版本的浏览器，生成2次就无效了，因为会话ID是一致的。\n总结：该算法，可以确保不重复的概率很小，但是需要自己特殊处理同会话同浏览器生成1次以上订单号的问题，此算法没有经过调试，略过，您请看方案三。  \n\n__3. 可选方案三__  \n本方案在基于方案二的基础上做了修改，使用的使用UUID而不是会话id。  \nUUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。  \n算法：  \n```java\n OrderId=  \n machineId+  \n UUID.randomUUID().toString().hashCode();  \n```\n\n讲解：  \n参数1不再解释。  \n参数2是值生成UUID然后取它的hashCode值，经过测试，完全没有一点问题。您可以开1000w的并发去测试插入吧，只要数据库不会报唯一性错误，那就没问题。  \n总结：  \nhashCode这个算法从搞软件开始到现在这么多年，一直没派上用场，这次大大的用上了。解决了问题。请同志们以后善用这个东西。  \n\n __. 附录：方案三的算法代码__  \n ```java\n   public static String getOrderIdByUUId() {  \n           int machineId = 1;//最大支持1-9个集群机器部署  \n           int hashCodeV = UUID.randomUUID().toString().hashCode();  \n           if(hashCodeV < 0) {//有可能是负数  \n              hashCodeV = - hashCodeV;  \n          }  \n          // 0 代表前面补充0       \n          // 4 代表长度为4       \n          // d 代表参数为正数型  \n         return machineId+String.format(\"%015d\", hashCodeV);  \n      }  \n ```\n 方案三其实也就一个函数，很简便。\n\n参考 [http://www.cezuwang.com/listFilm?page=1&areaId=906&filmTypeId=1](http://www.cezuwang.com/listFilm?page=1&areaId=906&filmTypeId=1)\n","source":"_posts/java-createBatchId.md","raw":"---\ntitle: 生成16位数字订单号\ndate: 2016-12-30 10:16:07\ntags: UUID\ncategories: java\n---\n\n\nUUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。\n\n```java\npublic static String getOrderIdByUUId() {\n         int hashCodeV = UUID.randomUUID().toString().hashCode();  \n         if(hashCodeV < 0) {//有可能是负数  \n             hashCodeV = - hashCodeV;  \n         }   \n         return String.format(\"%016d\", hashCodeV);  \n     }\n```\n该方法出自一下三种方法的第三种方案\n\n\n\n__前提背景__  \n相信做过银联支付的都知道，银联的订单号要求商户提供一个不重复的16位数字订单号（不重复指的是对商户本身，不用考虑银联有多个商户会与其他商户的订单号重复）。16位数其实很短，要考虑每秒并发1w或者10w或100万时，重复订单号将数不过来。\n\n需要考虑的因素：  \n 若使用数据库保存流水号，集群部署时，同步关键字不再有效。当然同步对性能也有非常大的影响；  \n 若使用时间，必须要精确到毫秒、微妙级别，长度就不止16位了。  \n 若使用数据库字段自增，数据库并发时硬件将吃不消。  \n 获取订单号时检查表的最大值，这种方案是最不可取的。  \n\n以下将给出本人经过深入研究的三种方案，按顺序，最优的方案为第三个。  \n备注：  \n如果要测试产生重复订单号的情况，可以建立一个表，把订单号字段设置为唯一性，然后开启1000或10000或更多的线程去请求方法，每个线程循环5次或10次来请求，在方法里面写插入语句。或者可以使用Apache的ab工具并发测试。\n使用方法：ab -n5000 -c5000 http://192.168.1.102:8888/kjcx/aaa.action\n\n__1. 可选方案一__  \n本方案使用的是当前时间，包括毫秒数、纳秒数，不需要数据库参与计算，性能不用说。\n算法：  \n```java\n OrderId=  \nmachineId+  \n (System.currentTimeMillis()+\"\").substring(1)+  \n(System.nanoTime()+\"\").substring(7,10);  \n```\n\n讲解：  \n参数machineId：是集群时的机器代码，可以1-9任意。部署时，分别为部署的项目手动修改该值，以确保集群的多台机器在系统时间上不一致的问题（毫无疑问每台机器的毫秒数基本上不一致）。  \n参数System.currentTimeMillis():这是java里面的获取1970年到目前的毫秒数,是一个13位数的数字，与Date.getTime()函数的结果一样，比如1378049585093。经过研究，在2013年，前三位是137，在2023年是168，到2033年才199.所以，我决定第一位数字1可以去掉，不要占位置了。可以肯定绝大多数系统用不了10年20年。这样，参数2就变成了12位数的数字，加上参数1machineId才13位数。\n参数System.nanoTime()：这是java里面的取纳秒数，经过深入研究，在同一毫秒内，位置7,8,9这三个数字是会变化的。所以决定截取这三个数字出来拼接成一个16位数的订单号。  \n总结：理论上此方案在同一秒内，可以应对1000*1000个订单号，但是经过测试，在每秒并发2000的时候，还是会出现2-10个重复。\n\n__2. 可选方案二__  \n本方案使用的是获得会话ID（sessionId）来产生hashCode。  \n算法：  \n```java\n OrderId=  \n machineId+  \n session().getId().hashCode();\n```\n讲解：  \n参数machineId不再讲解，与方案一致。  \n参数2 session().getId().hashCode()是值在web系统中获取用户浏览器与web容器的唯一会话编号，再把该会话ID转换为该字符串的hashCode值，如1939354961。该值可能是一个11位数的或10位数的，或者在前面还会出现-号，也就是有可能该值是负数，没关系，取正。然后再对该值进行左补0到15位数，基本上可以应对位数不一致的问题。  \n我们知道，hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。可以想象，hashCode的值如果出现重复，那就是一个值了，而不是不同的值。又因为sessionId是客户端、与浏览器有关联的，所以基本上不会出现重复，但是如果用户在同一个会话有效期内、同一个版本的浏览器，生成2次就无效了，因为会话ID是一致的。\n总结：该算法，可以确保不重复的概率很小，但是需要自己特殊处理同会话同浏览器生成1次以上订单号的问题，此算法没有经过调试，略过，您请看方案三。  \n\n__3. 可选方案三__  \n本方案在基于方案二的基础上做了修改，使用的使用UUID而不是会话id。  \nUUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。  \n算法：  \n```java\n OrderId=  \n machineId+  \n UUID.randomUUID().toString().hashCode();  \n```\n\n讲解：  \n参数1不再解释。  \n参数2是值生成UUID然后取它的hashCode值，经过测试，完全没有一点问题。您可以开1000w的并发去测试插入吧，只要数据库不会报唯一性错误，那就没问题。  \n总结：  \nhashCode这个算法从搞软件开始到现在这么多年，一直没派上用场，这次大大的用上了。解决了问题。请同志们以后善用这个东西。  \n\n __. 附录：方案三的算法代码__  \n ```java\n   public static String getOrderIdByUUId() {  \n           int machineId = 1;//最大支持1-9个集群机器部署  \n           int hashCodeV = UUID.randomUUID().toString().hashCode();  \n           if(hashCodeV < 0) {//有可能是负数  \n              hashCodeV = - hashCodeV;  \n          }  \n          // 0 代表前面补充0       \n          // 4 代表长度为4       \n          // d 代表参数为正数型  \n         return machineId+String.format(\"%015d\", hashCodeV);  \n      }  \n ```\n 方案三其实也就一个函数，很简便。\n\n参考 [http://www.cezuwang.com/listFilm?page=1&areaId=906&filmTypeId=1](http://www.cezuwang.com/listFilm?page=1&areaId=906&filmTypeId=1)\n","slug":"java-createBatchId","published":1,"updated":"2018-10-17T05:48:51.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4h001rk4nzi9wd2ztt","content":"<p>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getOrderIdByUUId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();  </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(hashCodeV &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可能是负数  </span></span><br><span class=\"line\">             hashCodeV = - hashCodeV;  </span><br><span class=\"line\">         &#125;   </span><br><span class=\"line\">         <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%016d\"</span>, hashCodeV);  </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>该方法出自一下三种方法的第三种方案</p>\n<p><strong>前提背景</strong><br>相信做过银联支付的都知道，银联的订单号要求商户提供一个不重复的16位数字订单号（不重复指的是对商户本身，不用考虑银联有多个商户会与其他商户的订单号重复）。16位数其实很短，要考虑每秒并发1w或者10w或100万时，重复订单号将数不过来。</p>\n<p>需要考虑的因素：<br> 若使用数据库保存流水号，集群部署时，同步关键字不再有效。当然同步对性能也有非常大的影响；<br> 若使用时间，必须要精确到毫秒、微妙级别，长度就不止16位了。<br> 若使用数据库字段自增，数据库并发时硬件将吃不消。<br> 获取订单号时检查表的最大值，这种方案是最不可取的。  </p>\n<p>以下将给出本人经过深入研究的三种方案，按顺序，最优的方案为第三个。<br>备注：<br>如果要测试产生重复订单号的情况，可以建立一个表，把订单号字段设置为唯一性，然后开启1000或10000或更多的线程去请求方法，每个线程循环5次或10次来请求，在方法里面写插入语句。或者可以使用Apache的ab工具并发测试。<br>使用方法：ab -n5000 -c5000 <a href=\"http://192.168.1.102:8888/kjcx/aaa.action\" target=\"_blank\" rel=\"noopener\">http://192.168.1.102:8888/kjcx/aaa.action</a></p>\n<p><strong>1. 可选方案一</strong><br>本方案使用的是当前时间，包括毫秒数、纳秒数，不需要数据库参与计算，性能不用说。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\"> (System.currentTimeMillis()+<span class=\"string\">\"\"</span>).substring(<span class=\"number\">1</span>)+  </span><br><span class=\"line\">(System.nanoTime()+<span class=\"string\">\"\"</span>).substring(<span class=\"number\">7</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数machineId：是集群时的机器代码，可以1-9任意。部署时，分别为部署的项目手动修改该值，以确保集群的多台机器在系统时间上不一致的问题（毫无疑问每台机器的毫秒数基本上不一致）。<br>参数System.currentTimeMillis():这是java里面的获取1970年到目前的毫秒数,是一个13位数的数字，与Date.getTime()函数的结果一样，比如1378049585093。经过研究，在2013年，前三位是137，在2023年是168，到2033年才199.所以，我决定第一位数字1可以去掉，不要占位置了。可以肯定绝大多数系统用不了10年20年。这样，参数2就变成了12位数的数字，加上参数1machineId才13位数。<br>参数System.nanoTime()：这是java里面的取纳秒数，经过深入研究，在同一毫秒内，位置7,8,9这三个数字是会变化的。所以决定截取这三个数字出来拼接成一个16位数的订单号。<br>总结：理论上此方案在同一秒内，可以应对1000*1000个订单号，但是经过测试，在每秒并发2000的时候，还是会出现2-10个重复。</p>\n<p><strong>2. 可选方案二</strong><br>本方案使用的是获得会话ID（sessionId）来产生hashCode。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\">session().getId().hashCode();</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数machineId不再讲解，与方案一致。<br>参数2 session().getId().hashCode()是值在web系统中获取用户浏览器与web容器的唯一会话编号，再把该会话ID转换为该字符串的hashCode值，如1939354961。该值可能是一个11位数的或10位数的，或者在前面还会出现-号，也就是有可能该值是负数，没关系，取正。然后再对该值进行左补0到15位数，基本上可以应对位数不一致的问题。<br>我们知道，hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。可以想象，hashCode的值如果出现重复，那就是一个值了，而不是不同的值。又因为sessionId是客户端、与浏览器有关联的，所以基本上不会出现重复，但是如果用户在同一个会话有效期内、同一个版本的浏览器，生成2次就无效了，因为会话ID是一致的。<br>总结：该算法，可以确保不重复的概率很小，但是需要自己特殊处理同会话同浏览器生成1次以上订单号的问题，此算法没有经过调试，略过，您请看方案三。  </p>\n<p><strong>3. 可选方案三</strong><br>本方案在基于方案二的基础上做了修改，使用的使用UUID而不是会话id。<br>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\">UUID.randomUUID().toString().hashCode();</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数1不再解释。<br>参数2是值生成UUID然后取它的hashCode值，经过测试，完全没有一点问题。您可以开1000w的并发去测试插入吧，只要数据库不会报唯一性错误，那就没问题。<br>总结：<br>hashCode这个算法从搞软件开始到现在这么多年，一直没派上用场，这次大大的用上了。解决了问题。请同志们以后善用这个东西。  </p>\n<p> <strong>. 附录：方案三的算法代码</strong><br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getOrderIdByUUId</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> machineId = <span class=\"number\">1</span>;<span class=\"comment\">//最大支持1-9个集群机器部署  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hashCodeV &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可能是负数  </span></span><br><span class=\"line\">           hashCodeV = - hashCodeV;  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"comment\">// 0 代表前面补充0       </span></span><br><span class=\"line\">       <span class=\"comment\">// 4 代表长度为4       </span></span><br><span class=\"line\">       <span class=\"comment\">// d 代表参数为正数型  </span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> machineId+String.format(<span class=\"string\">\"%015d\"</span>, hashCodeV);  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 方案三其实也就一个函数，很简便。</p>\n<p>参考 <a href=\"http://www.cezuwang.com/listFilm?page=1&amp;areaId=906&amp;filmTypeId=1\" target=\"_blank\" rel=\"noopener\">http://www.cezuwang.com/listFilm?page=1&amp;areaId=906&amp;filmTypeId=1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getOrderIdByUUId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();  </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(hashCodeV &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可能是负数  </span></span><br><span class=\"line\">             hashCodeV = - hashCodeV;  </span><br><span class=\"line\">         &#125;   </span><br><span class=\"line\">         <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"%016d\"</span>, hashCodeV);  </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>该方法出自一下三种方法的第三种方案</p>\n<p><strong>前提背景</strong><br>相信做过银联支付的都知道，银联的订单号要求商户提供一个不重复的16位数字订单号（不重复指的是对商户本身，不用考虑银联有多个商户会与其他商户的订单号重复）。16位数其实很短，要考虑每秒并发1w或者10w或100万时，重复订单号将数不过来。</p>\n<p>需要考虑的因素：<br> 若使用数据库保存流水号，集群部署时，同步关键字不再有效。当然同步对性能也有非常大的影响；<br> 若使用时间，必须要精确到毫秒、微妙级别，长度就不止16位了。<br> 若使用数据库字段自增，数据库并发时硬件将吃不消。<br> 获取订单号时检查表的最大值，这种方案是最不可取的。  </p>\n<p>以下将给出本人经过深入研究的三种方案，按顺序，最优的方案为第三个。<br>备注：<br>如果要测试产生重复订单号的情况，可以建立一个表，把订单号字段设置为唯一性，然后开启1000或10000或更多的线程去请求方法，每个线程循环5次或10次来请求，在方法里面写插入语句。或者可以使用Apache的ab工具并发测试。<br>使用方法：ab -n5000 -c5000 <a href=\"http://192.168.1.102:8888/kjcx/aaa.action\" target=\"_blank\" rel=\"noopener\">http://192.168.1.102:8888/kjcx/aaa.action</a></p>\n<p><strong>1. 可选方案一</strong><br>本方案使用的是当前时间，包括毫秒数、纳秒数，不需要数据库参与计算，性能不用说。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\"> (System.currentTimeMillis()+<span class=\"string\">\"\"</span>).substring(<span class=\"number\">1</span>)+  </span><br><span class=\"line\">(System.nanoTime()+<span class=\"string\">\"\"</span>).substring(<span class=\"number\">7</span>,<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数machineId：是集群时的机器代码，可以1-9任意。部署时，分别为部署的项目手动修改该值，以确保集群的多台机器在系统时间上不一致的问题（毫无疑问每台机器的毫秒数基本上不一致）。<br>参数System.currentTimeMillis():这是java里面的获取1970年到目前的毫秒数,是一个13位数的数字，与Date.getTime()函数的结果一样，比如1378049585093。经过研究，在2013年，前三位是137，在2023年是168，到2033年才199.所以，我决定第一位数字1可以去掉，不要占位置了。可以肯定绝大多数系统用不了10年20年。这样，参数2就变成了12位数的数字，加上参数1machineId才13位数。<br>参数System.nanoTime()：这是java里面的取纳秒数，经过深入研究，在同一毫秒内，位置7,8,9这三个数字是会变化的。所以决定截取这三个数字出来拼接成一个16位数的订单号。<br>总结：理论上此方案在同一秒内，可以应对1000*1000个订单号，但是经过测试，在每秒并发2000的时候，还是会出现2-10个重复。</p>\n<p><strong>2. 可选方案二</strong><br>本方案使用的是获得会话ID（sessionId）来产生hashCode。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\">session().getId().hashCode();</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数machineId不再讲解，与方案一致。<br>参数2 session().getId().hashCode()是值在web系统中获取用户浏览器与web容器的唯一会话编号，再把该会话ID转换为该字符串的hashCode值，如1939354961。该值可能是一个11位数的或10位数的，或者在前面还会出现-号，也就是有可能该值是负数，没关系，取正。然后再对该值进行左补0到15位数，基本上可以应对位数不一致的问题。<br>我们知道，hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。可以想象，hashCode的值如果出现重复，那就是一个值了，而不是不同的值。又因为sessionId是客户端、与浏览器有关联的，所以基本上不会出现重复，但是如果用户在同一个会话有效期内、同一个版本的浏览器，生成2次就无效了，因为会话ID是一致的。<br>总结：该算法，可以确保不重复的概率很小，但是需要自己特殊处理同会话同浏览器生成1次以上订单号的问题，此算法没有经过调试，略过，您请看方案三。  </p>\n<p><strong>3. 可选方案三</strong><br>本方案在基于方案二的基础上做了修改，使用的使用UUID而不是会话id。<br>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，这个不重复性全世界人民都知道。当然，既然字符串值不重复，那对应的hashCode也是一样，不会重复。<br>算法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OrderId=  </span><br><span class=\"line\">machineId+  </span><br><span class=\"line\">UUID.randomUUID().toString().hashCode();</span><br></pre></td></tr></table></figure></p>\n<p>讲解：<br>参数1不再解释。<br>参数2是值生成UUID然后取它的hashCode值，经过测试，完全没有一点问题。您可以开1000w的并发去测试插入吧，只要数据库不会报唯一性错误，那就没问题。<br>总结：<br>hashCode这个算法从搞软件开始到现在这么多年，一直没派上用场，这次大大的用上了。解决了问题。请同志们以后善用这个东西。  </p>\n<p> <strong>. 附录：方案三的算法代码</strong><br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getOrderIdByUUId</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> machineId = <span class=\"number\">1</span>;<span class=\"comment\">//最大支持1-9个集群机器部署  </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> hashCodeV = UUID.randomUUID().toString().hashCode();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hashCodeV &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可能是负数  </span></span><br><span class=\"line\">           hashCodeV = - hashCodeV;  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"comment\">// 0 代表前面补充0       </span></span><br><span class=\"line\">       <span class=\"comment\">// 4 代表长度为4       </span></span><br><span class=\"line\">       <span class=\"comment\">// d 代表参数为正数型  </span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> machineId+String.format(<span class=\"string\">\"%015d\"</span>, hashCodeV);  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p> 方案三其实也就一个函数，很简便。</p>\n<p>参考 <a href=\"http://www.cezuwang.com/listFilm?page=1&amp;areaId=906&amp;filmTypeId=1\" target=\"_blank\" rel=\"noopener\">http://www.cezuwang.com/listFilm?page=1&amp;areaId=906&amp;filmTypeId=1</a></p>\n"},{"title":"Spring整合RocketMQ","date":"2017-12-15T05:00:00.000Z","_content":"##### Spring 整合 RocketMQ\n1. 引入jar包\n\n```\n<!-- RocketMQ -->\n        <dependency>  \n             <groupId>com.alibaba.rocketmq</groupId>  \n             <artifactId>rocketmq-all</artifactId>  \n             <version>3.2.6</version>  \n             <type>pom</type>  \n        </dependency>\n        <dependency>  \n             <groupId>com.alibaba.rocketmq</groupId>  \n             <artifactId>rocketmq-client</artifactId>  \n             <version>3.2.6</version>  \n        </dependency> \n```\n\n\n2.Spring bean 配置单例\n\n```\n    <bean id=\"myProducer\" class=\"cn.zno.rocketmq.MyProducer\"\n            init-method=\"init\"  \n            destroy-method=\"destroy\"\n            scope=\"singleton\">\n　　　　　　<property name=\"producerGroup\" value=\"MyProducerGroup\" />\n　　　　　　<property name=\"namesrvAddr\" value=\"127.0.0.1:9876\" />\n    </bean>\n    <bean class=\"cn.zno.rocketmq.MyConsumer\" \n            init-method=\"init\" \n            destroy-method=\"destroy\"\n            scope=\"singleton\">\n　　　　　　<property name=\"consumerGroup\" value=\"MyConsumerGroup\" />\n　　　　　　<property name=\"namesrvAddr\" value=\"127.0.0.1:9876\" />\n    </bean> \n```\n\n3. 自定义producer\n\n```\npackage cn.zno.rocketmq;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\n\npublic class MyProducer {\n\n    private final Logger logger = LoggerFactory.getLogger(MyProducer.class);\n\n    private DefaultMQProducer defaultMQProducer;\n    private String producerGroup;\n    private String namesrvAddr;\n\n    /**\n     * Spring bean init-method\n     */\n    public void init() throws MQClientException {\n        // 参数信息\n        logger.info(\"DefaultMQProducer initialize!\");\n        logger.info(producerGroup);\n        logger.info(namesrvAddr);\n\n        // 初始化\n        defaultMQProducer = new DefaultMQProducer(producerGroup);\n        defaultMQProducer.setNamesrvAddr(namesrvAddr);\n        defaultMQProducer.setInstanceName(String.valueOf(System.currentTimeMillis()));\n        \n        defaultMQProducer.start();\n\n　　　　 logger.info(\"DefaultMQProudcer start success!\");\n\n    }\n\n    /**\n     * Spring bean destroy-method\n     */\n    public void destroy() {\n        defaultMQProducer.shutdown();\n    }\n\n    public DefaultMQProducer getDefaultMQProducer() {\n        return defaultMQProducer;\n    }\n\n    // ---------------setter -----------------\n\n    public void setProducerGroup(String producerGroup) {\n        this.producerGroup = producerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n}\n```\n\n\n4. 自定义consumer\n\n```\npackage cn.zno.rocketmq;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;\nimport com.alibaba.rocketmq.common.message.MessageExt;\nimport com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class MyConsumer {\n\n    private final Logger logger = LoggerFactory.getLogger(MyConsumer.class);\n\n    private DefaultMQPushConsumer defaultMQPushConsumer;\n    private String namesrvAddr;\n    private String consumerGroup;\n\n    /**\n     * Spring bean init-method\n     */\n    public void init() throws InterruptedException, MQClientException {\n\n        // 参数信息\n        logger.info(\"DefaultMQPushConsumer initialize!\");\n        logger.info(consumerGroup);\n        logger.info(namesrvAddr);\n\n        // 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例<br>\n        // 注意：ConsumerGroupName需要由应用来保证唯一\n        defaultMQPushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        defaultMQPushConsumer.setNamesrvAddr(namesrvAddr);\n        defaultMQPushConsumer.setInstanceName(String.valueOf(System.currentTimeMillis()));\n\n        // 订阅指定MyTopic下tags等于MyTag\n\n        defaultMQPushConsumer.subscribe(\"MyTopic\", \"MyTag\");\n\n        // 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费<br>\n        // 如果非第一次启动，那么按照上次消费的位置继续消费\n        defaultMQPushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        // 设置为集群消费(区别于广播消费)\n        defaultMQPushConsumer.setMessageModel(MessageModel.CLUSTERING);\n\n        defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            // 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n\n                MessageExt msg = msgs.get(0);\n                if (msg.getTopic().equals(\"MyTopic\")) {\n                    // TODO 执行Topic的消费逻辑\n                    if (msg.getTags() != null && msg.getTags().equals(\"MyTag\")) {\n                        // TODO 执行Tag的消费\n                    }\n                }\n                // 如果没有return success ，consumer会重新消费该消息，直到return success\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        // Consumer对象在使用之前必须要调用start初始化，初始化一次即可<br>\n        defaultMQPushConsumer.start();\n\n        logger.info(\"DefaultMQPushConsumer start success!\");\n    }\n\n    /**\n     * Spring bean destroy-method\n     */\n    public void destroy() {\n        defaultMQPushConsumer.shutdown();\n    }\n\n    // ----------------- setter --------------------\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n}\n```\n\n5. 发消息\n\n```\n@Autowired\n    private MyProducer myProducer;\n\n    public void sendMessage() {\n        Message msg = new Message(\"MyTopic\", \"MyTag\", (JSONObject.fromObject(someMessage)).getBytes());\n        SendResult sendResult = null;\n        try {\n            sendResult = myProducer.getDefaultMQProducer().send(msg);\n        } catch (MQClientException e) {\n            logger.error(e.getMessage() + String.valueOf(sendResult));\n        }\n        // 当消息发送失败时如何处理\n        if (sendResult == null || sendResult.getSendStatus() != SendStatus.SEND_OK) {\n            // TODO\n        }\n    }\n```\n","source":"_posts/spring整合rocketmq.md","raw":"---\ntitle: Spring整合RocketMQ\ndate: 2017-12-15 13:00:00\ntags: RocketMQ\ncategories: MQ\n---\n##### Spring 整合 RocketMQ\n1. 引入jar包\n\n```\n<!-- RocketMQ -->\n        <dependency>  \n             <groupId>com.alibaba.rocketmq</groupId>  \n             <artifactId>rocketmq-all</artifactId>  \n             <version>3.2.6</version>  \n             <type>pom</type>  \n        </dependency>\n        <dependency>  \n             <groupId>com.alibaba.rocketmq</groupId>  \n             <artifactId>rocketmq-client</artifactId>  \n             <version>3.2.6</version>  \n        </dependency> \n```\n\n\n2.Spring bean 配置单例\n\n```\n    <bean id=\"myProducer\" class=\"cn.zno.rocketmq.MyProducer\"\n            init-method=\"init\"  \n            destroy-method=\"destroy\"\n            scope=\"singleton\">\n　　　　　　<property name=\"producerGroup\" value=\"MyProducerGroup\" />\n　　　　　　<property name=\"namesrvAddr\" value=\"127.0.0.1:9876\" />\n    </bean>\n    <bean class=\"cn.zno.rocketmq.MyConsumer\" \n            init-method=\"init\" \n            destroy-method=\"destroy\"\n            scope=\"singleton\">\n　　　　　　<property name=\"consumerGroup\" value=\"MyConsumerGroup\" />\n　　　　　　<property name=\"namesrvAddr\" value=\"127.0.0.1:9876\" />\n    </bean> \n```\n\n3. 自定义producer\n\n```\npackage cn.zno.rocketmq;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\n\npublic class MyProducer {\n\n    private final Logger logger = LoggerFactory.getLogger(MyProducer.class);\n\n    private DefaultMQProducer defaultMQProducer;\n    private String producerGroup;\n    private String namesrvAddr;\n\n    /**\n     * Spring bean init-method\n     */\n    public void init() throws MQClientException {\n        // 参数信息\n        logger.info(\"DefaultMQProducer initialize!\");\n        logger.info(producerGroup);\n        logger.info(namesrvAddr);\n\n        // 初始化\n        defaultMQProducer = new DefaultMQProducer(producerGroup);\n        defaultMQProducer.setNamesrvAddr(namesrvAddr);\n        defaultMQProducer.setInstanceName(String.valueOf(System.currentTimeMillis()));\n        \n        defaultMQProducer.start();\n\n　　　　 logger.info(\"DefaultMQProudcer start success!\");\n\n    }\n\n    /**\n     * Spring bean destroy-method\n     */\n    public void destroy() {\n        defaultMQProducer.shutdown();\n    }\n\n    public DefaultMQProducer getDefaultMQProducer() {\n        return defaultMQProducer;\n    }\n\n    // ---------------setter -----------------\n\n    public void setProducerGroup(String producerGroup) {\n        this.producerGroup = producerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n}\n```\n\n\n4. 自定义consumer\n\n```\npackage cn.zno.rocketmq;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;\nimport com.alibaba.rocketmq.common.message.MessageExt;\nimport com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class MyConsumer {\n\n    private final Logger logger = LoggerFactory.getLogger(MyConsumer.class);\n\n    private DefaultMQPushConsumer defaultMQPushConsumer;\n    private String namesrvAddr;\n    private String consumerGroup;\n\n    /**\n     * Spring bean init-method\n     */\n    public void init() throws InterruptedException, MQClientException {\n\n        // 参数信息\n        logger.info(\"DefaultMQPushConsumer initialize!\");\n        logger.info(consumerGroup);\n        logger.info(namesrvAddr);\n\n        // 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例<br>\n        // 注意：ConsumerGroupName需要由应用来保证唯一\n        defaultMQPushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        defaultMQPushConsumer.setNamesrvAddr(namesrvAddr);\n        defaultMQPushConsumer.setInstanceName(String.valueOf(System.currentTimeMillis()));\n\n        // 订阅指定MyTopic下tags等于MyTag\n\n        defaultMQPushConsumer.subscribe(\"MyTopic\", \"MyTag\");\n\n        // 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费<br>\n        // 如果非第一次启动，那么按照上次消费的位置继续消费\n        defaultMQPushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        // 设置为集群消费(区别于广播消费)\n        defaultMQPushConsumer.setMessageModel(MessageModel.CLUSTERING);\n\n        defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            // 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n\n                MessageExt msg = msgs.get(0);\n                if (msg.getTopic().equals(\"MyTopic\")) {\n                    // TODO 执行Topic的消费逻辑\n                    if (msg.getTags() != null && msg.getTags().equals(\"MyTag\")) {\n                        // TODO 执行Tag的消费\n                    }\n                }\n                // 如果没有return success ，consumer会重新消费该消息，直到return success\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        // Consumer对象在使用之前必须要调用start初始化，初始化一次即可<br>\n        defaultMQPushConsumer.start();\n\n        logger.info(\"DefaultMQPushConsumer start success!\");\n    }\n\n    /**\n     * Spring bean destroy-method\n     */\n    public void destroy() {\n        defaultMQPushConsumer.shutdown();\n    }\n\n    // ----------------- setter --------------------\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n}\n```\n\n5. 发消息\n\n```\n@Autowired\n    private MyProducer myProducer;\n\n    public void sendMessage() {\n        Message msg = new Message(\"MyTopic\", \"MyTag\", (JSONObject.fromObject(someMessage)).getBytes());\n        SendResult sendResult = null;\n        try {\n            sendResult = myProducer.getDefaultMQProducer().send(msg);\n        } catch (MQClientException e) {\n            logger.error(e.getMessage() + String.valueOf(sendResult));\n        }\n        // 当消息发送失败时如何处理\n        if (sendResult == null || sendResult.getSendStatus() != SendStatus.SEND_OK) {\n            // TODO\n        }\n    }\n```\n","slug":"spring整合rocketmq","published":1,"updated":"2018-10-17T05:48:51.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4l001wk4nz0axfjdxd","content":"<h5 id=\"Spring-整合-RocketMQ\"><a href=\"#Spring-整合-RocketMQ\" class=\"headerlink\" title=\"Spring 整合 RocketMQ\"></a>Spring 整合 RocketMQ</h5><ol>\n<li>引入jar包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- RocketMQ --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">             &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;  </span><br><span class=\"line\">             &lt;artifactId&gt;rocketmq-all&lt;/artifactId&gt;  </span><br><span class=\"line\">             &lt;version&gt;3.2.6&lt;/version&gt;  </span><br><span class=\"line\">             &lt;type&gt;pom&lt;/type&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">             &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;  </span><br><span class=\"line\">             &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;  </span><br><span class=\"line\">             &lt;version&gt;3.2.6&lt;/version&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.Spring bean 配置单例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;myProducer&quot; class=&quot;cn.zno.rocketmq.MyProducer&quot;</span><br><span class=\"line\">        init-method=&quot;init&quot;  </span><br><span class=\"line\">        destroy-method=&quot;destroy&quot;</span><br><span class=\"line\">        scope=&quot;singleton&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;producerGroup&quot; value=&quot;MyProducerGroup&quot; /&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;namesrvAddr&quot; value=&quot;127.0.0.1:9876&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">&lt;bean class=&quot;cn.zno.rocketmq.MyConsumer&quot; </span><br><span class=\"line\">        init-method=&quot;init&quot; </span><br><span class=\"line\">        destroy-method=&quot;destroy&quot;</span><br><span class=\"line\">        scope=&quot;singleton&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;consumerGroup&quot; value=&quot;MyConsumerGroup&quot; /&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;namesrvAddr&quot; value=&quot;127.0.0.1:9876&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>自定义producer</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.zno.rocketmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProducer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyProducer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private DefaultMQProducer defaultMQProducer;</span><br><span class=\"line\">    private String producerGroup;</span><br><span class=\"line\">    private String namesrvAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean init-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void init() throws MQClientException &#123;</span><br><span class=\"line\">        // 参数信息</span><br><span class=\"line\">        logger.info(&quot;DefaultMQProducer initialize!&quot;);</span><br><span class=\"line\">        logger.info(producerGroup);</span><br><span class=\"line\">        logger.info(namesrvAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初始化</span><br><span class=\"line\">        defaultMQProducer = new DefaultMQProducer(producerGroup);</span><br><span class=\"line\">        defaultMQProducer.setNamesrvAddr(namesrvAddr);</span><br><span class=\"line\">        defaultMQProducer.setInstanceName(String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        defaultMQProducer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　 logger.info(&quot;DefaultMQProudcer start success!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean destroy-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        defaultMQProducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DefaultMQProducer getDefaultMQProducer() &#123;</span><br><span class=\"line\">        return defaultMQProducer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ---------------setter -----------------</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProducerGroup(String producerGroup) &#123;</span><br><span class=\"line\">        this.producerGroup = producerGroup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNamesrvAddr(String namesrvAddr) &#123;</span><br><span class=\"line\">        this.namesrvAddr = namesrvAddr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>自定义consumer</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.zno.rocketmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.message.MessageExt;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyConsumer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyConsumer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private DefaultMQPushConsumer defaultMQPushConsumer;</span><br><span class=\"line\">    private String namesrvAddr;</span><br><span class=\"line\">    private String consumerGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean init-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void init() throws InterruptedException, MQClientException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 参数信息</span><br><span class=\"line\">        logger.info(&quot;DefaultMQPushConsumer initialize!&quot;);</span><br><span class=\"line\">        logger.info(consumerGroup);</span><br><span class=\"line\">        logger.info(namesrvAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;</span><br><span class=\"line\">        // 注意：ConsumerGroupName需要由应用来保证唯一</span><br><span class=\"line\">        defaultMQPushConsumer = new DefaultMQPushConsumer(consumerGroup);</span><br><span class=\"line\">        defaultMQPushConsumer.setNamesrvAddr(namesrvAddr);</span><br><span class=\"line\">        defaultMQPushConsumer.setInstanceName(String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 订阅指定MyTopic下tags等于MyTag</span><br><span class=\"line\"></span><br><span class=\"line\">        defaultMQPushConsumer.subscribe(&quot;MyTopic&quot;, &quot;MyTag&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;</span><br><span class=\"line\">        // 如果非第一次启动，那么按照上次消费的位置继续消费</span><br><span class=\"line\">        defaultMQPushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置为集群消费(区别于广播消费)</span><br><span class=\"line\">        defaultMQPushConsumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\"></span><br><span class=\"line\">        defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                MessageExt msg = msgs.get(0);</span><br><span class=\"line\">                if (msg.getTopic().equals(&quot;MyTopic&quot;)) &#123;</span><br><span class=\"line\">                    // TODO 执行Topic的消费逻辑</span><br><span class=\"line\">                    if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;MyTag&quot;)) &#123;</span><br><span class=\"line\">                        // TODO 执行Tag的消费</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 如果没有return success ，consumer会重新消费该消息，直到return success</span><br><span class=\"line\">                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Consumer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;</span><br><span class=\"line\">        defaultMQPushConsumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(&quot;DefaultMQPushConsumer start success!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean destroy-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        defaultMQPushConsumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ----------------- setter --------------------</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNamesrvAddr(String namesrvAddr) &#123;</span><br><span class=\"line\">        this.namesrvAddr = namesrvAddr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setConsumerGroup(String consumerGroup) &#123;</span><br><span class=\"line\">        this.consumerGroup = consumerGroup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>发消息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">    private MyProducer myProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void sendMessage() &#123;</span><br><span class=\"line\">        Message msg = new Message(&quot;MyTopic&quot;, &quot;MyTag&quot;, (JSONObject.fromObject(someMessage)).getBytes());</span><br><span class=\"line\">        SendResult sendResult = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            sendResult = myProducer.getDefaultMQProducer().send(msg);</span><br><span class=\"line\">        &#125; catch (MQClientException e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage() + String.valueOf(sendResult));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 当消息发送失败时如何处理</span><br><span class=\"line\">        if (sendResult == null || sendResult.getSendStatus() != SendStatus.SEND_OK) &#123;</span><br><span class=\"line\">            // TODO</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Spring-整合-RocketMQ\"><a href=\"#Spring-整合-RocketMQ\" class=\"headerlink\" title=\"Spring 整合 RocketMQ\"></a>Spring 整合 RocketMQ</h5><ol>\n<li>引入jar包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- RocketMQ --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">             &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;  </span><br><span class=\"line\">             &lt;artifactId&gt;rocketmq-all&lt;/artifactId&gt;  </span><br><span class=\"line\">             &lt;version&gt;3.2.6&lt;/version&gt;  </span><br><span class=\"line\">             &lt;type&gt;pom&lt;/type&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">             &lt;groupId&gt;com.alibaba.rocketmq&lt;/groupId&gt;  </span><br><span class=\"line\">             &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;  </span><br><span class=\"line\">             &lt;version&gt;3.2.6&lt;/version&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.Spring bean 配置单例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;myProducer&quot; class=&quot;cn.zno.rocketmq.MyProducer&quot;</span><br><span class=\"line\">        init-method=&quot;init&quot;  </span><br><span class=\"line\">        destroy-method=&quot;destroy&quot;</span><br><span class=\"line\">        scope=&quot;singleton&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;producerGroup&quot; value=&quot;MyProducerGroup&quot; /&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;namesrvAddr&quot; value=&quot;127.0.0.1:9876&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">&lt;bean class=&quot;cn.zno.rocketmq.MyConsumer&quot; </span><br><span class=\"line\">        init-method=&quot;init&quot; </span><br><span class=\"line\">        destroy-method=&quot;destroy&quot;</span><br><span class=\"line\">        scope=&quot;singleton&quot;&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;consumerGroup&quot; value=&quot;MyConsumerGroup&quot; /&gt;</span><br><span class=\"line\">　　　　　　&lt;property name=&quot;namesrvAddr&quot; value=&quot;127.0.0.1:9876&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>自定义producer</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.zno.rocketmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProducer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyProducer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private DefaultMQProducer defaultMQProducer;</span><br><span class=\"line\">    private String producerGroup;</span><br><span class=\"line\">    private String namesrvAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean init-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void init() throws MQClientException &#123;</span><br><span class=\"line\">        // 参数信息</span><br><span class=\"line\">        logger.info(&quot;DefaultMQProducer initialize!&quot;);</span><br><span class=\"line\">        logger.info(producerGroup);</span><br><span class=\"line\">        logger.info(namesrvAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初始化</span><br><span class=\"line\">        defaultMQProducer = new DefaultMQProducer(producerGroup);</span><br><span class=\"line\">        defaultMQProducer.setNamesrvAddr(namesrvAddr);</span><br><span class=\"line\">        defaultMQProducer.setInstanceName(String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        defaultMQProducer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　 logger.info(&quot;DefaultMQProudcer start success!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean destroy-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        defaultMQProducer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DefaultMQProducer getDefaultMQProducer() &#123;</span><br><span class=\"line\">        return defaultMQProducer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ---------------setter -----------------</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProducerGroup(String producerGroup) &#123;</span><br><span class=\"line\">        this.producerGroup = producerGroup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNamesrvAddr(String namesrvAddr) &#123;</span><br><span class=\"line\">        this.namesrvAddr = namesrvAddr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>自定义consumer</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.zno.rocketmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\">import com.alibaba.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.message.MessageExt;</span><br><span class=\"line\">import com.alibaba.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyConsumer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Logger logger = LoggerFactory.getLogger(MyConsumer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private DefaultMQPushConsumer defaultMQPushConsumer;</span><br><span class=\"line\">    private String namesrvAddr;</span><br><span class=\"line\">    private String consumerGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean init-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void init() throws InterruptedException, MQClientException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 参数信息</span><br><span class=\"line\">        logger.info(&quot;DefaultMQPushConsumer initialize!&quot;);</span><br><span class=\"line\">        logger.info(consumerGroup);</span><br><span class=\"line\">        logger.info(namesrvAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例&lt;br&gt;</span><br><span class=\"line\">        // 注意：ConsumerGroupName需要由应用来保证唯一</span><br><span class=\"line\">        defaultMQPushConsumer = new DefaultMQPushConsumer(consumerGroup);</span><br><span class=\"line\">        defaultMQPushConsumer.setNamesrvAddr(namesrvAddr);</span><br><span class=\"line\">        defaultMQPushConsumer.setInstanceName(String.valueOf(System.currentTimeMillis()));</span><br><span class=\"line\"></span><br><span class=\"line\">        // 订阅指定MyTopic下tags等于MyTag</span><br><span class=\"line\"></span><br><span class=\"line\">        defaultMQPushConsumer.subscribe(&quot;MyTopic&quot;, &quot;MyTag&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费&lt;br&gt;</span><br><span class=\"line\">        // 如果非第一次启动，那么按照上次消费的位置继续消费</span><br><span class=\"line\">        defaultMQPushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 设置为集群消费(区别于广播消费)</span><br><span class=\"line\">        defaultMQPushConsumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\"></span><br><span class=\"line\">        defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 默认msgs里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                MessageExt msg = msgs.get(0);</span><br><span class=\"line\">                if (msg.getTopic().equals(&quot;MyTopic&quot;)) &#123;</span><br><span class=\"line\">                    // TODO 执行Topic的消费逻辑</span><br><span class=\"line\">                    if (msg.getTags() != null &amp;&amp; msg.getTags().equals(&quot;MyTag&quot;)) &#123;</span><br><span class=\"line\">                        // TODO 执行Tag的消费</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 如果没有return success ，consumer会重新消费该消息，直到return success</span><br><span class=\"line\">                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Consumer对象在使用之前必须要调用start初始化，初始化一次即可&lt;br&gt;</span><br><span class=\"line\">        defaultMQPushConsumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(&quot;DefaultMQPushConsumer start success!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Spring bean destroy-method</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">        defaultMQPushConsumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ----------------- setter --------------------</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNamesrvAddr(String namesrvAddr) &#123;</span><br><span class=\"line\">        this.namesrvAddr = namesrvAddr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setConsumerGroup(String consumerGroup) &#123;</span><br><span class=\"line\">        this.consumerGroup = consumerGroup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>发消息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">    private MyProducer myProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void sendMessage() &#123;</span><br><span class=\"line\">        Message msg = new Message(&quot;MyTopic&quot;, &quot;MyTag&quot;, (JSONObject.fromObject(someMessage)).getBytes());</span><br><span class=\"line\">        SendResult sendResult = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            sendResult = myProducer.getDefaultMQProducer().send(msg);</span><br><span class=\"line\">        &#125; catch (MQClientException e) &#123;</span><br><span class=\"line\">            logger.error(e.getMessage() + String.valueOf(sendResult));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 当消息发送失败时如何处理</span><br><span class=\"line\">        if (sendResult == null || sendResult.getSendStatus() != SendStatus.SEND_OK) &#123;</span><br><span class=\"line\">            // TODO</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"SpringMVC 注解实现权限拦截","date":"2017-09-07T05:00:00.000Z","_content":"最近在用SpringMvc写项目的时候，遇到一个问题，就是方法的鉴权问题，这个问题弄了一天了终于解决了，下面看下解决方法 **项目需求**：需要鉴权的地方，我只需要打个标签即可，比如只有用户登录才可以进行的操作，一般情况下我们会在执行方法时先对用户的身份进项校验，这样无形中增加了非常大的工作量，重复造轮子，有了java注解只需要在需要鉴权的方法上面打个标签即可\n######  **解决方案：**\n1、拦截器类：\n\n\n```\npackage com.showshine.lake.Interceptor;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport com.alibaba.druid.util.StringUtils;\nimport com.showshine.lake.utils.Config;\nimport com.showshine.lake.utils.EncriptUtil;\n\n\n/** \n * @ClassName: AdvSignCheckInterceptor \n * @Description: TODO\n * @author: wenyapeng\n * @date: 2017年9月7日 上午10:19:00  \n */\npublic class AdvSignCheckInterceptor extends HandlerInterceptorAdapter{\n\n\tpublic final static String SIGN_KEY= \"sign\";\n\tpublic String success;\n    public String failed;\n\n    public boolean isMyHandler(Object handler) {\n        if (!(handler instanceof HandlerMethod))\n            return false;\n        HandlerMethod handlerMethod = (HandlerMethod) handler;\n        Interceptor interceptor = handlerMethod.getMethodAnnotation(Interceptor.class);\n        if (interceptor == null)\n            return false;\n        if (!interceptor.name().equals(this.getClass().getSimpleName()) && !interceptor.name().equals(this.getClass().getName()))\n            return false;\n        success = interceptor.success();\n        return true;\n    }\n\n\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if (isMyHandler(handler)) {\n        \tString sign = request.getParameter(SIGN_KEY);\n        \tif(StringUtils.isEmpty(sign)){\n        \t\treturn false;\n        \t}\n        \tString signkey = Config.get(\"adv.popularize.sign\",\"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\");\n        \tList<String> keys = new ArrayList<String>();\n        \tEnumeration<String> parameterMap = request.getParameterNames();\n        \t\n        \twhile(parameterMap.hasMoreElements()){\n        \t\tString param = parameterMap.nextElement();\n        \t\tif(!SIGN_KEY.equals(param)){\n        \t\t\tkeys.add(request.getParameter(param));\n        \t\t}\n        \t}\n        \tCollections.reverse(keys);\n        \tStringBuffer key = new StringBuffer();\n        \tfor(String i : keys){\n        \t\tkey.append(i);\n        \t}\n        \tString creatSign = EncriptUtil.md5(key.toString()+signkey);\n    \t\tif(!creatSign.equals(sign)){\n    \t\t\treturn false;\n    \t\t}else{\n    \t\t\treturn true;\n    \t\t}\n        }else{\n        \treturn true;\n        }\n    }\n\n\n    @Target(ElementType.METHOD)\n    @Retention(RetentionPolicy.RUNTIME)\n    public static @interface Interceptor {\n        public String name();\n\n        public String success() default \"\";\n    }\n\n}\n\n```\n\n\n　　2、配置拦截器：需要在*-servlet.xml里面增加以下代码，如果您自定义了配置文件也可直接放到您定义的配置文件中\n\n\n```\n<mvc:interceptors>\n\t<bean class=\"com.showshine.lake.Interceptor.AdvSignCheckInterceptor\"/>\n</mvc:interceptors>\n```\n3、在类上面添加注解：\n\n```\n@Interceptor(name = \"AdvSignCheckInterceptor\")\n@RequestMapping(value = \"advIdfaCheck\", method = RequestMethod.POST)\n@ResponseBody\npublic JSONObject advIdfaCheck(String idfa,String advertSource,String sign){\n\tJSONObject retJson = new JSONObject();\n\tJSONObject data = advPopularizeService.idfaCheck(idfa);\n\tretJson.put(\"data\", data);\n\tlogger.info(\"param{idfa:\"+idfa+\"}\" + \" return_value \" + retJson.toJSONString());\n\treturn retJson;\n}\n```\n\n\n　　注意：需要将默认的改为RequestMappingHandlerMapping，增加RequestMappingHandlerAdapter的bean 　　重新启动tomcat即可， 　　温馨提示：如果对方法需要鉴权只需要在方法上面打上@Auth，如果对类的所有方法需要鉴权，只需要在类上面打上@Auth即可。 　　那么问题来了，方法拦截器会吧静态资源一块拦截，我们需要在tomcat中进行对静态文件进行拦截如：我的解决方法是在web.xml进行配置，大家有好的方法也可以加我扣扣752432995一块探讨\n\n","source":"_posts/springmvc 注解实现权限拦截.md","raw":"---\ntitle: SpringMVC 注解实现权限拦截\ndate: 2017-09-07 13:00:00\ntags: spring\ncategories: spring mvc\n---\n最近在用SpringMvc写项目的时候，遇到一个问题，就是方法的鉴权问题，这个问题弄了一天了终于解决了，下面看下解决方法 **项目需求**：需要鉴权的地方，我只需要打个标签即可，比如只有用户登录才可以进行的操作，一般情况下我们会在执行方法时先对用户的身份进项校验，这样无形中增加了非常大的工作量，重复造轮子，有了java注解只需要在需要鉴权的方法上面打个标签即可\n######  **解决方案：**\n1、拦截器类：\n\n\n```\npackage com.showshine.lake.Interceptor;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Enumeration;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport com.alibaba.druid.util.StringUtils;\nimport com.showshine.lake.utils.Config;\nimport com.showshine.lake.utils.EncriptUtil;\n\n\n/** \n * @ClassName: AdvSignCheckInterceptor \n * @Description: TODO\n * @author: wenyapeng\n * @date: 2017年9月7日 上午10:19:00  \n */\npublic class AdvSignCheckInterceptor extends HandlerInterceptorAdapter{\n\n\tpublic final static String SIGN_KEY= \"sign\";\n\tpublic String success;\n    public String failed;\n\n    public boolean isMyHandler(Object handler) {\n        if (!(handler instanceof HandlerMethod))\n            return false;\n        HandlerMethod handlerMethod = (HandlerMethod) handler;\n        Interceptor interceptor = handlerMethod.getMethodAnnotation(Interceptor.class);\n        if (interceptor == null)\n            return false;\n        if (!interceptor.name().equals(this.getClass().getSimpleName()) && !interceptor.name().equals(this.getClass().getName()))\n            return false;\n        success = interceptor.success();\n        return true;\n    }\n\n\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if (isMyHandler(handler)) {\n        \tString sign = request.getParameter(SIGN_KEY);\n        \tif(StringUtils.isEmpty(sign)){\n        \t\treturn false;\n        \t}\n        \tString signkey = Config.get(\"adv.popularize.sign\",\"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\");\n        \tList<String> keys = new ArrayList<String>();\n        \tEnumeration<String> parameterMap = request.getParameterNames();\n        \t\n        \twhile(parameterMap.hasMoreElements()){\n        \t\tString param = parameterMap.nextElement();\n        \t\tif(!SIGN_KEY.equals(param)){\n        \t\t\tkeys.add(request.getParameter(param));\n        \t\t}\n        \t}\n        \tCollections.reverse(keys);\n        \tStringBuffer key = new StringBuffer();\n        \tfor(String i : keys){\n        \t\tkey.append(i);\n        \t}\n        \tString creatSign = EncriptUtil.md5(key.toString()+signkey);\n    \t\tif(!creatSign.equals(sign)){\n    \t\t\treturn false;\n    \t\t}else{\n    \t\t\treturn true;\n    \t\t}\n        }else{\n        \treturn true;\n        }\n    }\n\n\n    @Target(ElementType.METHOD)\n    @Retention(RetentionPolicy.RUNTIME)\n    public static @interface Interceptor {\n        public String name();\n\n        public String success() default \"\";\n    }\n\n}\n\n```\n\n\n　　2、配置拦截器：需要在*-servlet.xml里面增加以下代码，如果您自定义了配置文件也可直接放到您定义的配置文件中\n\n\n```\n<mvc:interceptors>\n\t<bean class=\"com.showshine.lake.Interceptor.AdvSignCheckInterceptor\"/>\n</mvc:interceptors>\n```\n3、在类上面添加注解：\n\n```\n@Interceptor(name = \"AdvSignCheckInterceptor\")\n@RequestMapping(value = \"advIdfaCheck\", method = RequestMethod.POST)\n@ResponseBody\npublic JSONObject advIdfaCheck(String idfa,String advertSource,String sign){\n\tJSONObject retJson = new JSONObject();\n\tJSONObject data = advPopularizeService.idfaCheck(idfa);\n\tretJson.put(\"data\", data);\n\tlogger.info(\"param{idfa:\"+idfa+\"}\" + \" return_value \" + retJson.toJSONString());\n\treturn retJson;\n}\n```\n\n\n　　注意：需要将默认的改为RequestMappingHandlerMapping，增加RequestMappingHandlerAdapter的bean 　　重新启动tomcat即可， 　　温馨提示：如果对方法需要鉴权只需要在方法上面打上@Auth，如果对类的所有方法需要鉴权，只需要在类上面打上@Auth即可。 　　那么问题来了，方法拦截器会吧静态资源一块拦截，我们需要在tomcat中进行对静态文件进行拦截如：我的解决方法是在web.xml进行配置，大家有好的方法也可以加我扣扣752432995一块探讨\n\n","slug":"springmvc 注解实现权限拦截","published":1,"updated":"2018-10-17T05:48:51.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4o001zk4nzl0dx3grf","content":"<p>最近在用SpringMvc写项目的时候，遇到一个问题，就是方法的鉴权问题，这个问题弄了一天了终于解决了，下面看下解决方法 <strong>项目需求</strong>：需要鉴权的地方，我只需要打个标签即可，比如只有用户登录才可以进行的操作，一般情况下我们会在执行方法时先对用户的身份进项校验，这样无形中增加了非常大的工作量，重复造轮子，有了java注解只需要在需要鉴权的方法上面打个标签即可</p>\n<h6 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><strong>解决方案：</strong></h6><p>1、拦截器类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.showshine.lake.Interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\">import java.util.Enumeration;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.druid.util.StringUtils;</span><br><span class=\"line\">import com.showshine.lake.utils.Config;</span><br><span class=\"line\">import com.showshine.lake.utils.EncriptUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/** </span><br><span class=\"line\"> * @ClassName: AdvSignCheckInterceptor </span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @author: wenyapeng</span><br><span class=\"line\"> * @date: 2017年9月7日 上午10:19:00  </span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AdvSignCheckInterceptor extends HandlerInterceptorAdapter&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic final static String SIGN_KEY= &quot;sign&quot;;</span><br><span class=\"line\">\tpublic String success;</span><br><span class=\"line\">    public String failed;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isMyHandler(Object handler) &#123;</span><br><span class=\"line\">        if (!(handler instanceof HandlerMethod))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">        Interceptor interceptor = handlerMethod.getMethodAnnotation(Interceptor.class);</span><br><span class=\"line\">        if (interceptor == null)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        if (!interceptor.name().equals(this.getClass().getSimpleName()) &amp;&amp; !interceptor.name().equals(this.getClass().getName()))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        success = interceptor.success();</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        if (isMyHandler(handler)) &#123;</span><br><span class=\"line\">        \tString sign = request.getParameter(SIGN_KEY);</span><br><span class=\"line\">        \tif(StringUtils.isEmpty(sign))&#123;</span><br><span class=\"line\">        \t\treturn false;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tString signkey = Config.get(&quot;adv.popularize.sign&quot;,&quot;2jmj7l5rSw0yVb/vlWAYkK/YBwk=&quot;);</span><br><span class=\"line\">        \tList&lt;String&gt; keys = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        \tEnumeration&lt;String&gt; parameterMap = request.getParameterNames();</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \twhile(parameterMap.hasMoreElements())&#123;</span><br><span class=\"line\">        \t\tString param = parameterMap.nextElement();</span><br><span class=\"line\">        \t\tif(!SIGN_KEY.equals(param))&#123;</span><br><span class=\"line\">        \t\t\tkeys.add(request.getParameter(param));</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tCollections.reverse(keys);</span><br><span class=\"line\">        \tStringBuffer key = new StringBuffer();</span><br><span class=\"line\">        \tfor(String i : keys)&#123;</span><br><span class=\"line\">        \t\tkey.append(i);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tString creatSign = EncriptUtil.md5(key.toString()+signkey);</span><br><span class=\"line\">    \t\tif(!creatSign.equals(sign))&#123;</span><br><span class=\"line\">    \t\t\treturn false;</span><br><span class=\"line\">    \t\t&#125;else&#123;</span><br><span class=\"line\">    \t\t\treturn true;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">        \treturn true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Target(ElementType.METHOD)</span><br><span class=\"line\">    @Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">    public static @interface Interceptor &#123;</span><br><span class=\"line\">        public String name();</span><br><span class=\"line\"></span><br><span class=\"line\">        public String success() default &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　2、配置拦截器：需要在*-servlet.xml里面增加以下代码，如果您自定义了配置文件也可直接放到您定义的配置文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:interceptors&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;com.showshine.lake.Interceptor.AdvSignCheckInterceptor&quot;/&gt;</span><br><span class=\"line\">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>\n<p>3、在类上面添加注解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Interceptor(name = &quot;AdvSignCheckInterceptor&quot;)</span><br><span class=\"line\">@RequestMapping(value = &quot;advIdfaCheck&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public JSONObject advIdfaCheck(String idfa,String advertSource,String sign)&#123;</span><br><span class=\"line\">\tJSONObject retJson = new JSONObject();</span><br><span class=\"line\">\tJSONObject data = advPopularizeService.idfaCheck(idfa);</span><br><span class=\"line\">\tretJson.put(&quot;data&quot;, data);</span><br><span class=\"line\">\tlogger.info(&quot;param&#123;idfa:&quot;+idfa+&quot;&#125;&quot; + &quot; return_value &quot; + retJson.toJSONString());</span><br><span class=\"line\">\treturn retJson;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　注意：需要将默认的改为RequestMappingHandlerMapping，增加RequestMappingHandlerAdapter的bean 　　重新启动tomcat即可， 　　温馨提示：如果对方法需要鉴权只需要在方法上面打上@Auth，如果对类的所有方法需要鉴权，只需要在类上面打上@Auth即可。 　　那么问题来了，方法拦截器会吧静态资源一块拦截，我们需要在tomcat中进行对静态文件进行拦截如：我的解决方法是在web.xml进行配置，大家有好的方法也可以加我扣扣752432995一块探讨</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在用SpringMvc写项目的时候，遇到一个问题，就是方法的鉴权问题，这个问题弄了一天了终于解决了，下面看下解决方法 <strong>项目需求</strong>：需要鉴权的地方，我只需要打个标签即可，比如只有用户登录才可以进行的操作，一般情况下我们会在执行方法时先对用户的身份进项校验，这样无形中增加了非常大的工作量，重复造轮子，有了java注解只需要在需要鉴权的方法上面打个标签即可</p>\n<h6 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a><strong>解决方案：</strong></h6><p>1、拦截器类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.showshine.lake.Interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\">import java.util.Enumeration;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.method.HandlerMethod;</span><br><span class=\"line\">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.druid.util.StringUtils;</span><br><span class=\"line\">import com.showshine.lake.utils.Config;</span><br><span class=\"line\">import com.showshine.lake.utils.EncriptUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/** </span><br><span class=\"line\"> * @ClassName: AdvSignCheckInterceptor </span><br><span class=\"line\"> * @Description: TODO</span><br><span class=\"line\"> * @author: wenyapeng</span><br><span class=\"line\"> * @date: 2017年9月7日 上午10:19:00  </span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AdvSignCheckInterceptor extends HandlerInterceptorAdapter&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic final static String SIGN_KEY= &quot;sign&quot;;</span><br><span class=\"line\">\tpublic String success;</span><br><span class=\"line\">    public String failed;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isMyHandler(Object handler) &#123;</span><br><span class=\"line\">        if (!(handler instanceof HandlerMethod))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class=\"line\">        Interceptor interceptor = handlerMethod.getMethodAnnotation(Interceptor.class);</span><br><span class=\"line\">        if (interceptor == null)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        if (!interceptor.name().equals(this.getClass().getSimpleName()) &amp;&amp; !interceptor.name().equals(this.getClass().getName()))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        success = interceptor.success();</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">        if (isMyHandler(handler)) &#123;</span><br><span class=\"line\">        \tString sign = request.getParameter(SIGN_KEY);</span><br><span class=\"line\">        \tif(StringUtils.isEmpty(sign))&#123;</span><br><span class=\"line\">        \t\treturn false;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tString signkey = Config.get(&quot;adv.popularize.sign&quot;,&quot;2jmj7l5rSw0yVb/vlWAYkK/YBwk=&quot;);</span><br><span class=\"line\">        \tList&lt;String&gt; keys = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        \tEnumeration&lt;String&gt; parameterMap = request.getParameterNames();</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \twhile(parameterMap.hasMoreElements())&#123;</span><br><span class=\"line\">        \t\tString param = parameterMap.nextElement();</span><br><span class=\"line\">        \t\tif(!SIGN_KEY.equals(param))&#123;</span><br><span class=\"line\">        \t\t\tkeys.add(request.getParameter(param));</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tCollections.reverse(keys);</span><br><span class=\"line\">        \tStringBuffer key = new StringBuffer();</span><br><span class=\"line\">        \tfor(String i : keys)&#123;</span><br><span class=\"line\">        \t\tkey.append(i);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tString creatSign = EncriptUtil.md5(key.toString()+signkey);</span><br><span class=\"line\">    \t\tif(!creatSign.equals(sign))&#123;</span><br><span class=\"line\">    \t\t\treturn false;</span><br><span class=\"line\">    \t\t&#125;else&#123;</span><br><span class=\"line\">    \t\t\treturn true;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">        \treturn true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Target(ElementType.METHOD)</span><br><span class=\"line\">    @Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">    public static @interface Interceptor &#123;</span><br><span class=\"line\">        public String name();</span><br><span class=\"line\"></span><br><span class=\"line\">        public String success() default &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　2、配置拦截器：需要在*-servlet.xml里面增加以下代码，如果您自定义了配置文件也可直接放到您定义的配置文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:interceptors&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;com.showshine.lake.Interceptor.AdvSignCheckInterceptor&quot;/&gt;</span><br><span class=\"line\">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>\n<p>3、在类上面添加注解：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Interceptor(name = &quot;AdvSignCheckInterceptor&quot;)</span><br><span class=\"line\">@RequestMapping(value = &quot;advIdfaCheck&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public JSONObject advIdfaCheck(String idfa,String advertSource,String sign)&#123;</span><br><span class=\"line\">\tJSONObject retJson = new JSONObject();</span><br><span class=\"line\">\tJSONObject data = advPopularizeService.idfaCheck(idfa);</span><br><span class=\"line\">\tretJson.put(&quot;data&quot;, data);</span><br><span class=\"line\">\tlogger.info(&quot;param&#123;idfa:&quot;+idfa+&quot;&#125;&quot; + &quot; return_value &quot; + retJson.toJSONString());</span><br><span class=\"line\">\treturn retJson;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　注意：需要将默认的改为RequestMappingHandlerMapping，增加RequestMappingHandlerAdapter的bean 　　重新启动tomcat即可， 　　温馨提示：如果对方法需要鉴权只需要在方法上面打上@Auth，如果对类的所有方法需要鉴权，只需要在类上面打上@Auth即可。 　　那么问题来了，方法拦截器会吧静态资源一块拦截，我们需要在tomcat中进行对静态文件进行拦截如：我的解决方法是在web.xml进行配置，大家有好的方法也可以加我扣扣752432995一块探讨</p>\n"},{"title":"springboot根据不同的条件创建bean","date":"2017-10-17T03:37:00.000Z","_content":"\n## springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用\n\n这个需求应该也比较常见，在不同的条件下创建不同的bean，具体场景很多，能看到这篇的肯定懂我的意思。\n倘若不了解spring4.X新加入的@Conditional注解的话，要实现不同条件创建不同的bean还是比较麻烦的，可能需要硬编码一些东西做if判断。那么现在有个@Conditional注解后，事情就简单多了。用法很简单，直接上代码。\n新建一个springboot项目，添加一个Configuration标注的类，我们通过不同的条件表达式来创建bean。\n\n```java\npackage com.tianyalei.condition;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\n@Configuration\npublic class Config {\n\n    @Conditional(MyCondition.class)\n    @Bean\n    public String condition() {\n        System.err.println(\"自定义的condition的match方法返回值为true时，才会进入该方法创建bean\");\n        return \"\";\n    }\n\n    /**\n     * 该Abc class位于类路径上时\n     */\n    @ConditionalOnClass(Abc.class)\n    @Bean\n    public String abc() {\n        System.err.println(\"ConditionalOnClass true\");\n        return \"\";\n    }\n\n//    @ConditionalOnClass(Abc.class)\n//    @Bean\n//    public Abc newAbc() {\n//        System.err.println(\"ConditionalOnClass true\");\n//        return new Abc();\n//    }\n\n    /**\n     * 存在Abc类的实例时\n     */\n    @ConditionalOnBean(Abc.class)\n    @Bean\n    public String bean() {\n        System.err.println(\"ConditionalOnBean is exist\");\n        return \"\";\n    }\n\n    @ConditionalOnMissingBean(Abc.class)\n    @Bean\n    public String missBean() {\n        System.err.println(\"ConditionalOnBean is missing\");\n        return \"\";\n    }\n\n    /**\n     * 表达式为true时\n     */\n    @ConditionalOnExpression(value = \"true\")\n    @Bean\n    public String expresssion() {\n        System.err.println(\"expresssion is true\");\n        return \"\";\n    }\n\n    /**\n     * 配置文件属性是否为true\n     */\n    @ConditionalOnProperty(\n            value = {\"abc.property\"},\n            matchIfMissing = false)\n    @Bean\n    public String property() {\n        System.err.println(\"property is true\");\n        return \"\";\n    }\n}\n```\n这里面有个空类Abc.class，你可以就创建个叫Abc的类，里面是空的就行。\n```java\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\npublic class MyCondition implements Condition {\n    @Override\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n        //判断当前系统是Mac，Windows，Linux\n        return conditionContext.getEnvironment().getProperty(\"os.name\").contains(\"Mac\");\n    }\n}\n```\n**@Conditional(MyCondition.class)**\n这句代码可以标注在类上面，表示该类下面的所有@Bean都会启用配置\n也可以标注在方法上面，只是对该方法启用配置\n\n除了自己自定义Condition之外，Spring还提供了很多Condition给我们用\n**@ConditionalOnBean**（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）\n**@ConditionalOnClass**（某个class位于类路径上，才会实例化一个Bean）\n**@ConditionalOnExpression**（当表达式为true的时候，才会实例化一个Bean）\n**@ConditionalOnMissingBean**（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）\n**@ConditionalOnMissingClass**（某个class类路径上不存在的时候，才会实例化一个Bean）\n**@ConditionalOnNotWebApplication**（不是web应用）\n以上是一些常用的注解，其实就是条件判断，如果为true了就创建Bean，为false就不创建，就这么简单。\n这些注解里的条件可以是多个，也可以赋默认值，也可以标注在类上，如果标注在类上，则对类里的所有@Bean方法都生效。\n其中@ConditionalOnProperty是指在application.yml里配置的属性是否为true，其他的几个都是对class的判断。\n我在配置里加上abc.property = true这个配置就可以测试上面的代码了。\n然后再来一个对类进行多个条件标注的例子：\n```java\npackage com.tianyalei.condition;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\n@Configuration\n@ConditionalOnProperty(\n        value = {\"abc.property\"},\n        matchIfMissing = false\n)\n@ConditionalOnClass(Abc.class)\npublic class Multi {\n    @Bean\n    @ConditionalOnMissingBean({Abc.class})\n    public String check() {\n        System.err.println(\"multi check\");\n        return \"check\";\n    }\n}\n```\nOK，代码很简单，运行看看结果\n![](https://yapengwen.github.io/img/20171011114902806.jpg)\n可能上面的那些你用的地方不常见，那我来举一个我正在使用的例子。我的应用是基于SpringCloud的，在线上部署时有eureka来做注册中心，而在本地环境下，我的应用是单机的，不需要eureka，但是代码里已经引入了eureka了，每次启动就会自动去连接eureka，然后控制台就开始报错。虽然不影响功能，但是看着一直不停的报错也是不顺眼。\n那么我就可以使用Condition注解来解决它。\n```java\n/**\n * @author wuweifeng wrote on 2017/11/25.\n * 根据部署环境动态决定是否启用eureka\n */\n@Component\n@ConditionalOnProperty(value = \"open.eureka\")\n@EnableDiscoveryClient\npublic class JudgeEnableDiscoveryClient {\n}\n```\n我把EnableDiscoveryClient这个注解单独放个类里，里面什么也不写，条件就是application.yml里配置的open.eureka\n如果我只想让线上的环境开启eureka，那么我就在application-prod.yml里配上open.eureka=true，其他的yml什么也不写就行了。这样本地启动时就相当于没有开启EnableDiscoveryClient。\n","source":"_posts/spring-boot_条件加载.md","raw":"---\ntitle: springboot根据不同的条件创建bean\ndate: 2017-10-17 11:37:00\ntags: [springboot]\ncategories: java\n---\n\n## springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用\n\n这个需求应该也比较常见，在不同的条件下创建不同的bean，具体场景很多，能看到这篇的肯定懂我的意思。\n倘若不了解spring4.X新加入的@Conditional注解的话，要实现不同条件创建不同的bean还是比较麻烦的，可能需要硬编码一些东西做if判断。那么现在有个@Conditional注解后，事情就简单多了。用法很简单，直接上代码。\n新建一个springboot项目，添加一个Configuration标注的类，我们通过不同的条件表达式来创建bean。\n\n```java\npackage com.tianyalei.condition;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\n@Configuration\npublic class Config {\n\n    @Conditional(MyCondition.class)\n    @Bean\n    public String condition() {\n        System.err.println(\"自定义的condition的match方法返回值为true时，才会进入该方法创建bean\");\n        return \"\";\n    }\n\n    /**\n     * 该Abc class位于类路径上时\n     */\n    @ConditionalOnClass(Abc.class)\n    @Bean\n    public String abc() {\n        System.err.println(\"ConditionalOnClass true\");\n        return \"\";\n    }\n\n//    @ConditionalOnClass(Abc.class)\n//    @Bean\n//    public Abc newAbc() {\n//        System.err.println(\"ConditionalOnClass true\");\n//        return new Abc();\n//    }\n\n    /**\n     * 存在Abc类的实例时\n     */\n    @ConditionalOnBean(Abc.class)\n    @Bean\n    public String bean() {\n        System.err.println(\"ConditionalOnBean is exist\");\n        return \"\";\n    }\n\n    @ConditionalOnMissingBean(Abc.class)\n    @Bean\n    public String missBean() {\n        System.err.println(\"ConditionalOnBean is missing\");\n        return \"\";\n    }\n\n    /**\n     * 表达式为true时\n     */\n    @ConditionalOnExpression(value = \"true\")\n    @Bean\n    public String expresssion() {\n        System.err.println(\"expresssion is true\");\n        return \"\";\n    }\n\n    /**\n     * 配置文件属性是否为true\n     */\n    @ConditionalOnProperty(\n            value = {\"abc.property\"},\n            matchIfMissing = false)\n    @Bean\n    public String property() {\n        System.err.println(\"property is true\");\n        return \"\";\n    }\n}\n```\n这里面有个空类Abc.class，你可以就创建个叫Abc的类，里面是空的就行。\n```java\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\npublic class MyCondition implements Condition {\n    @Override\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n        //判断当前系统是Mac，Windows，Linux\n        return conditionContext.getEnvironment().getProperty(\"os.name\").contains(\"Mac\");\n    }\n}\n```\n**@Conditional(MyCondition.class)**\n这句代码可以标注在类上面，表示该类下面的所有@Bean都会启用配置\n也可以标注在方法上面，只是对该方法启用配置\n\n除了自己自定义Condition之外，Spring还提供了很多Condition给我们用\n**@ConditionalOnBean**（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）\n**@ConditionalOnClass**（某个class位于类路径上，才会实例化一个Bean）\n**@ConditionalOnExpression**（当表达式为true的时候，才会实例化一个Bean）\n**@ConditionalOnMissingBean**（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）\n**@ConditionalOnMissingClass**（某个class类路径上不存在的时候，才会实例化一个Bean）\n**@ConditionalOnNotWebApplication**（不是web应用）\n以上是一些常用的注解，其实就是条件判断，如果为true了就创建Bean，为false就不创建，就这么简单。\n这些注解里的条件可以是多个，也可以赋默认值，也可以标注在类上，如果标注在类上，则对类里的所有@Bean方法都生效。\n其中@ConditionalOnProperty是指在application.yml里配置的属性是否为true，其他的几个都是对class的判断。\n我在配置里加上abc.property = true这个配置就可以测试上面的代码了。\n然后再来一个对类进行多个条件标注的例子：\n```java\npackage com.tianyalei.condition;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by wuweifeng on 2017/10/11.\n */\n@Configuration\n@ConditionalOnProperty(\n        value = {\"abc.property\"},\n        matchIfMissing = false\n)\n@ConditionalOnClass(Abc.class)\npublic class Multi {\n    @Bean\n    @ConditionalOnMissingBean({Abc.class})\n    public String check() {\n        System.err.println(\"multi check\");\n        return \"check\";\n    }\n}\n```\nOK，代码很简单，运行看看结果\n![](https://yapengwen.github.io/img/20171011114902806.jpg)\n可能上面的那些你用的地方不常见，那我来举一个我正在使用的例子。我的应用是基于SpringCloud的，在线上部署时有eureka来做注册中心，而在本地环境下，我的应用是单机的，不需要eureka，但是代码里已经引入了eureka了，每次启动就会自动去连接eureka，然后控制台就开始报错。虽然不影响功能，但是看着一直不停的报错也是不顺眼。\n那么我就可以使用Condition注解来解决它。\n```java\n/**\n * @author wuweifeng wrote on 2017/11/25.\n * 根据部署环境动态决定是否启用eureka\n */\n@Component\n@ConditionalOnProperty(value = \"open.eureka\")\n@EnableDiscoveryClient\npublic class JudgeEnableDiscoveryClient {\n}\n```\n我把EnableDiscoveryClient这个注解单独放个类里，里面什么也不写，条件就是application.yml里配置的open.eureka\n如果我只想让线上的环境开启eureka，那么我就在application-prod.yml里配上open.eureka=true，其他的yml什么也不写就行了。这样本地启动时就相当于没有开启EnableDiscoveryClient。\n","slug":"spring-boot_条件加载","published":1,"updated":"2018-10-17T06:06:24.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4s0023k4nz2beonlhf","content":"<h2 id=\"springboot根据不同的条件创建bean，动态创建bean，-Conditional注解使用\"><a href=\"#springboot根据不同的条件创建bean，动态创建bean，-Conditional注解使用\" class=\"headerlink\" title=\"springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用\"></a>springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用</h2><p>这个需求应该也比较常见，在不同的条件下创建不同的bean，具体场景很多，能看到这篇的肯定懂我的意思。<br>倘若不了解spring4.X新加入的@Conditional注解的话，要实现不同条件创建不同的bean还是比较麻烦的，可能需要硬编码一些东西做if判断。那么现在有个@Conditional注解后，事情就简单多了。用法很简单，直接上代码。<br>新建一个springboot项目，添加一个Configuration标注的类，我们通过不同的条件表达式来创建bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tianyalei.condition;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Conditional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(MyCondition.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">condition</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"自定义的condition的match方法返回值为true时，才会进入该方法创建bean\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该Abc class位于类路径上时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">abc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnClass true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @ConditionalOnClass(Abc.class)</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public Abc newAbc() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.err.println(\"ConditionalOnClass true\");</span></span><br><span class=\"line\"><span class=\"comment\">//        return new Abc();</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存在Abc类的实例时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnBean</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">bean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnBean is exist\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">missBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnBean is missing\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表达式为true时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnExpression</span>(value = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">expresssion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"expresssion is true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置文件属性是否为true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnProperty</span>(</span><br><span class=\"line\">            value = &#123;<span class=\"string\">\"abc.property\"</span>&#125;,</span><br><span class=\"line\">            matchIfMissing = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">property</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"property is true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面有个空类Abc.class，你可以就创建个叫Abc的类，里面是空的就行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前系统是Mac，Windows，Linux</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> conditionContext.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>).contains(<span class=\"string\">\"Mac\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>@Conditional(MyCondition.class)</strong><br>这句代码可以标注在类上面，表示该类下面的所有@Bean都会启用配置<br>也可以标注在方法上面，只是对该方法启用配置</p>\n<p>除了自己自定义Condition之外，Spring还提供了很多Condition给我们用<br><strong>@ConditionalOnBean</strong>（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）<br><strong>@ConditionalOnClass</strong>（某个class位于类路径上，才会实例化一个Bean）<br><strong>@ConditionalOnExpression</strong>（当表达式为true的时候，才会实例化一个Bean）<br><strong>@ConditionalOnMissingBean</strong>（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）<br><strong>@ConditionalOnMissingClass</strong>（某个class类路径上不存在的时候，才会实例化一个Bean）<br><strong>@ConditionalOnNotWebApplication</strong>（不是web应用）<br>以上是一些常用的注解，其实就是条件判断，如果为true了就创建Bean，为false就不创建，就这么简单。<br>这些注解里的条件可以是多个，也可以赋默认值，也可以标注在类上，如果标注在类上，则对类里的所有@Bean方法都生效。<br>其中@ConditionalOnProperty是指在application.yml里配置的属性是否为true，其他的几个都是对class的判断。<br>我在配置里加上abc.property = true这个配置就可以测试上面的代码了。<br>然后再来一个对类进行多个条件标注的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tianyalei.condition;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(</span><br><span class=\"line\">        value = &#123;<span class=\"string\">\"abc.property\"</span>&#125;,</span><br><span class=\"line\">        matchIfMissing = <span class=\"keyword\">false</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(Abc.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(&#123;Abc.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"multi check\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"check\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，代码很简单，运行看看结果<br><img src=\"https://yapengwen.github.io/img/20171011114902806.jpg\" alt=\"\"><br>可能上面的那些你用的地方不常见，那我来举一个我正在使用的例子。我的应用是基于SpringCloud的，在线上部署时有eureka来做注册中心，而在本地环境下，我的应用是单机的，不需要eureka，但是代码里已经引入了eureka了，每次启动就会自动去连接eureka，然后控制台就开始报错。虽然不影响功能，但是看着一直不停的报错也是不顺眼。<br>那么我就可以使用Condition注解来解决它。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wuweifeng wrote on 2017/11/25.</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据部署环境动态决定是否启用eureka</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"open.eureka\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JudgeEnableDiscoveryClient</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我把EnableDiscoveryClient这个注解单独放个类里，里面什么也不写，条件就是application.yml里配置的open.eureka<br>如果我只想让线上的环境开启eureka，那么我就在application-prod.yml里配上open.eureka=true，其他的yml什么也不写就行了。这样本地启动时就相当于没有开启EnableDiscoveryClient。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"springboot根据不同的条件创建bean，动态创建bean，-Conditional注解使用\"><a href=\"#springboot根据不同的条件创建bean，动态创建bean，-Conditional注解使用\" class=\"headerlink\" title=\"springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用\"></a>springboot根据不同的条件创建bean，动态创建bean，@Conditional注解使用</h2><p>这个需求应该也比较常见，在不同的条件下创建不同的bean，具体场景很多，能看到这篇的肯定懂我的意思。<br>倘若不了解spring4.X新加入的@Conditional注解的话，要实现不同条件创建不同的bean还是比较麻烦的，可能需要硬编码一些东西做if判断。那么现在有个@Conditional注解后，事情就简单多了。用法很简单，直接上代码。<br>新建一个springboot项目，添加一个Configuration标注的类，我们通过不同的条件表达式来创建bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tianyalei.condition;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Conditional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(MyCondition.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">condition</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"自定义的condition的match方法返回值为true时，才会进入该方法创建bean\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该Abc class位于类路径上时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">abc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnClass true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @ConditionalOnClass(Abc.class)</span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    public Abc newAbc() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.err.println(\"ConditionalOnClass true\");</span></span><br><span class=\"line\"><span class=\"comment\">//        return new Abc();</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存在Abc类的实例时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnBean</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">bean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnBean is exist\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(Abc.class)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">missBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"ConditionalOnBean is missing\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 表达式为true时</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnExpression</span>(value = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">expresssion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"expresssion is true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置文件属性是否为true</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnProperty</span>(</span><br><span class=\"line\">            value = &#123;<span class=\"string\">\"abc.property\"</span>&#125;,</span><br><span class=\"line\">            matchIfMissing = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">property</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"property is true\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面有个空类Abc.class，你可以就创建个叫Abc的类，里面是空的就行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前系统是Mac，Windows，Linux</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> conditionContext.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>).contains(<span class=\"string\">\"Mac\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>@Conditional(MyCondition.class)</strong><br>这句代码可以标注在类上面，表示该类下面的所有@Bean都会启用配置<br>也可以标注在方法上面，只是对该方法启用配置</p>\n<p>除了自己自定义Condition之外，Spring还提供了很多Condition给我们用<br><strong>@ConditionalOnBean</strong>（仅仅在当前上下文中存在某个对象时，才会实例化一个Bean）<br><strong>@ConditionalOnClass</strong>（某个class位于类路径上，才会实例化一个Bean）<br><strong>@ConditionalOnExpression</strong>（当表达式为true的时候，才会实例化一个Bean）<br><strong>@ConditionalOnMissingBean</strong>（仅仅在当前上下文中不存在某个对象时，才会实例化一个Bean）<br><strong>@ConditionalOnMissingClass</strong>（某个class类路径上不存在的时候，才会实例化一个Bean）<br><strong>@ConditionalOnNotWebApplication</strong>（不是web应用）<br>以上是一些常用的注解，其实就是条件判断，如果为true了就创建Bean，为false就不创建，就这么简单。<br>这些注解里的条件可以是多个，也可以赋默认值，也可以标注在类上，如果标注在类上，则对类里的所有@Bean方法都生效。<br>其中@ConditionalOnProperty是指在application.yml里配置的属性是否为true，其他的几个都是对class的判断。<br>我在配置里加上abc.property = true这个配置就可以测试上面的代码了。<br>然后再来一个对类进行多个条件标注的例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tianyalei.condition;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by wuweifeng on 2017/10/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(</span><br><span class=\"line\">        value = &#123;<span class=\"string\">\"abc.property\"</span>&#125;,</span><br><span class=\"line\">        matchIfMissing = <span class=\"keyword\">false</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(Abc.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Multi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(&#123;Abc.class&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.err.println(<span class=\"string\">\"multi check\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"check\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，代码很简单，运行看看结果<br><img src=\"https://yapengwen.github.io/img/20171011114902806.jpg\" alt=\"\"><br>可能上面的那些你用的地方不常见，那我来举一个我正在使用的例子。我的应用是基于SpringCloud的，在线上部署时有eureka来做注册中心，而在本地环境下，我的应用是单机的，不需要eureka，但是代码里已经引入了eureka了，每次启动就会自动去连接eureka，然后控制台就开始报错。虽然不影响功能，但是看着一直不停的报错也是不顺眼。<br>那么我就可以使用Condition注解来解决它。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wuweifeng wrote on 2017/11/25.</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据部署环境动态决定是否启用eureka</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"open.eureka\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JudgeEnableDiscoveryClient</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我把EnableDiscoveryClient这个注解单独放个类里，里面什么也不写，条件就是application.yml里配置的open.eureka<br>如果我只想让线上的环境开启eureka，那么我就在application-prod.yml里配上open.eureka=true，其他的yml什么也不写就行了。这样本地启动时就相当于没有开启EnableDiscoveryClient。</p>\n"},{"title":"用Visio画UML顺序图","date":"2017-10-16T05:00:00.000Z","_content":"\n1、顺序图\n\n  顺序图又称为时序图，顾名思义，它着重表现的是对象间消息传递的时间顺序。顺序图描述的对象也是一个用例，即一组行为操作，而它表现的是这组行为的先后关系（纵坐标），以及每个行为是属于哪个对象的（横坐标）。\n\n  作用：用对象间的交互来描述用例。\n\n  组成成分：参与者、对象\n\n                对象的生命线：用于表示某段时间内该对象是存在的，表示对象的生存时间。\n\n                消息：表示对象间的通信。当收到消息后，接收消息的对象立即开始执行活动，起到激活对象的作用。通常用消息名和参数表来标识。\n\n  横坐标：表示不同的对象。对象的左右顺序不重要，但是为了整洁清晰，应该遵循以下两个原则：（观点来自于[http://www.lupaworld.com/article-233409-1.html](http://note.youdao.com/)）\n\n    （1）把交互频繁的对象尽可能地靠拢。\n\n    （2）把初始化整个交互活动的对象（有时是一个参与者）放置在最左边。\n\n 纵坐标：表示行为的先后关系。在图上方的消息在时间上先于下方的消息，消息的阅读顺序是严格自上而下的。\n\n下面以银行储蓄系统为例：\n\n![](http://images2015.cnblogs.com/blog/897468/201605/897468-20160503183625794-805781358.jpg)\n\n参与者：储户、业务员\n\n对象：窗口类（Windows）的对象表单（form）、账户类（Account）的对象、取款记录类（WithdrawRecord）的对象。\n\n消息：\n\n1）首先业务员向表单对象发送消息：inputWithdrawInfo（输入取款信息）；\n\n2）表单对象接收到消息后向账户对象发送消息：withdraw（取款），消息含有参数：accountNo（账户编号）、amount（取款数量）；\n\n3）账户对象接收消息后向自己发送消息，激活自己的行为活动：checkBalance（查询余额）,消息含有参数：accountNo（账户编号）、amount（取款数量）；\n\n4）接下来账户对象向窗口对象（表单）发送返回消息：requestPassword（要求输入密码）；\n\n5）储户输入密码后，向账户对象发送消息：checkPassword（请求检验密码），消息含有参数：pwd（密码）；\n\n6）账户对象检查密码后，如果密码正确，则回馈给储户密码正确的信息（return true）；\n\n7）、8）账户对象向自身发送信息，激活自身的行为：compInterest（计算利息）、compBalance（计算账户余额）；\n\n9）账户对象向取款记录对象发送消息：addRecord（增加记录），消息参数有：accountNo（账户编号）、amount（取款数量）、interest（利息）；\n\n10）如果添加记录成功，取款记录对象向账户对象返回正确的消息（return true）；\n\n11）如果账户对象收到正确的消息，则向业务员返回正确的消息（return true）。\n\n2、用Visio画UML顺序图\n\n（1）打开Visio 2010软件\n\n（2）点击“新建”->“软件和数据库”->“UML模型图”。\n\n（3）在“模型资源管理器”中右击“顶层包”或者先新建一个子系统，“新建”->“序列图”\n\n（4）下面就可以拖拽各种组件来构建自己的顺序图了。\n\n 其中“参与者”在“UML用例”中可以找到，其他的组件都在“UML序列”中可以找到。\n\n如果想更改对象或者消息的名称，则双击绘制屏幕上的组件，输入信息即可。","source":"_posts/用Visio画UML顺序图.md","raw":"---\ntitle: 用Visio画UML顺序图\ndate: 2017-10-16 13:00:00\ntags: uml\ncategories: 流程图\n---\n\n1、顺序图\n\n  顺序图又称为时序图，顾名思义，它着重表现的是对象间消息传递的时间顺序。顺序图描述的对象也是一个用例，即一组行为操作，而它表现的是这组行为的先后关系（纵坐标），以及每个行为是属于哪个对象的（横坐标）。\n\n  作用：用对象间的交互来描述用例。\n\n  组成成分：参与者、对象\n\n                对象的生命线：用于表示某段时间内该对象是存在的，表示对象的生存时间。\n\n                消息：表示对象间的通信。当收到消息后，接收消息的对象立即开始执行活动，起到激活对象的作用。通常用消息名和参数表来标识。\n\n  横坐标：表示不同的对象。对象的左右顺序不重要，但是为了整洁清晰，应该遵循以下两个原则：（观点来自于[http://www.lupaworld.com/article-233409-1.html](http://note.youdao.com/)）\n\n    （1）把交互频繁的对象尽可能地靠拢。\n\n    （2）把初始化整个交互活动的对象（有时是一个参与者）放置在最左边。\n\n 纵坐标：表示行为的先后关系。在图上方的消息在时间上先于下方的消息，消息的阅读顺序是严格自上而下的。\n\n下面以银行储蓄系统为例：\n\n![](http://images2015.cnblogs.com/blog/897468/201605/897468-20160503183625794-805781358.jpg)\n\n参与者：储户、业务员\n\n对象：窗口类（Windows）的对象表单（form）、账户类（Account）的对象、取款记录类（WithdrawRecord）的对象。\n\n消息：\n\n1）首先业务员向表单对象发送消息：inputWithdrawInfo（输入取款信息）；\n\n2）表单对象接收到消息后向账户对象发送消息：withdraw（取款），消息含有参数：accountNo（账户编号）、amount（取款数量）；\n\n3）账户对象接收消息后向自己发送消息，激活自己的行为活动：checkBalance（查询余额）,消息含有参数：accountNo（账户编号）、amount（取款数量）；\n\n4）接下来账户对象向窗口对象（表单）发送返回消息：requestPassword（要求输入密码）；\n\n5）储户输入密码后，向账户对象发送消息：checkPassword（请求检验密码），消息含有参数：pwd（密码）；\n\n6）账户对象检查密码后，如果密码正确，则回馈给储户密码正确的信息（return true）；\n\n7）、8）账户对象向自身发送信息，激活自身的行为：compInterest（计算利息）、compBalance（计算账户余额）；\n\n9）账户对象向取款记录对象发送消息：addRecord（增加记录），消息参数有：accountNo（账户编号）、amount（取款数量）、interest（利息）；\n\n10）如果添加记录成功，取款记录对象向账户对象返回正确的消息（return true）；\n\n11）如果账户对象收到正确的消息，则向业务员返回正确的消息（return true）。\n\n2、用Visio画UML顺序图\n\n（1）打开Visio 2010软件\n\n（2）点击“新建”->“软件和数据库”->“UML模型图”。\n\n（3）在“模型资源管理器”中右击“顶层包”或者先新建一个子系统，“新建”->“序列图”\n\n（4）下面就可以拖拽各种组件来构建自己的顺序图了。\n\n 其中“参与者”在“UML用例”中可以找到，其他的组件都在“UML序列”中可以找到。\n\n如果想更改对象或者消息的名称，则双击绘制屏幕上的组件，输入信息即可。","slug":"用Visio画UML顺序图","published":1,"updated":"2018-10-17T05:48:51.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4u0026k4nzz8uw35tp","content":"<p>1、顺序图</p>\n<p>  顺序图又称为时序图，顾名思义，它着重表现的是对象间消息传递的时间顺序。顺序图描述的对象也是一个用例，即一组行为操作，而它表现的是这组行为的先后关系（纵坐标），以及每个行为是属于哪个对象的（横坐标）。</p>\n<p>  作用：用对象间的交互来描述用例。</p>\n<p>  组成成分：参与者、对象</p>\n<pre><code>对象的生命线：用于表示某段时间内该对象是存在的，表示对象的生存时间。\n\n消息：表示对象间的通信。当收到消息后，接收消息的对象立即开始执行活动，起到激活对象的作用。通常用消息名和参数表来标识。\n</code></pre><p>  横坐标：表示不同的对象。对象的左右顺序不重要，但是为了整洁清晰，应该遵循以下两个原则：（观点来自于<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">http://www.lupaworld.com/article-233409-1.html</a>）</p>\n<pre><code>（1）把交互频繁的对象尽可能地靠拢。\n\n（2）把初始化整个交互活动的对象（有时是一个参与者）放置在最左边。\n</code></pre><p> 纵坐标：表示行为的先后关系。在图上方的消息在时间上先于下方的消息，消息的阅读顺序是严格自上而下的。</p>\n<p>下面以银行储蓄系统为例：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/897468/201605/897468-20160503183625794-805781358.jpg\" alt=\"\"></p>\n<p>参与者：储户、业务员</p>\n<p>对象：窗口类（Windows）的对象表单（form）、账户类（Account）的对象、取款记录类（WithdrawRecord）的对象。</p>\n<p>消息：</p>\n<p>1）首先业务员向表单对象发送消息：inputWithdrawInfo（输入取款信息）；</p>\n<p>2）表单对象接收到消息后向账户对象发送消息：withdraw（取款），消息含有参数：accountNo（账户编号）、amount（取款数量）；</p>\n<p>3）账户对象接收消息后向自己发送消息，激活自己的行为活动：checkBalance（查询余额）,消息含有参数：accountNo（账户编号）、amount（取款数量）；</p>\n<p>4）接下来账户对象向窗口对象（表单）发送返回消息：requestPassword（要求输入密码）；</p>\n<p>5）储户输入密码后，向账户对象发送消息：checkPassword（请求检验密码），消息含有参数：pwd（密码）；</p>\n<p>6）账户对象检查密码后，如果密码正确，则回馈给储户密码正确的信息（return true）；</p>\n<p>7）、8）账户对象向自身发送信息，激活自身的行为：compInterest（计算利息）、compBalance（计算账户余额）；</p>\n<p>9）账户对象向取款记录对象发送消息：addRecord（增加记录），消息参数有：accountNo（账户编号）、amount（取款数量）、interest（利息）；</p>\n<p>10）如果添加记录成功，取款记录对象向账户对象返回正确的消息（return true）；</p>\n<p>11）如果账户对象收到正确的消息，则向业务员返回正确的消息（return true）。</p>\n<p>2、用Visio画UML顺序图</p>\n<p>（1）打开Visio 2010软件</p>\n<p>（2）点击“新建”-&gt;“软件和数据库”-&gt;“UML模型图”。</p>\n<p>（3）在“模型资源管理器”中右击“顶层包”或者先新建一个子系统，“新建”-&gt;“序列图”</p>\n<p>（4）下面就可以拖拽各种组件来构建自己的顺序图了。</p>\n<p> 其中“参与者”在“UML用例”中可以找到，其他的组件都在“UML序列”中可以找到。</p>\n<p>如果想更改对象或者消息的名称，则双击绘制屏幕上的组件，输入信息即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、顺序图</p>\n<p>  顺序图又称为时序图，顾名思义，它着重表现的是对象间消息传递的时间顺序。顺序图描述的对象也是一个用例，即一组行为操作，而它表现的是这组行为的先后关系（纵坐标），以及每个行为是属于哪个对象的（横坐标）。</p>\n<p>  作用：用对象间的交互来描述用例。</p>\n<p>  组成成分：参与者、对象</p>\n<pre><code>对象的生命线：用于表示某段时间内该对象是存在的，表示对象的生存时间。\n\n消息：表示对象间的通信。当收到消息后，接收消息的对象立即开始执行活动，起到激活对象的作用。通常用消息名和参数表来标识。\n</code></pre><p>  横坐标：表示不同的对象。对象的左右顺序不重要，但是为了整洁清晰，应该遵循以下两个原则：（观点来自于<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">http://www.lupaworld.com/article-233409-1.html</a>）</p>\n<pre><code>（1）把交互频繁的对象尽可能地靠拢。\n\n（2）把初始化整个交互活动的对象（有时是一个参与者）放置在最左边。\n</code></pre><p> 纵坐标：表示行为的先后关系。在图上方的消息在时间上先于下方的消息，消息的阅读顺序是严格自上而下的。</p>\n<p>下面以银行储蓄系统为例：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/897468/201605/897468-20160503183625794-805781358.jpg\" alt=\"\"></p>\n<p>参与者：储户、业务员</p>\n<p>对象：窗口类（Windows）的对象表单（form）、账户类（Account）的对象、取款记录类（WithdrawRecord）的对象。</p>\n<p>消息：</p>\n<p>1）首先业务员向表单对象发送消息：inputWithdrawInfo（输入取款信息）；</p>\n<p>2）表单对象接收到消息后向账户对象发送消息：withdraw（取款），消息含有参数：accountNo（账户编号）、amount（取款数量）；</p>\n<p>3）账户对象接收消息后向自己发送消息，激活自己的行为活动：checkBalance（查询余额）,消息含有参数：accountNo（账户编号）、amount（取款数量）；</p>\n<p>4）接下来账户对象向窗口对象（表单）发送返回消息：requestPassword（要求输入密码）；</p>\n<p>5）储户输入密码后，向账户对象发送消息：checkPassword（请求检验密码），消息含有参数：pwd（密码）；</p>\n<p>6）账户对象检查密码后，如果密码正确，则回馈给储户密码正确的信息（return true）；</p>\n<p>7）、8）账户对象向自身发送信息，激活自身的行为：compInterest（计算利息）、compBalance（计算账户余额）；</p>\n<p>9）账户对象向取款记录对象发送消息：addRecord（增加记录），消息参数有：accountNo（账户编号）、amount（取款数量）、interest（利息）；</p>\n<p>10）如果添加记录成功，取款记录对象向账户对象返回正确的消息（return true）；</p>\n<p>11）如果账户对象收到正确的消息，则向业务员返回正确的消息（return true）。</p>\n<p>2、用Visio画UML顺序图</p>\n<p>（1）打开Visio 2010软件</p>\n<p>（2）点击“新建”-&gt;“软件和数据库”-&gt;“UML模型图”。</p>\n<p>（3）在“模型资源管理器”中右击“顶层包”或者先新建一个子系统，“新建”-&gt;“序列图”</p>\n<p>（4）下面就可以拖拽各种组件来构建自己的顺序图了。</p>\n<p> 其中“参与者”在“UML用例”中可以找到，其他的组件都在“UML序列”中可以找到。</p>\n<p>如果想更改对象或者消息的名称，则双击绘制屏幕上的组件，输入信息即可。</p>\n"},{"title":"关于RabbitMQ以及RabbitMQ和Spring的整合","date":"2017-12-15T09:00:00.000Z","_content":"\n##### 一、maven依赖\n\n\n```\n<!--rabbitmq依赖 -->  \n        <dependency>  \n            <groupId>org.springframework.amqp</groupId>  \n            <artifactId>spring-rabbit</artifactId>  \n            <version>1.3.5.RELEASE</version>  \n        </dependency>  \n```\n\n##### 二、消费端spring-rabbitmq.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xmlns:rabbit=\"http://www.springframework.org/schema/rabbit\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\n    http://www.springframework.org/schema/rabbit  \n    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd\">\n\n\t<!--配置connection-factory，指定连接rabbit server参数 -->\n\t<rabbit:connection-factory id=\"connectionFactory\"\n\t\tvirtual-host=\"${rabbitmq.virtualhost}\" username=\"${rabbitmq.username}\"\n\t\tpassword=\"${rabbitmq.password}\" host=\"${rabbitmq.host}\" port=\"${rabbitmq.port}\" />\n\n\t<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->\n\t<rabbit:admin id=\"connectAdmin\" connection-factory=\"connectionFactory\" />\n\n\t<!--定义queue -->\n\t<rabbit:queue name=\"${rabbitmq.queue}\" durable=\"true\" auto-delete=\"false\"\n\t\texclusive=\"false\" declared-by=\"connectAdmin\" />\n\n\t<!-- 定义direct exchange，绑定queueTest -->\n\t<!-- <rabbit:direct-exchange name=\"${rabbitmq.direct.exchange}\"\n\t\tdurable=\"true\" auto-delete=\"false\" declared-by=\"connectAdmin\">\n\t\t<rabbit:bindings>\n\t\t\t<rabbit:binding queue=\"${rabbitmq.queue}\" key=\"${rabbitmq.queue.queueKey}\"></rabbit:binding>\n\t\t</rabbit:bindings>\n\t</rabbit:direct-exchange> -->\n\n\t<!--定义rabbit template用于数据的接收和发送 -->\n\t<!-- <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n\t\texchange=\"${rabbitmq.direct.exchange}\" /> -->\n\n\t<!-- 消息接收者 -->\n\t<bean id=\"messageReceiver\"\n\t\tclass=\"com.showshine.pullq.rabbitmq.OfflineRabbitMessageListener\"></bean>\n\n\t<!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->\n\t<rabbit:listener-container\n\t\tconnection-factory=\"connectionFactory\">\n\t\t<rabbit:listener queues=\"${rabbitmq.queue}\" ref=\"messageReceiver\" />\n\t</rabbit:listener-container>\n\n</beans>\n```\n##### 三、生产spring-rabbitmq.xml\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\n    http://www.springframework.org/schema/rabbit  \n    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd\">\n\n\t<!--配置connection-factory，指定连接rabbit server参数 -->\n    <rabbit:connection-factory id=\"connectionFactory\" virtual-host=\"virtualTest\" \n        username=\"user\" password=\"user\" host=\"192.168.12.210\" port=\"5672\" \n        />\n\n    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->\n    <rabbit:admin id=\"connectAdmin\" connection-factory=\"connectionFactory\" />\n\n    <!-- 定义direct exchange，绑定queueTest -->\n    <rabbit:direct-exchange name=\"rabbitmqexch\"\n        durable=\"true\" auto-delete=\"false\" declared-by=\"connectAdmin\">\n    </rabbit:direct-exchange>\n\n    <!--定义rabbit template用于数据的接收和发送 -->\n    <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n        exchange=\"rabbitmqexch\" />\n\n\n</beans>\n```\n##### 四、rabbitmq.properties\n\n```\nrabbitmq.virtualhost=virtualTest\nrabbitmq.username=user\nrabbitmq.password=user\nrabbitmq.host=127.0.0.1\nrabbitmq.port=5672\nrabbitmq.queue=rabbitque\nrabbitmq.queue.queueKey=queueTestKey\nrabbitmq.direct.exchange=rabbitmqexch\n```\n五、接收端RabbitMessageListener监听类\n\n```\npackage com.showshine.pullq.rabbitmq;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.core.MessageListener;\n\n\n/**\n * <dl>\n * <dt><b>类功能概要：</b></dt>\n * <dd>信贷业务：rocketmq消费端-线下转线上</dd>\n * <dd></dd>\n * </dl>\n * \n * @copyright Copyright 2017,(C)The Trustrock Co.Ltd. All right reserved.\n * @since 1.6\n * @version <pre>\n * Version  Date                          Company    Author         Case-Name\n * -------  ------------------------      ---------  -------------  --------------\n * 1.00     2017年12月15日 上午11:54:23     Trustrock  wenyapeng      RocketMessageListener \n * \n * </pre>\n */\npublic class OfflineRabbitMessageListener implements MessageListener{\n\t\n\tprivate static Logger logger = Logger.getLogger(OfflineRabbitMessageListener.class);\n\n\n\t@Override\n    public void onMessage(Message message) {\n         logger.info(\"consumer receive message------->:{}\" + message);  \n        \n    }\n\n\t\n}\n\n```\n\n##### 六、发送端\n\n\n```\npackage com.aliyun.openservices.client;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class RabbitmqTest {\n\n\tprivate AmqpTemplate amqpTemplate;\n\n\tprivate ApplicationContext context = null;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tcontext = new ClassPathXmlApplicationContext(\"spring-rabbitmq.xml\");\n\t}\n\n\t@Test\n\tpublic void should_send_a_amq_message() throws Exception {\n\t\tamqpTemplate = (AmqpTemplate) context.getBean(\"amqpTemplate\");\n\t\tint a = 2;\n\t\twhile (a > 0) {\n\t\t\tamqpTemplate.convertAndSend(\"queueTestKey\", \"wqwqw\" + a--);\n\t\t\ttry {\n\t\t\t\t// 暂停一下，好让消息消费者去取消息打印出来\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t}\n\t}\n\n}\n\n```\n\n\n[参考https://www.cnblogs.com/s648667069/p/6401463.html](https://www.cnblogs.com/s648667069/p/6401463.html)","source":"_posts/关于rabbitmq以及rabbitmq和spring的整合.md","raw":"---\ntitle: 关于RabbitMQ以及RabbitMQ和Spring的整合\ndate: 2017-12-15 17:00:00\ntags: [RabbitMQ,spring]\ncategories: MQ\n---\n\n##### 一、maven依赖\n\n\n```\n<!--rabbitmq依赖 -->  \n        <dependency>  \n            <groupId>org.springframework.amqp</groupId>  \n            <artifactId>spring-rabbit</artifactId>  \n            <version>1.3.5.RELEASE</version>  \n        </dependency>  \n```\n\n##### 二、消费端spring-rabbitmq.xml\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xmlns:rabbit=\"http://www.springframework.org/schema/rabbit\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\n    http://www.springframework.org/schema/rabbit  \n    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd\">\n\n\t<!--配置connection-factory，指定连接rabbit server参数 -->\n\t<rabbit:connection-factory id=\"connectionFactory\"\n\t\tvirtual-host=\"${rabbitmq.virtualhost}\" username=\"${rabbitmq.username}\"\n\t\tpassword=\"${rabbitmq.password}\" host=\"${rabbitmq.host}\" port=\"${rabbitmq.port}\" />\n\n\t<!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->\n\t<rabbit:admin id=\"connectAdmin\" connection-factory=\"connectionFactory\" />\n\n\t<!--定义queue -->\n\t<rabbit:queue name=\"${rabbitmq.queue}\" durable=\"true\" auto-delete=\"false\"\n\t\texclusive=\"false\" declared-by=\"connectAdmin\" />\n\n\t<!-- 定义direct exchange，绑定queueTest -->\n\t<!-- <rabbit:direct-exchange name=\"${rabbitmq.direct.exchange}\"\n\t\tdurable=\"true\" auto-delete=\"false\" declared-by=\"connectAdmin\">\n\t\t<rabbit:bindings>\n\t\t\t<rabbit:binding queue=\"${rabbitmq.queue}\" key=\"${rabbitmq.queue.queueKey}\"></rabbit:binding>\n\t\t</rabbit:bindings>\n\t</rabbit:direct-exchange> -->\n\n\t<!--定义rabbit template用于数据的接收和发送 -->\n\t<!-- <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n\t\texchange=\"${rabbitmq.direct.exchange}\" /> -->\n\n\t<!-- 消息接收者 -->\n\t<bean id=\"messageReceiver\"\n\t\tclass=\"com.showshine.pullq.rabbitmq.OfflineRabbitMessageListener\"></bean>\n\n\t<!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->\n\t<rabbit:listener-container\n\t\tconnection-factory=\"connectionFactory\">\n\t\t<rabbit:listener queues=\"${rabbitmq.queue}\" ref=\"messageReceiver\" />\n\t</rabbit:listener-container>\n\n</beans>\n```\n##### 三、生产spring-rabbitmq.xml\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:rabbit=\"http://www.springframework.org/schema/rabbit\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\n    http://www.springframework.org/schema/rabbit  \n    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd\">\n\n\t<!--配置connection-factory，指定连接rabbit server参数 -->\n    <rabbit:connection-factory id=\"connectionFactory\" virtual-host=\"virtualTest\" \n        username=\"user\" password=\"user\" host=\"192.168.12.210\" port=\"5672\" \n        />\n\n    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->\n    <rabbit:admin id=\"connectAdmin\" connection-factory=\"connectionFactory\" />\n\n    <!-- 定义direct exchange，绑定queueTest -->\n    <rabbit:direct-exchange name=\"rabbitmqexch\"\n        durable=\"true\" auto-delete=\"false\" declared-by=\"connectAdmin\">\n    </rabbit:direct-exchange>\n\n    <!--定义rabbit template用于数据的接收和发送 -->\n    <rabbit:template id=\"amqpTemplate\" connection-factory=\"connectionFactory\"\n        exchange=\"rabbitmqexch\" />\n\n\n</beans>\n```\n##### 四、rabbitmq.properties\n\n```\nrabbitmq.virtualhost=virtualTest\nrabbitmq.username=user\nrabbitmq.password=user\nrabbitmq.host=127.0.0.1\nrabbitmq.port=5672\nrabbitmq.queue=rabbitque\nrabbitmq.queue.queueKey=queueTestKey\nrabbitmq.direct.exchange=rabbitmqexch\n```\n五、接收端RabbitMessageListener监听类\n\n```\npackage com.showshine.pullq.rabbitmq;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.core.MessageListener;\n\n\n/**\n * <dl>\n * <dt><b>类功能概要：</b></dt>\n * <dd>信贷业务：rocketmq消费端-线下转线上</dd>\n * <dd></dd>\n * </dl>\n * \n * @copyright Copyright 2017,(C)The Trustrock Co.Ltd. All right reserved.\n * @since 1.6\n * @version <pre>\n * Version  Date                          Company    Author         Case-Name\n * -------  ------------------------      ---------  -------------  --------------\n * 1.00     2017年12月15日 上午11:54:23     Trustrock  wenyapeng      RocketMessageListener \n * \n * </pre>\n */\npublic class OfflineRabbitMessageListener implements MessageListener{\n\t\n\tprivate static Logger logger = Logger.getLogger(OfflineRabbitMessageListener.class);\n\n\n\t@Override\n    public void onMessage(Message message) {\n         logger.info(\"consumer receive message------->:{}\" + message);  \n        \n    }\n\n\t\n}\n\n```\n\n##### 六、发送端\n\n\n```\npackage com.aliyun.openservices.client;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class RabbitmqTest {\n\n\tprivate AmqpTemplate amqpTemplate;\n\n\tprivate ApplicationContext context = null;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tcontext = new ClassPathXmlApplicationContext(\"spring-rabbitmq.xml\");\n\t}\n\n\t@Test\n\tpublic void should_send_a_amq_message() throws Exception {\n\t\tamqpTemplate = (AmqpTemplate) context.getBean(\"amqpTemplate\");\n\t\tint a = 2;\n\t\twhile (a > 0) {\n\t\t\tamqpTemplate.convertAndSend(\"queueTestKey\", \"wqwqw\" + a--);\n\t\t\ttry {\n\t\t\t\t// 暂停一下，好让消息消费者去取消息打印出来\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t}\n\t}\n\n}\n\n```\n\n\n[参考https://www.cnblogs.com/s648667069/p/6401463.html](https://www.cnblogs.com/s648667069/p/6401463.html)","slug":"关于rabbitmq以及rabbitmq和spring的整合","published":1,"updated":"2018-10-17T05:48:51.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr4v0029k4nzsky1pgcy","content":"<h5 id=\"一、maven依赖\"><a href=\"#一、maven依赖\" class=\"headerlink\" title=\"一、maven依赖\"></a>一、maven依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--rabbitmq依赖 --&gt;  </span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;  </span><br><span class=\"line\">            &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;  </span><br><span class=\"line\">            &lt;version&gt;1.3.5.RELEASE&lt;/version&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"二、消费端spring-rabbitmq-xml\"><a href=\"#二、消费端spring-rabbitmq-xml\" class=\"headerlink\" title=\"二、消费端spring-rabbitmq.xml\"></a>二、消费端spring-rabbitmq.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot; xmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">    http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit  </span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--配置connection-factory，指定连接rabbit server参数 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tvirtual-host=&quot;$&#123;rabbitmq.virtualhost&#125;&quot; username=&quot;$&#123;rabbitmq.username&#125;&quot;</span><br><span class=\"line\">\t\tpassword=&quot;$&#123;rabbitmq.password&#125;&quot; host=&quot;$&#123;rabbitmq.host&#125;&quot; port=&quot;$&#123;rabbitmq.port&#125;&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:admin id=&quot;connectAdmin&quot; connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--定义queue --&gt;</span><br><span class=\"line\">\t&lt;rabbit:queue name=&quot;$&#123;rabbitmq.queue&#125;&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;</span><br><span class=\"line\">\t\texclusive=&quot;false&quot; declared-by=&quot;connectAdmin&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 定义direct exchange，绑定queueTest --&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;rabbit:direct-exchange name=&quot;$&#123;rabbitmq.direct.exchange&#125;&quot;</span><br><span class=\"line\">\t\tdurable=&quot;true&quot; auto-delete=&quot;false&quot; declared-by=&quot;connectAdmin&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;$&#123;rabbitmq.queue&#125;&quot; key=&quot;$&#123;rabbitmq.queue.queueKey&#125;&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">\t\t&lt;/rabbit:bindings&gt;</span><br><span class=\"line\">\t&lt;/rabbit:direct-exchange&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--定义rabbit template用于数据的接收和发送 --&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;$&#123;rabbitmq.direct.exchange&#125;&quot; /&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 消息接收者 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;messageReceiver&quot;</span><br><span class=\"line\">\t\tclass=&quot;com.showshine.pullq.rabbitmq.OfflineRabbitMessageListener&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;$&#123;rabbitmq.queue&#125;&quot; ref=&quot;messageReceiver&quot; /&gt;</span><br><span class=\"line\">\t&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、生产spring-rabbitmq-xml\"><a href=\"#三、生产spring-rabbitmq-xml\" class=\"headerlink\" title=\"三、生产spring-rabbitmq.xml\"></a>三、生产spring-rabbitmq.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">    http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit  </span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--配置connection-factory，指定连接rabbit server参数 --&gt;</span><br><span class=\"line\">    &lt;rabbit:connection-factory id=&quot;connectionFactory&quot; virtual-host=&quot;virtualTest&quot; </span><br><span class=\"line\">        username=&quot;user&quot; password=&quot;user&quot; host=&quot;192.168.12.210&quot; port=&quot;5672&quot; </span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 --&gt;</span><br><span class=\"line\">    &lt;rabbit:admin id=&quot;connectAdmin&quot; connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 定义direct exchange，绑定queueTest --&gt;</span><br><span class=\"line\">    &lt;rabbit:direct-exchange name=&quot;rabbitmqexch&quot;</span><br><span class=\"line\">        durable=&quot;true&quot; auto-delete=&quot;false&quot; declared-by=&quot;connectAdmin&quot;&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义rabbit template用于数据的接收和发送 --&gt;</span><br><span class=\"line\">    &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">        exchange=&quot;rabbitmqexch&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"四、rabbitmq-properties\"><a href=\"#四、rabbitmq-properties\" class=\"headerlink\" title=\"四、rabbitmq.properties\"></a>四、rabbitmq.properties</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq.virtualhost=virtualTest</span><br><span class=\"line\">rabbitmq.username=user</span><br><span class=\"line\">rabbitmq.password=user</span><br><span class=\"line\">rabbitmq.host=127.0.0.1</span><br><span class=\"line\">rabbitmq.port=5672</span><br><span class=\"line\">rabbitmq.queue=rabbitque</span><br><span class=\"line\">rabbitmq.queue.queueKey=queueTestKey</span><br><span class=\"line\">rabbitmq.direct.exchange=rabbitmqexch</span><br></pre></td></tr></table></figure>\n<p>五、接收端RabbitMessageListener监听类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.showshine.pullq.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import org.springframework.amqp.core.Message;</span><br><span class=\"line\">import org.springframework.amqp.core.MessageListener;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * &lt;dl&gt;</span><br><span class=\"line\"> * &lt;dt&gt;&lt;b&gt;类功能概要：&lt;/b&gt;&lt;/dt&gt;</span><br><span class=\"line\"> * &lt;dd&gt;信贷业务：rocketmq消费端-线下转线上&lt;/dd&gt;</span><br><span class=\"line\"> * &lt;dd&gt;&lt;/dd&gt;</span><br><span class=\"line\"> * &lt;/dl&gt;</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @copyright Copyright 2017,(C)The Trustrock Co.Ltd. All right reserved.</span><br><span class=\"line\"> * @since 1.6</span><br><span class=\"line\"> * @version &lt;pre&gt;</span><br><span class=\"line\"> * Version  Date                          Company    Author         Case-Name</span><br><span class=\"line\"> * -------  ------------------------      ---------  -------------  --------------</span><br><span class=\"line\"> * 1.00     2017年12月15日 上午11:54:23     Trustrock  wenyapeng      RocketMessageListener </span><br><span class=\"line\"> * </span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OfflineRabbitMessageListener implements MessageListener&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static Logger logger = Logger.getLogger(OfflineRabbitMessageListener.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">    public void onMessage(Message message) &#123;</span><br><span class=\"line\">         logger.info(&quot;consumer receive message-------&gt;:&#123;&#125;&quot; + message);  </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"六、发送端\"><a href=\"#六、发送端\" class=\"headerlink\" title=\"六、发送端\"></a>六、发送端</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.aliyun.openservices.client;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RabbitmqTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate ApplicationContext context = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Before</span><br><span class=\"line\">\tpublic void setUp() throws Exception &#123;</span><br><span class=\"line\">\t\tcontext = new ClassPathXmlApplicationContext(&quot;spring-rabbitmq.xml&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void should_send_a_amq_message() throws Exception &#123;</span><br><span class=\"line\">\t\tamqpTemplate = (AmqpTemplate) context.getBean(&quot;amqpTemplate&quot;);</span><br><span class=\"line\">\t\tint a = 2;</span><br><span class=\"line\">\t\twhile (a &gt; 0) &#123;</span><br><span class=\"line\">\t\t\tamqpTemplate.convertAndSend(&quot;queueTestKey&quot;, &quot;wqwqw&quot; + a--);</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t// 暂停一下，好让消息消费者去取消息打印出来</span><br><span class=\"line\">\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/s648667069/p/6401463.html\" target=\"_blank\" rel=\"noopener\">参考https://www.cnblogs.com/s648667069/p/6401463.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、maven依赖\"><a href=\"#一、maven依赖\" class=\"headerlink\" title=\"一、maven依赖\"></a>一、maven依赖</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--rabbitmq依赖 --&gt;  </span><br><span class=\"line\">        &lt;dependency&gt;  </span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;  </span><br><span class=\"line\">            &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;  </span><br><span class=\"line\">            &lt;version&gt;1.3.5.RELEASE&lt;/version&gt;  </span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"二、消费端spring-rabbitmq-xml\"><a href=\"#二、消费端spring-rabbitmq-xml\" class=\"headerlink\" title=\"二、消费端spring-rabbitmq.xml\"></a>二、消费端spring-rabbitmq.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot; xmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">    http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit  </span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--配置connection-factory，指定连接rabbit server参数 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:connection-factory id=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\tvirtual-host=&quot;$&#123;rabbitmq.virtualhost&#125;&quot; username=&quot;$&#123;rabbitmq.username&#125;&quot;</span><br><span class=\"line\">\t\tpassword=&quot;$&#123;rabbitmq.password&#125;&quot; host=&quot;$&#123;rabbitmq.host&#125;&quot; port=&quot;$&#123;rabbitmq.port&#125;&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:admin id=&quot;connectAdmin&quot; connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--定义queue --&gt;</span><br><span class=\"line\">\t&lt;rabbit:queue name=&quot;$&#123;rabbitmq.queue&#125;&quot; durable=&quot;true&quot; auto-delete=&quot;false&quot;</span><br><span class=\"line\">\t\texclusive=&quot;false&quot; declared-by=&quot;connectAdmin&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 定义direct exchange，绑定queueTest --&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;rabbit:direct-exchange name=&quot;$&#123;rabbitmq.direct.exchange&#125;&quot;</span><br><span class=\"line\">\t\tdurable=&quot;true&quot; auto-delete=&quot;false&quot; declared-by=&quot;connectAdmin&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:bindings&gt;</span><br><span class=\"line\">\t\t\t&lt;rabbit:binding queue=&quot;$&#123;rabbitmq.queue&#125;&quot; key=&quot;$&#123;rabbitmq.queue.queueKey&#125;&quot;&gt;&lt;/rabbit:binding&gt;</span><br><span class=\"line\">\t\t&lt;/rabbit:bindings&gt;</span><br><span class=\"line\">\t&lt;/rabbit:direct-exchange&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--定义rabbit template用于数据的接收和发送 --&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">\t\texchange=&quot;$&#123;rabbitmq.direct.exchange&#125;&quot; /&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 消息接收者 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;messageReceiver&quot;</span><br><span class=\"line\">\t\tclass=&quot;com.showshine.pullq.rabbitmq.OfflineRabbitMessageListener&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 --&gt;</span><br><span class=\"line\">\t&lt;rabbit:listener-container</span><br><span class=\"line\">\t\tconnection-factory=&quot;connectionFactory&quot;&gt;</span><br><span class=\"line\">\t\t&lt;rabbit:listener queues=&quot;$&#123;rabbitmq.queue&#125;&quot; ref=&quot;messageReceiver&quot; /&gt;</span><br><span class=\"line\">\t&lt;/rabbit:listener-container&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、生产spring-rabbitmq-xml\"><a href=\"#三、生产spring-rabbitmq-xml\" class=\"headerlink\" title=\"三、生产spring-rabbitmq.xml\"></a>三、生产spring-rabbitmq.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:rabbit=&quot;http://www.springframework.org/schema/rabbit&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/context</span><br><span class=\"line\">    http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit  </span><br><span class=\"line\">    http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--配置connection-factory，指定连接rabbit server参数 --&gt;</span><br><span class=\"line\">    &lt;rabbit:connection-factory id=&quot;connectionFactory&quot; virtual-host=&quot;virtualTest&quot; </span><br><span class=\"line\">        username=&quot;user&quot; password=&quot;user&quot; host=&quot;192.168.12.210&quot; port=&quot;5672&quot; </span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 --&gt;</span><br><span class=\"line\">    &lt;rabbit:admin id=&quot;connectAdmin&quot; connection-factory=&quot;connectionFactory&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 定义direct exchange，绑定queueTest --&gt;</span><br><span class=\"line\">    &lt;rabbit:direct-exchange name=&quot;rabbitmqexch&quot;</span><br><span class=\"line\">        durable=&quot;true&quot; auto-delete=&quot;false&quot; declared-by=&quot;connectAdmin&quot;&gt;</span><br><span class=\"line\">    &lt;/rabbit:direct-exchange&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--定义rabbit template用于数据的接收和发送 --&gt;</span><br><span class=\"line\">    &lt;rabbit:template id=&quot;amqpTemplate&quot; connection-factory=&quot;connectionFactory&quot;</span><br><span class=\"line\">        exchange=&quot;rabbitmqexch&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"四、rabbitmq-properties\"><a href=\"#四、rabbitmq-properties\" class=\"headerlink\" title=\"四、rabbitmq.properties\"></a>四、rabbitmq.properties</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq.virtualhost=virtualTest</span><br><span class=\"line\">rabbitmq.username=user</span><br><span class=\"line\">rabbitmq.password=user</span><br><span class=\"line\">rabbitmq.host=127.0.0.1</span><br><span class=\"line\">rabbitmq.port=5672</span><br><span class=\"line\">rabbitmq.queue=rabbitque</span><br><span class=\"line\">rabbitmq.queue.queueKey=queueTestKey</span><br><span class=\"line\">rabbitmq.direct.exchange=rabbitmqexch</span><br></pre></td></tr></table></figure>\n<p>五、接收端RabbitMessageListener监听类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.showshine.pullq.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import org.springframework.amqp.core.Message;</span><br><span class=\"line\">import org.springframework.amqp.core.MessageListener;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * &lt;dl&gt;</span><br><span class=\"line\"> * &lt;dt&gt;&lt;b&gt;类功能概要：&lt;/b&gt;&lt;/dt&gt;</span><br><span class=\"line\"> * &lt;dd&gt;信贷业务：rocketmq消费端-线下转线上&lt;/dd&gt;</span><br><span class=\"line\"> * &lt;dd&gt;&lt;/dd&gt;</span><br><span class=\"line\"> * &lt;/dl&gt;</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @copyright Copyright 2017,(C)The Trustrock Co.Ltd. All right reserved.</span><br><span class=\"line\"> * @since 1.6</span><br><span class=\"line\"> * @version &lt;pre&gt;</span><br><span class=\"line\"> * Version  Date                          Company    Author         Case-Name</span><br><span class=\"line\"> * -------  ------------------------      ---------  -------------  --------------</span><br><span class=\"line\"> * 1.00     2017年12月15日 上午11:54:23     Trustrock  wenyapeng      RocketMessageListener </span><br><span class=\"line\"> * </span><br><span class=\"line\"> * &lt;/pre&gt;</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OfflineRabbitMessageListener implements MessageListener&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static Logger logger = Logger.getLogger(OfflineRabbitMessageListener.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">    public void onMessage(Message message) &#123;</span><br><span class=\"line\">         logger.info(&quot;consumer receive message-------&gt;:&#123;&#125;&quot; + message);  </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"六、发送端\"><a href=\"#六、发送端\" class=\"headerlink\" title=\"六、发送端\"></a>六、发送端</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.aliyun.openservices.client;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">public class RabbitmqTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate ApplicationContext context = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Before</span><br><span class=\"line\">\tpublic void setUp() throws Exception &#123;</span><br><span class=\"line\">\t\tcontext = new ClassPathXmlApplicationContext(&quot;spring-rabbitmq.xml&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void should_send_a_amq_message() throws Exception &#123;</span><br><span class=\"line\">\t\tamqpTemplate = (AmqpTemplate) context.getBean(&quot;amqpTemplate&quot;);</span><br><span class=\"line\">\t\tint a = 2;</span><br><span class=\"line\">\t\twhile (a &gt; 0) &#123;</span><br><span class=\"line\">\t\t\tamqpTemplate.convertAndSend(&quot;queueTestKey&quot;, &quot;wqwqw&quot; + a--);</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t// 暂停一下，好让消息消费者去取消息打印出来</span><br><span class=\"line\">\t\t\t\tThread.sleep(1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/s648667069/p/6401463.html\" target=\"_blank\" rel=\"noopener\">参考https://www.cnblogs.com/s648667069/p/6401463.html</a></p>\n"},{"title":"内置jetty服务","date":"2017-10-17T03:37:00.000Z","_content":"\nJetty 是高性能的 Servlet 容器，经常会在开发环境中作为服务器来使用。在本文中，我们将使用 Spring Web MVC 技术来实现 REST 接口，并使用 使用 Jetty 作为内嵌服务器，方便测试。\n\n## 接口设计\n我们将会在系统中实现两个接口：\n\n*   GET [http://localhost:8080/hello](http://localhost:8080/hello)\n*   GET [http://localhost:8080/hello/way](http://localhost:8080/hello/way)\n\n其中，第一个接口“/hello”将会返回“Hello World!” 的字符串；而第二个接口“/hello/way”则会返回一个包含用户信息的JSON字符串。\n\n## 系统配置\n\n我们需要在应用中添加如下依赖：\n\n```Java```\n<properties>\n    <spring.version>5.0.4.RELEASE</spring.version>\n    <jetty.version>9.4.9.v20180320</jetty.version>\n    <jackson.version>2.9.4</jackson.version>\n</properties>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-servlet</artifactId>\n        <version>${jetty.version}</version>\n        <scope>provided</scope>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>${jackson.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>${jackson.version}</version>\n    </dependency>\n</dependencies>\n```\n\n\n其中，\n\n*   `spring-webmvc` 是为了使用 Spring MVC 的功能。\n*   `jetty-servlet`是为了提供内嵌的 Servlet 容器，这样我们就无需依赖外部的容器，可以直接运行我们的应用。\n*   `jackson-core` 和 `jackson-databind` 为我们的应用提供 JSON 序列化的功能。\n\n## 后台编码实现\n\n### 领域模型\n\n创建一个 User 类，代表用户信息。\n\n```java\npublic class User {\n    private String username;\n    private Integer age;\n\n    public User(String username, Integer age) {\n        this.username = username;\n        this.age = age;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n}\n```\n\n### 控制器\n\n创建 HelloController 用于处理用户的请求。\n\n```Java\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World! Welcome to visit waylau.com!\";\n    }\n\n    @RequestMapping(\"/hello/way\")\n    public User helloWay() {\n        return new User(\"Way Lau\", 30);\n    }\n}\n```\n\n其中，映射到“/hello”的方法将会返回“Hello World!” 的字符串；而映射到“/hello/way”则会返回一个包含用户信息的JSON字符串。\n\n## 应用配置\n\n在本应用中，我们采用基于 Java  注解的配置。\n\nAppConfiguration 是我们的主应用配置：\n```Java\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n@Configuration\n@ComponentScan(basePackages = { \"com.waylau.spring\" })  \n@Import({ MvcConfiguration.class })\npublic class AppConfiguration {\n\n}\n```\n\nAppConfiguration 会扫描“com.waylau.spring”包下的文件，并自动将相关的 bean 进行注册。\n\nAppConfiguration 同时又引入了 MVC 的配置类 MvcConfiguration：\n\n```Java\n@EnableWebMvc\n@Configuration\npublic class MvcConfiguration implements WebMvcConfigurer {\n\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(new MappingJackson2HttpMessageConverter());\n    }\n}\n```\nMvcConfiguration 配置类一方面启用了 MVC 的功能，另一方面添加了 Jackson JSON 的转换器。\n\n最后，我们需要引入 Jetty 服务器 JettyServer：\n\n```Java\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.servlet.ServletHolder;\nimport org.springframework.web.context.ContextLoaderListener;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport com.waylau.spring.mvc.configuration.AppConfiguration;\n\npublic class JettyServer {\n    private static final int DEFAULT_PORT = 8080;\n    private static final String CONTEXT_PATH = \"/\";\n    private static final String MAPPING_URL = \"/*\";\n\n    public void run() throws Exception {\n        Server server = new Server(DEFAULT_PORT);\n        server.setHandler(servletContextHandler(webApplicationContext()));\n        server.start();\n        server.join();\n    }\n\n    private ServletContextHandler servletContextHandler(WebApplicationContext context) {\n        ServletContextHandler handler = new ServletContextHandler();\n        handler.setContextPath(CONTEXT_PATH);\n        handler.addServlet(new ServletHolder(new DispatcherServlet(context)), MAPPING_URL);\n        handler.addEventListener(new ContextLoaderListener(context));\n        return handler;\n    }\n\n    private WebApplicationContext webApplicationContext() {\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.register(AppConfiguration.class);\n        return context;\n    }\n}\n```\n\nJettyServer 将会在 Application 类中进行启动：\n\n```Java\npublic class Application {\n\n    public static void main(String[] args) throws Exception {\n        new JettyServer().run();;\n    }\n\n}\n```\n\n## <a name=\"t6\"></a>11.13.6 运行\n\n在编辑器中，直接运行 Application 类即可。启动之后，应能看到如下控制台信息：\n\n```Java\n2018-03-21 23:14:52.665:INFO::main: Logging initialized @203ms to org.eclipse.jetty.util.log.StdErrLog\n2018-03-21 23:14:52.868:INFO:oejs.Server:main: jetty-9.4.9.v20180320; built: 2018-03-20T20:21:10+08:00; git: 1f8159b1e4a42d3f79997021ea1609f2fbac6de5; jvm 1.8.0_112-b15\n2018-03-21 23:14:52.902:INFO:oejshC.ROOT:main: Initializing Spring root WebApplicationContext\n三月 21, 2018 11:14:52 下午 org.springframework.web.context.ContextLoader initWebApplicationContext\n信息: Root WebApplicationContext: initialization started\n三月 21, 2018 11:14:52 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh\n信息: Refreshing Root WebApplicationContext: startup date [Wed Mar 21 23:14:52 CST 2018]; root of context hierarchy\n三月 21, 2018 11:14:52 下午 org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions\n信息: Registering annotated classes: [class com.waylau.spring.mvc.configuration.AppConfiguration]\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register\n信息: Mapped \"{[/hello]}\" onto public java.lang.String com.waylau.spring.mvc.controller.HelloController.hello()\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register\n信息: Mapped \"{[/hello/way]}\" onto public com.waylau.spring.mvc.vo.User com.waylau.spring.mvc.controller.HelloController.helloWay()\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter initControllerAdviceCache\n信息: Looking for @ControllerAdvice: Root WebApplicationContext: startup date [Wed Mar 21 23:14:52 CST 2018]; root of context hierarchy\n三月 21, 2018 11:14:53 下午 org.springframework.web.context.ContextLoader initWebApplicationContext\n信息: Root WebApplicationContext: initialization completed in 983 ms\n2018-03-21 23:14:53.893:INFO:oejshC.ROOT:main: Initializing Spring FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.FrameworkServlet initServletBean\n信息: FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0': initialization started\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.FrameworkServlet initServletBean\n信息: FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0': initialization completed in 15 ms\n2018-03-21 23:14:53.910:INFO:oejsh.ContextHandler:main: Started o.e.j.s.ServletContextHandler@2796aeae{/,null,AVAILABLE}\n2018-03-21 23:14:54.037:INFO:oejs.AbstractConnector:main: Started ServerConnector@42054532{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\n2018-03-21 23:14:54.038:INFO:oejs.Server:main: Started @1578ms\n```\n\n分别在浏览器中访问 “[http://localhost:8080/hello](http://localhost:8080/hello)” 和 “[http://localhost:8080/hello/way](http://localhost:8080/hello/way)” 地址进行测试，能看到图1和图2的响应效果。\n\n![图1 “/hello”接口的返回内容](/https://yapengwen.github.io/img/20180327-mvc-rest-hello.jpg)\n\n\n![图2 “/hello/way”接口的返回内容](/https://yapengwen.github.io/img/20180327-mvc-rest-json.jpg)\n\n\n## 参考应用\n\n*   源码:见《Spring 5 案例大全》（[https://github.com/waylau/spring-5-book](https://github.com/waylau/spring-5-book)）的 “s5-ch11-mvc-rest”应用。\n*   原文同步至：[https://waylau.com/spring-mvc-use-jetty/](https://waylau.com/spring-mvc-use-jetty/)\n","source":"_posts/jetty_springMVC.md","raw":"---\ntitle: 内置jetty服务\ndate: 2017-10-17 11:37:00\ntags: [jetty]\ncategories: java\n---\n\nJetty 是高性能的 Servlet 容器，经常会在开发环境中作为服务器来使用。在本文中，我们将使用 Spring Web MVC 技术来实现 REST 接口，并使用 使用 Jetty 作为内嵌服务器，方便测试。\n\n## 接口设计\n我们将会在系统中实现两个接口：\n\n*   GET [http://localhost:8080/hello](http://localhost:8080/hello)\n*   GET [http://localhost:8080/hello/way](http://localhost:8080/hello/way)\n\n其中，第一个接口“/hello”将会返回“Hello World!” 的字符串；而第二个接口“/hello/way”则会返回一个包含用户信息的JSON字符串。\n\n## 系统配置\n\n我们需要在应用中添加如下依赖：\n\n```Java```\n<properties>\n    <spring.version>5.0.4.RELEASE</spring.version>\n    <jetty.version>9.4.9.v20180320</jetty.version>\n    <jackson.version>2.9.4</jackson.version>\n</properties>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.jetty</groupId>\n        <artifactId>jetty-servlet</artifactId>\n        <version>${jetty.version}</version>\n        <scope>provided</scope>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>${jackson.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>${jackson.version}</version>\n    </dependency>\n</dependencies>\n```\n\n\n其中，\n\n*   `spring-webmvc` 是为了使用 Spring MVC 的功能。\n*   `jetty-servlet`是为了提供内嵌的 Servlet 容器，这样我们就无需依赖外部的容器，可以直接运行我们的应用。\n*   `jackson-core` 和 `jackson-databind` 为我们的应用提供 JSON 序列化的功能。\n\n## 后台编码实现\n\n### 领域模型\n\n创建一个 User 类，代表用户信息。\n\n```java\npublic class User {\n    private String username;\n    private Integer age;\n\n    public User(String username, Integer age) {\n        this.username = username;\n        this.age = age;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n}\n```\n\n### 控制器\n\n创建 HelloController 用于处理用户的请求。\n\n```Java\n@RestController\npublic class HelloController {\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World! Welcome to visit waylau.com!\";\n    }\n\n    @RequestMapping(\"/hello/way\")\n    public User helloWay() {\n        return new User(\"Way Lau\", 30);\n    }\n}\n```\n\n其中，映射到“/hello”的方法将会返回“Hello World!” 的字符串；而映射到“/hello/way”则会返回一个包含用户信息的JSON字符串。\n\n## 应用配置\n\n在本应用中，我们采用基于 Java  注解的配置。\n\nAppConfiguration 是我们的主应用配置：\n```Java\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n@Configuration\n@ComponentScan(basePackages = { \"com.waylau.spring\" })  \n@Import({ MvcConfiguration.class })\npublic class AppConfiguration {\n\n}\n```\n\nAppConfiguration 会扫描“com.waylau.spring”包下的文件，并自动将相关的 bean 进行注册。\n\nAppConfiguration 同时又引入了 MVC 的配置类 MvcConfiguration：\n\n```Java\n@EnableWebMvc\n@Configuration\npublic class MvcConfiguration implements WebMvcConfigurer {\n\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(new MappingJackson2HttpMessageConverter());\n    }\n}\n```\nMvcConfiguration 配置类一方面启用了 MVC 的功能，另一方面添加了 Jackson JSON 的转换器。\n\n最后，我们需要引入 Jetty 服务器 JettyServer：\n\n```Java\nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.servlet.ServletHolder;\nimport org.springframework.web.context.ContextLoaderListener;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport com.waylau.spring.mvc.configuration.AppConfiguration;\n\npublic class JettyServer {\n    private static final int DEFAULT_PORT = 8080;\n    private static final String CONTEXT_PATH = \"/\";\n    private static final String MAPPING_URL = \"/*\";\n\n    public void run() throws Exception {\n        Server server = new Server(DEFAULT_PORT);\n        server.setHandler(servletContextHandler(webApplicationContext()));\n        server.start();\n        server.join();\n    }\n\n    private ServletContextHandler servletContextHandler(WebApplicationContext context) {\n        ServletContextHandler handler = new ServletContextHandler();\n        handler.setContextPath(CONTEXT_PATH);\n        handler.addServlet(new ServletHolder(new DispatcherServlet(context)), MAPPING_URL);\n        handler.addEventListener(new ContextLoaderListener(context));\n        return handler;\n    }\n\n    private WebApplicationContext webApplicationContext() {\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.register(AppConfiguration.class);\n        return context;\n    }\n}\n```\n\nJettyServer 将会在 Application 类中进行启动：\n\n```Java\npublic class Application {\n\n    public static void main(String[] args) throws Exception {\n        new JettyServer().run();;\n    }\n\n}\n```\n\n## <a name=\"t6\"></a>11.13.6 运行\n\n在编辑器中，直接运行 Application 类即可。启动之后，应能看到如下控制台信息：\n\n```Java\n2018-03-21 23:14:52.665:INFO::main: Logging initialized @203ms to org.eclipse.jetty.util.log.StdErrLog\n2018-03-21 23:14:52.868:INFO:oejs.Server:main: jetty-9.4.9.v20180320; built: 2018-03-20T20:21:10+08:00; git: 1f8159b1e4a42d3f79997021ea1609f2fbac6de5; jvm 1.8.0_112-b15\n2018-03-21 23:14:52.902:INFO:oejshC.ROOT:main: Initializing Spring root WebApplicationContext\n三月 21, 2018 11:14:52 下午 org.springframework.web.context.ContextLoader initWebApplicationContext\n信息: Root WebApplicationContext: initialization started\n三月 21, 2018 11:14:52 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh\n信息: Refreshing Root WebApplicationContext: startup date [Wed Mar 21 23:14:52 CST 2018]; root of context hierarchy\n三月 21, 2018 11:14:52 下午 org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions\n信息: Registering annotated classes: [class com.waylau.spring.mvc.configuration.AppConfiguration]\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register\n信息: Mapped \"{[/hello]}\" onto public java.lang.String com.waylau.spring.mvc.controller.HelloController.hello()\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register\n信息: Mapped \"{[/hello/way]}\" onto public com.waylau.spring.mvc.vo.User com.waylau.spring.mvc.controller.HelloController.helloWay()\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter initControllerAdviceCache\n信息: Looking for @ControllerAdvice: Root WebApplicationContext: startup date [Wed Mar 21 23:14:52 CST 2018]; root of context hierarchy\n三月 21, 2018 11:14:53 下午 org.springframework.web.context.ContextLoader initWebApplicationContext\n信息: Root WebApplicationContext: initialization completed in 983 ms\n2018-03-21 23:14:53.893:INFO:oejshC.ROOT:main: Initializing Spring FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.FrameworkServlet initServletBean\n信息: FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0': initialization started\n三月 21, 2018 11:14:53 下午 org.springframework.web.servlet.FrameworkServlet initServletBean\n信息: FrameworkServlet 'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0': initialization completed in 15 ms\n2018-03-21 23:14:53.910:INFO:oejsh.ContextHandler:main: Started o.e.j.s.ServletContextHandler@2796aeae{/,null,AVAILABLE}\n2018-03-21 23:14:54.037:INFO:oejs.AbstractConnector:main: Started ServerConnector@42054532{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\n2018-03-21 23:14:54.038:INFO:oejs.Server:main: Started @1578ms\n```\n\n分别在浏览器中访问 “[http://localhost:8080/hello](http://localhost:8080/hello)” 和 “[http://localhost:8080/hello/way](http://localhost:8080/hello/way)” 地址进行测试，能看到图1和图2的响应效果。\n\n![图1 “/hello”接口的返回内容](/https://yapengwen.github.io/img/20180327-mvc-rest-hello.jpg)\n\n\n![图2 “/hello/way”接口的返回内容](/https://yapengwen.github.io/img/20180327-mvc-rest-json.jpg)\n\n\n## 参考应用\n\n*   源码:见《Spring 5 案例大全》（[https://github.com/waylau/spring-5-book](https://github.com/waylau/spring-5-book)）的 “s5-ch11-mvc-rest”应用。\n*   原文同步至：[https://waylau.com/spring-mvc-use-jetty/](https://waylau.com/spring-mvc-use-jetty/)\n","slug":"jetty_springMVC","published":1,"updated":"2018-10-17T06:06:24.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr5j002yk4nziapu6v1t","content":"<p>Jetty 是高性能的 Servlet 容器，经常会在开发环境中作为服务器来使用。在本文中，我们将使用 Spring Web MVC 技术来实现 REST 接口，并使用 使用 Jetty 作为内嵌服务器，方便测试。</p>\n<h2 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h2><p>我们将会在系统中实现两个接口：</p>\n<ul>\n<li>GET <a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></li>\n<li>GET <a href=\"http://localhost:8080/hello/way\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/way</a></li>\n</ul>\n<p>其中，第一个接口“/hello”将会返回“Hello World!” 的字符串；而第二个接口“/hello/way”则会返回一个包含用户信息的JSON字符串。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><p>我们需要在应用中添加如下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;spring.version&gt;5.0.4.RELEASE&lt;/spring.version&gt;</span><br><span class=\"line\">    &lt;jetty.version&gt;9.4.9.v20180320&lt;/jetty.version&gt;</span><br><span class=\"line\">    &lt;jackson.version&gt;2.9.4&lt;/jackson.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jetty.version&#125;&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>spring-webmvc</code> 是为了使用 Spring MVC 的功能。</li>\n<li><code>jetty-servlet</code>是为了提供内嵌的 Servlet 容器，这样我们就无需依赖外部的容器，可以直接运行我们的应用。</li>\n<li><code>jackson-core</code> 和 <code>jackson-databind</code> 为我们的应用提供 JSON 序列化的功能。</li>\n</ul>\n<h2 id=\"后台编码实现\"><a href=\"#后台编码实现\" class=\"headerlink\" title=\"后台编码实现\"></a>后台编码实现</h2><h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p>创建一个 User 类，代表用户信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String username, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>创建 HelloController 用于处理用户的请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World! Welcome to visit waylau.com!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello/way\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">helloWay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"string\">\"Way Lau\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，映射到“/hello”的方法将会返回“Hello World!” 的字符串；而映射到“/hello/way”则会返回一个包含用户信息的JSON字符串。</p>\n<h2 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h2><p>在本应用中，我们采用基于 Java  注解的配置。</p>\n<p>AppConfiguration 是我们的主应用配置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123; <span class=\"string\">\"com.waylau.spring\"</span> &#125;)  </span><br><span class=\"line\"><span class=\"meta\">@Import</span>(&#123; MvcConfiguration.class &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AppConfiguration 会扫描“com.waylau.spring”包下的文件，并自动将相关的 bean 进行注册。</p>\n<p>AppConfiguration 同时又引入了 MVC 的配置类 MvcConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">        converters.add(<span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MvcConfiguration 配置类一方面启用了 MVC 的功能，另一方面添加了 Jackson JSON 的转换器。</p>\n<p>最后，我们需要引入 Jetty 服务器 JettyServer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.server.Server;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.servlet.ServletContextHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.servlet.ServletHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.ContextLoaderListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.waylau.spring.mvc.configuration.AppConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_PORT = <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CONTEXT_PATH = <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAPPING_URL = <span class=\"string\">\"/*\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Server server = <span class=\"keyword\">new</span> Server(DEFAULT_PORT);</span><br><span class=\"line\">        server.setHandler(servletContextHandler(webApplicationContext()));</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">        server.join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ServletContextHandler <span class=\"title\">servletContextHandler</span><span class=\"params\">(WebApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        ServletContextHandler handler = <span class=\"keyword\">new</span> ServletContextHandler();</span><br><span class=\"line\">        handler.setContextPath(CONTEXT_PATH);</span><br><span class=\"line\">        handler.addServlet(<span class=\"keyword\">new</span> ServletHolder(<span class=\"keyword\">new</span> DispatcherServlet(context)), MAPPING_URL);</span><br><span class=\"line\">        handler.addEventListener(<span class=\"keyword\">new</span> ContextLoaderListener(context));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> WebApplicationContext <span class=\"title\">webApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        context.register(AppConfiguration.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JettyServer 将会在 Application 类中进行启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> JettyServer().run();;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-13-6-运行\"><a href=\"#11-13-6-运行\" class=\"headerlink\" title=\"11.13.6 运行\"></a><a name=\"t6\"></a>11.13.6 运行</h2><p>在编辑器中，直接运行 Application 类即可。启动之后，应能看到如下控制台信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.665</span>:INFO::main: Logging initialized @<span class=\"number\">203</span>ms to org.eclipse.jetty.util.log.StdErrLog</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.868</span>:INFO:oejs.Server:main: jetty-<span class=\"number\">9.4</span>.9.v20180320; built: <span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">20</span>T20:<span class=\"number\">21</span>:<span class=\"number\">10</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>; git: <span class=\"number\">1f</span>8159b1e4a42d3f79997021ea1609f2fbac6de5; jvm <span class=\"number\">1.8</span>.0_112-b15</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.902</span>:INFO:oejshC.ROOT:main: Initializing Spring root WebApplicationContext</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.web.context.ContextLoader initWebApplicationContext</span><br><span class=\"line\">信息: Root WebApplicationContext: initialization started</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class=\"line\">信息: Refreshing Root WebApplicationContext: startup date [Wed Mar <span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> CST <span class=\"number\">2018</span>]; root of context hierarchy</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions</span><br><span class=\"line\">信息: Registering annotated classes: [class com.waylau.spring.mvc.configuration.AppConfiguration]</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register</span><br><span class=\"line\">信息: Mapped <span class=\"string\">\"&#123;[/hello]&#125;\"</span> onto <span class=\"keyword\">public</span> java.lang.String com.waylau.spring.mvc.controller.HelloController.hello()</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register</span><br><span class=\"line\">信息: Mapped <span class=\"string\">\"&#123;[/hello/way]&#125;\"</span> onto <span class=\"keyword\">public</span> com.waylau.spring.mvc.vo.User com.waylau.spring.mvc.controller.HelloController.helloWay()</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter initControllerAdviceCache</span><br><span class=\"line\">信息: Looking <span class=\"keyword\">for</span> <span class=\"meta\">@ControllerAdvice</span>: Root WebApplicationContext: startup date [Wed Mar <span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> CST <span class=\"number\">2018</span>]; root of context hierarchy</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.context.ContextLoader initWebApplicationContext</span><br><span class=\"line\">信息: Root WebApplicationContext: initialization completed in <span class=\"number\">983</span> ms</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">53.893</span>:INFO:oejshC.ROOT:main: Initializing Spring FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span></span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.FrameworkServlet initServletBean</span><br><span class=\"line\">信息: FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span>: initialization started</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.FrameworkServlet initServletBean</span><br><span class=\"line\">信息: FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span>: initialization completed in <span class=\"number\">15</span> ms</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">53.910</span>:INFO:oejsh.ContextHandler:main: Started o.e.j.s.ServletContextHandler@<span class=\"number\">2796</span>aeae&#123;/,<span class=\"keyword\">null</span>,AVAILABLE&#125;</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">54.037</span>:INFO:oejs.AbstractConnector:main: Started ServerConnector@<span class=\"number\">42054532</span>&#123;HTTP/<span class=\"number\">1.1</span>,[http/<span class=\"number\">1.1</span>]&#125;&#123;<span class=\"number\">0.0</span>.0.0:<span class=\"number\">8080</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">54.038</span>:INFO:oejs.Server:main: Started @<span class=\"number\">1578</span>ms</span><br></pre></td></tr></table></figure>\n<p>分别在浏览器中访问 “<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a>” 和 “<a href=\"http://localhost:8080/hello/way\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/way</a>” 地址进行测试，能看到图1和图2的响应效果。</p>\n<p><img src=\"/https://yapengwen.github.io/img/20180327-mvc-rest-hello.jpg\" alt=\"图1 “/hello”接口的返回内容\"></p>\n<p><img src=\"/https://yapengwen.github.io/img/20180327-mvc-rest-json.jpg\" alt=\"图2 “/hello/way”接口的返回内容\"></p>\n<h2 id=\"参考应用\"><a href=\"#参考应用\" class=\"headerlink\" title=\"参考应用\"></a>参考应用</h2><ul>\n<li>源码:见《Spring 5 案例大全》（<a href=\"https://github.com/waylau/spring-5-book\" target=\"_blank\" rel=\"noopener\">https://github.com/waylau/spring-5-book</a>）的 “s5-ch11-mvc-rest”应用。</li>\n<li>原文同步至：<a href=\"https://waylau.com/spring-mvc-use-jetty/\" target=\"_blank\" rel=\"noopener\">https://waylau.com/spring-mvc-use-jetty/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Jetty 是高性能的 Servlet 容器，经常会在开发环境中作为服务器来使用。在本文中，我们将使用 Spring Web MVC 技术来实现 REST 接口，并使用 使用 Jetty 作为内嵌服务器，方便测试。</p>\n<h2 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h2><p>我们将会在系统中实现两个接口：</p>\n<ul>\n<li>GET <a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></li>\n<li>GET <a href=\"http://localhost:8080/hello/way\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/way</a></li>\n</ul>\n<p>其中，第一个接口“/hello”将会返回“Hello World!” 的字符串；而第二个接口“/hello/way”则会返回一个包含用户信息的JSON字符串。</p>\n<h2 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h2><p>我们需要在应用中添加如下依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">    &lt;spring.version&gt;5.0.4.RELEASE&lt;/spring.version&gt;</span><br><span class=\"line\">    &lt;jetty.version&gt;9.4.9.v20180320&lt;/jetty.version&gt;</span><br><span class=\"line\">    &lt;jackson.version&gt;2.9.4&lt;/jackson.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jetty.version&#125;&lt;/version&gt;</span><br><span class=\"line\">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>spring-webmvc</code> 是为了使用 Spring MVC 的功能。</li>\n<li><code>jetty-servlet</code>是为了提供内嵌的 Servlet 容器，这样我们就无需依赖外部的容器，可以直接运行我们的应用。</li>\n<li><code>jackson-core</code> 和 <code>jackson-databind</code> 为我们的应用提供 JSON 序列化的功能。</li>\n</ul>\n<h2 id=\"后台编码实现\"><a href=\"#后台编码实现\" class=\"headerlink\" title=\"后台编码实现\"></a>后台编码实现</h2><h3 id=\"领域模型\"><a href=\"#领域模型\" class=\"headerlink\" title=\"领域模型\"></a>领域模型</h3><p>创建一个 User 类，代表用户信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String username, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>创建 HelloController 用于处理用户的请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World! Welcome to visit waylau.com!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello/way\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">helloWay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"string\">\"Way Lau\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，映射到“/hello”的方法将会返回“Hello World!” 的字符串；而映射到“/hello/way”则会返回一个包含用户信息的JSON字符串。</p>\n<h2 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h2><p>在本应用中，我们采用基于 Java  注解的配置。</p>\n<p>AppConfiguration 是我们的主应用配置：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123; <span class=\"string\">\"com.waylau.spring\"</span> &#125;)  </span><br><span class=\"line\"><span class=\"meta\">@Import</span>(&#123; MvcConfiguration.class &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AppConfiguration 会扫描“com.waylau.spring”包下的文件，并自动将相关的 bean 进行注册。</p>\n<p>AppConfiguration 同时又引入了 MVC 的配置类 MvcConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">        converters.add(<span class=\"keyword\">new</span> MappingJackson2HttpMessageConverter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MvcConfiguration 配置类一方面启用了 MVC 的功能，另一方面添加了 Jackson JSON 的转换器。</p>\n<p>最后，我们需要引入 Jetty 服务器 JettyServer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.server.Server;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.servlet.ServletContextHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.eclipse.jetty.servlet.ServletHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.ContextLoaderListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.waylau.spring.mvc.configuration.AppConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_PORT = <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CONTEXT_PATH = <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAPPING_URL = <span class=\"string\">\"/*\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Server server = <span class=\"keyword\">new</span> Server(DEFAULT_PORT);</span><br><span class=\"line\">        server.setHandler(servletContextHandler(webApplicationContext()));</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">        server.join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ServletContextHandler <span class=\"title\">servletContextHandler</span><span class=\"params\">(WebApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        ServletContextHandler handler = <span class=\"keyword\">new</span> ServletContextHandler();</span><br><span class=\"line\">        handler.setContextPath(CONTEXT_PATH);</span><br><span class=\"line\">        handler.addServlet(<span class=\"keyword\">new</span> ServletHolder(<span class=\"keyword\">new</span> DispatcherServlet(context)), MAPPING_URL);</span><br><span class=\"line\">        handler.addEventListener(<span class=\"keyword\">new</span> ContextLoaderListener(context));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> WebApplicationContext <span class=\"title\">webApplicationContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigWebApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigWebApplicationContext();</span><br><span class=\"line\">        context.register(AppConfiguration.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JettyServer 将会在 Application 类中进行启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> JettyServer().run();;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-13-6-运行\"><a href=\"#11-13-6-运行\" class=\"headerlink\" title=\"11.13.6 运行\"></a><a name=\"t6\"></a>11.13.6 运行</h2><p>在编辑器中，直接运行 Application 类即可。启动之后，应能看到如下控制台信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.665</span>:INFO::main: Logging initialized @<span class=\"number\">203</span>ms to org.eclipse.jetty.util.log.StdErrLog</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.868</span>:INFO:oejs.Server:main: jetty-<span class=\"number\">9.4</span>.9.v20180320; built: <span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">20</span>T20:<span class=\"number\">21</span>:<span class=\"number\">10</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>; git: <span class=\"number\">1f</span>8159b1e4a42d3f79997021ea1609f2fbac6de5; jvm <span class=\"number\">1.8</span>.0_112-b15</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52.902</span>:INFO:oejshC.ROOT:main: Initializing Spring root WebApplicationContext</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.web.context.ContextLoader initWebApplicationContext</span><br><span class=\"line\">信息: Root WebApplicationContext: initialization started</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class=\"line\">信息: Refreshing Root WebApplicationContext: startup date [Wed Mar <span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> CST <span class=\"number\">2018</span>]; root of context hierarchy</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> 下午 org.springframework.web.context.support.AnnotationConfigWebApplicationContext loadBeanDefinitions</span><br><span class=\"line\">信息: Registering annotated classes: [class com.waylau.spring.mvc.configuration.AppConfiguration]</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register</span><br><span class=\"line\">信息: Mapped <span class=\"string\">\"&#123;[/hello]&#125;\"</span> onto <span class=\"keyword\">public</span> java.lang.String com.waylau.spring.mvc.controller.HelloController.hello()</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry register</span><br><span class=\"line\">信息: Mapped <span class=\"string\">\"&#123;[/hello/way]&#125;\"</span> onto <span class=\"keyword\">public</span> com.waylau.spring.mvc.vo.User com.waylau.spring.mvc.controller.HelloController.helloWay()</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter initControllerAdviceCache</span><br><span class=\"line\">信息: Looking <span class=\"keyword\">for</span> <span class=\"meta\">@ControllerAdvice</span>: Root WebApplicationContext: startup date [Wed Mar <span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">52</span> CST <span class=\"number\">2018</span>]; root of context hierarchy</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.context.ContextLoader initWebApplicationContext</span><br><span class=\"line\">信息: Root WebApplicationContext: initialization completed in <span class=\"number\">983</span> ms</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">53.893</span>:INFO:oejshC.ROOT:main: Initializing Spring FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span></span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.FrameworkServlet initServletBean</span><br><span class=\"line\">信息: FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span>: initialization started</span><br><span class=\"line\">三月 <span class=\"number\">21</span>, <span class=\"number\">2018</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">53</span> 下午 org.springframework.web.servlet.FrameworkServlet initServletBean</span><br><span class=\"line\">信息: FrameworkServlet <span class=\"string\">'org.springframework.web.servlet.DispatcherServlet-6aaa5eb0'</span>: initialization completed in <span class=\"number\">15</span> ms</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">53.910</span>:INFO:oejsh.ContextHandler:main: Started o.e.j.s.ServletContextHandler@<span class=\"number\">2796</span>aeae&#123;/,<span class=\"keyword\">null</span>,AVAILABLE&#125;</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">54.037</span>:INFO:oejs.AbstractConnector:main: Started ServerConnector@<span class=\"number\">42054532</span>&#123;HTTP/<span class=\"number\">1.1</span>,[http/<span class=\"number\">1.1</span>]&#125;&#123;<span class=\"number\">0.0</span>.0.0:<span class=\"number\">8080</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2018</span>-<span class=\"number\">03</span>-<span class=\"number\">21</span> <span class=\"number\">23</span>:<span class=\"number\">14</span>:<span class=\"number\">54.038</span>:INFO:oejs.Server:main: Started @<span class=\"number\">1578</span>ms</span><br></pre></td></tr></table></figure>\n<p>分别在浏览器中访问 “<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a>” 和 “<a href=\"http://localhost:8080/hello/way\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/way</a>” 地址进行测试，能看到图1和图2的响应效果。</p>\n<p><img src=\"/https://yapengwen.github.io/img/20180327-mvc-rest-hello.jpg\" alt=\"图1 “/hello”接口的返回内容\"></p>\n<p><img src=\"/https://yapengwen.github.io/img/20180327-mvc-rest-json.jpg\" alt=\"图2 “/hello/way”接口的返回内容\"></p>\n<h2 id=\"参考应用\"><a href=\"#参考应用\" class=\"headerlink\" title=\"参考应用\"></a>参考应用</h2><ul>\n<li>源码:见《Spring 5 案例大全》（<a href=\"https://github.com/waylau/spring-5-book\" target=\"_blank\" rel=\"noopener\">https://github.com/waylau/spring-5-book</a>）的 “s5-ch11-mvc-rest”应用。</li>\n<li>原文同步至：<a href=\"https://waylau.com/spring-mvc-use-jetty/\" target=\"_blank\" rel=\"noopener\">https://waylau.com/spring-mvc-use-jetty/</a></li>\n</ul>\n"},{"title":"windows下安装rabbitMQ及操作常用命令","date":"2017-12-20T01:00:00.000Z","_content":"\nrabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。\n\n## 1.安装<span style=\"font-size: 18.018px; line-height: 31.5315px;\">Erlang</span><span style=\"font-size: 18.018px; line-height: 31.5315px;\"> </span>\n\n所以在安装rabbitMQ之前，需要先安装Erlang 。\n\n小编使用的是[otp_win64_18.1](https://pan.baidu.com/s/1c2826rA) ，需要其他版本或者32位系统的，可以去[官网](http://www.erlang.org/downloads)下载。\n\n全部点击“下一步”就行。\n\n有的选择其他的安装方式，可能需要添加一下系统环境变量（正常安装的也要检查下）：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160923235447637-1807926011.png)\n\n有最好，没有的话就手动添加嘛。\n\n## 2.安装<span style=\"color: #333333; font-family: 'Microsoft YaHei'; line-height: 24px;\">RabbitMQ</span>\n\n下载运行[rabbitmq-server-3.6.5](https://pan.baidu.com/s/1cqpG0u) ，需要其他版本或者32位系统的，可以去[官网](http://www.rabbitmq.com/download.html)下载。\n\n依旧可以不改变默认进行安装。\n\n需要注意：默认安装的RabbitMQ 监听端口是5672\n\n## 3.配置\n\n### 激活 RabbitMQ's Management Plugin\n\n使用RabbitMQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态。\n\n打开命令窗口：\n\n输入命令：\n\n<div class=\"cnblogs_code\">\n\n<pre><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin\\rabbitmq-plugins.bat</span><span style=\"color: #800000;\">\"</span> enable rabbitmq_management</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924000520059-1488931520.png)\n\n这样，就安装好插件了，是不是能使用了呢？别急，需要重启服务才行，使用命令：\n\n<div class=\"cnblogs_code\">\n\n<pre>net stop RabbitMQ && net start RabbitMQ</pre>\n\n</div>\n\n这时候的，也许会出现这种结果：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001111465-1934628397.png)\n\n“发生错误：发生系统错误 <span lang=\"EN-US\">5。<span lang=\"EN-US\">  拒绝访问。”</span></span>\n\n这是什么鬼？查了下，原来，5代表的是：不是系统管理员权限。\n\n问题解决方案：使用管理员打开<span lang=\"EN-US\">cmd再执行此命令：</span>\n\n<span lang=\"EN-US\">![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001344449-518927811.png)</span>\n\n这样就结束了吗？当然没有。\n\n### 创建用户，密码，绑定角色\n\n使用<span lang=\"EN-US\">rabbitmqctl控制台命令（位于<span lang=\"EN-US\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin>）来创建用户，密码，绑定权限等。</span></span>\n\n注意：安装路径不同的请看仔细啊。\n\nrabbitmq的用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。\n\n查看已有用户及用户的角色：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat list_users</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001810231-489339837.png)\n\n新增一个用户：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat add_user username password</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002317996-1750317042.png)\n\n此时来看下我们当前用户哈：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002417481-667312419.png)\n\neric 后面没有“[administrator]”\n\n这个administrator是干嘛用的呢？这就涉及到用户角色问题了：\n\n按照我个人理解，rabbitmq用户角色可分为五类：超级管理员, 监控者, 策略制定者, 普通管理者以及其他。\n\n(1) 超级管理员(administrator)\n\n可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。\n\n(2) 监控者(monitoring)\n\n可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) \n\n(3) 策略制定者(policymaker)\n\n可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。\n\n(4) 普通管理者(management)\n\n仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。\n\n(5) 其他的\n\n无法登陆管理控制台，通常就是普通的生产者和消费者。\n\n好啦，我们也给 eric 变成 “超级管理员” 角色：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat set_user_tags username administrator</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003014246-2015422375.png)\n\n再看下结果哈：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003047621-1862534375.png)\n\n当然，除了上面的administrator 还有 monitoring、policymaker、management、自定义名称 ，对应上面介绍到的不同的角色。\n\n像我们人一样，我们角色除了是公司的员工，还是父母的孩子、子女的爸妈等，用户也可以同时具有多个角色,设置方式:\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat  set_user_tags  username tag1 tag2 ...</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924005224668-1215172795.png)\n\n恩，现在总觉得guest 这个不安全（它的默认密码是guest）,想更改密码，好办：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl change_password userName newPassword</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003352168-1350202979.png)\n\n有的人也许会说，我就是看guest不爽，老子新增了administrator用户了，就是想干掉它，可以：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat delete_user username</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003722731-332310837.png)\n\n 这时，可能有人就要问了：命令框是只有一个用户了，你怎么操作啊？怎么查看执行情况啊/\n\n 当然有路子啦：\n\n使用浏览器打开[ http://localhost:15672](http://localhost:15672/)[ ](http://localhost:15672%C2%A0/)访问Rabbit Mq的管理控制台，使用刚才创建的账号登陆系统：\n\n ![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004023387-110874920.png)\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004035121-53385779.png)\n\n其实，除了可查看所有的信息 ，上面的命令 增删改查、权限设置，都可以在这个页面完成，还可以依据业务需求设置策略(policy)，具体的就不在这里啰嗦了，大家可以看看网上的帖子。\n\n### <span style=\"font-size: 14px; line-height: 1.5;\">权限设置</span>\n\n<span style=\"font-size: 14px; line-height: 1.5;\">用户有了角色，那也需要权限设置啊，别急，慢慢来：</span>\n\n按照官方文档，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。\n\n我们配置权限会影响到exchange、queue的声明和删除。\n\n读写权限影响到从queue里取消息、向exchange发送消息以及queue和exchange的绑定(binding)操作。\n\n例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限\n\n权限相关命令为：\n\n(1) 设置用户权限\n\nrabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP\n\n(2) 查看(指定hostpath)所有用户的权限信息\n\nrabbitmqctl  list_permissions  [-p  VHostPath]\n\n(3) 查看指定用户的权限信息\n\nrabbitmqctl  list_user_permissions  User\n\n(4)  清除用户的权限信息\n\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n\n现在环境搭好了，用户、角色、权限全部设置好，开始进行code（原理整理，及编码 待续）\n\n## 参考：\n\n安装参考 [http://www.rabbitmq.com/install-windows-manual.html](http://www.rabbitmq.com/install-windows-manual.html)\n\n权限内容参考 [http://www.rabbitmq.com/man/rabbitmqctl.1.man.html](http://www.rabbitmq.com/man/rabbitmqctl.1.man.html)\n\n权限命令摘自 [https://my.oschina.net/hncscwc/blog/262246](https://my.oschina.net/hncscwc/blog/262246)\n","source":"_posts/windows下安装rabbitmq及操作常用命令.md","raw":"---\ntitle: windows下安装rabbitMQ及操作常用命令\ndate: 2017-12-20 09:00:00\ntags: [RabbitMQ,windows]\ncategories: MQ\n---\n\nrabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。\n\n## 1.安装<span style=\"font-size: 18.018px; line-height: 31.5315px;\">Erlang</span><span style=\"font-size: 18.018px; line-height: 31.5315px;\"> </span>\n\n所以在安装rabbitMQ之前，需要先安装Erlang 。\n\n小编使用的是[otp_win64_18.1](https://pan.baidu.com/s/1c2826rA) ，需要其他版本或者32位系统的，可以去[官网](http://www.erlang.org/downloads)下载。\n\n全部点击“下一步”就行。\n\n有的选择其他的安装方式，可能需要添加一下系统环境变量（正常安装的也要检查下）：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160923235447637-1807926011.png)\n\n有最好，没有的话就手动添加嘛。\n\n## 2.安装<span style=\"color: #333333; font-family: 'Microsoft YaHei'; line-height: 24px;\">RabbitMQ</span>\n\n下载运行[rabbitmq-server-3.6.5](https://pan.baidu.com/s/1cqpG0u) ，需要其他版本或者32位系统的，可以去[官网](http://www.rabbitmq.com/download.html)下载。\n\n依旧可以不改变默认进行安装。\n\n需要注意：默认安装的RabbitMQ 监听端口是5672\n\n## 3.配置\n\n### 激活 RabbitMQ's Management Plugin\n\n使用RabbitMQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态。\n\n打开命令窗口：\n\n输入命令：\n\n<div class=\"cnblogs_code\">\n\n<pre><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin\\rabbitmq-plugins.bat</span><span style=\"color: #800000;\">\"</span> enable rabbitmq_management</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924000520059-1488931520.png)\n\n这样，就安装好插件了，是不是能使用了呢？别急，需要重启服务才行，使用命令：\n\n<div class=\"cnblogs_code\">\n\n<pre>net stop RabbitMQ && net start RabbitMQ</pre>\n\n</div>\n\n这时候的，也许会出现这种结果：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001111465-1934628397.png)\n\n“发生错误：发生系统错误 <span lang=\"EN-US\">5。<span lang=\"EN-US\">  拒绝访问。”</span></span>\n\n这是什么鬼？查了下，原来，5代表的是：不是系统管理员权限。\n\n问题解决方案：使用管理员打开<span lang=\"EN-US\">cmd再执行此命令：</span>\n\n<span lang=\"EN-US\">![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001344449-518927811.png)</span>\n\n这样就结束了吗？当然没有。\n\n### 创建用户，密码，绑定角色\n\n使用<span lang=\"EN-US\">rabbitmqctl控制台命令（位于<span lang=\"EN-US\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin>）来创建用户，密码，绑定权限等。</span></span>\n\n注意：安装路径不同的请看仔细啊。\n\nrabbitmq的用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。\n\n查看已有用户及用户的角色：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat list_users</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001810231-489339837.png)\n\n新增一个用户：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat add_user username password</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002317996-1750317042.png)\n\n此时来看下我们当前用户哈：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002417481-667312419.png)\n\neric 后面没有“[administrator]”\n\n这个administrator是干嘛用的呢？这就涉及到用户角色问题了：\n\n按照我个人理解，rabbitmq用户角色可分为五类：超级管理员, 监控者, 策略制定者, 普通管理者以及其他。\n\n(1) 超级管理员(administrator)\n\n可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。\n\n(2) 监控者(monitoring)\n\n可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) \n\n(3) 策略制定者(policymaker)\n\n可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。\n\n(4) 普通管理者(management)\n\n仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。\n\n(5) 其他的\n\n无法登陆管理控制台，通常就是普通的生产者和消费者。\n\n好啦，我们也给 eric 变成 “超级管理员” 角色：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat set_user_tags username administrator</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003014246-2015422375.png)\n\n再看下结果哈：\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003047621-1862534375.png)\n\n当然，除了上面的administrator 还有 monitoring、policymaker、management、自定义名称 ，对应上面介绍到的不同的角色。\n\n像我们人一样，我们角色除了是公司的员工，还是父母的孩子、子女的爸妈等，用户也可以同时具有多个角色,设置方式:\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat  set_user_tags  username tag1 tag2 ...</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924005224668-1215172795.png)\n\n恩，现在总觉得guest 这个不安全（它的默认密码是guest）,想更改密码，好办：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl change_password userName newPassword</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003352168-1350202979.png)\n\n有的人也许会说，我就是看guest不爽，老子新增了administrator用户了，就是想干掉它，可以：\n\n<div class=\"cnblogs_code\">\n\n<pre>rabbitmqctl.bat delete_user username</pre>\n\n</div>\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003722731-332310837.png)\n\n 这时，可能有人就要问了：命令框是只有一个用户了，你怎么操作啊？怎么查看执行情况啊/\n\n 当然有路子啦：\n\n使用浏览器打开[ http://localhost:15672](http://localhost:15672/)[ ](http://localhost:15672%C2%A0/)访问Rabbit Mq的管理控制台，使用刚才创建的账号登陆系统：\n\n ![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004023387-110874920.png)\n\n![](http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004035121-53385779.png)\n\n其实，除了可查看所有的信息 ，上面的命令 增删改查、权限设置，都可以在这个页面完成，还可以依据业务需求设置策略(policy)，具体的就不在这里啰嗦了，大家可以看看网上的帖子。\n\n### <span style=\"font-size: 14px; line-height: 1.5;\">权限设置</span>\n\n<span style=\"font-size: 14px; line-height: 1.5;\">用户有了角色，那也需要权限设置啊，别急，慢慢来：</span>\n\n按照官方文档，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。\n\n我们配置权限会影响到exchange、queue的声明和删除。\n\n读写权限影响到从queue里取消息、向exchange发送消息以及queue和exchange的绑定(binding)操作。\n\n例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限\n\n权限相关命令为：\n\n(1) 设置用户权限\n\nrabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP\n\n(2) 查看(指定hostpath)所有用户的权限信息\n\nrabbitmqctl  list_permissions  [-p  VHostPath]\n\n(3) 查看指定用户的权限信息\n\nrabbitmqctl  list_user_permissions  User\n\n(4)  清除用户的权限信息\n\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n\n现在环境搭好了，用户、角色、权限全部设置好，开始进行code（原理整理，及编码 待续）\n\n## 参考：\n\n安装参考 [http://www.rabbitmq.com/install-windows-manual.html](http://www.rabbitmq.com/install-windows-manual.html)\n\n权限内容参考 [http://www.rabbitmq.com/man/rabbitmqctl.1.man.html](http://www.rabbitmq.com/man/rabbitmqctl.1.man.html)\n\n权限命令摘自 [https://my.oschina.net/hncscwc/blog/262246](https://my.oschina.net/hncscwc/blog/262246)\n","slug":"windows下安装rabbitmq及操作常用命令","published":1,"updated":"2018-10-17T05:48:51.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr5n0030k4nz1lt4flr8","content":"<p>rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。</p>\n<h2 id=\"1-安装Erlang\"><a href=\"#1-安装Erlang\" class=\"headerlink\" title=\"1.安装Erlang \"></a>1.安装<span style=\"font-size: 18.018px; line-height: 31.5315px;\">Erlang</span><span style=\"font-size: 18.018px; line-height: 31.5315px;\"> </span></h2><p>所以在安装rabbitMQ之前，需要先安装Erlang 。</p>\n<p>小编使用的是<a href=\"https://pan.baidu.com/s/1c2826rA\" target=\"_blank\" rel=\"noopener\">otp_win64_18.1</a> ，需要其他版本或者32位系统的，可以去<a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"noopener\">官网</a>下载。</p>\n<p>全部点击“下一步”就行。</p>\n<p>有的选择其他的安装方式，可能需要添加一下系统环境变量（正常安装的也要检查下）：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160923235447637-1807926011.png\" alt=\"\"></p>\n<p>有最好，没有的话就手动添加嘛。</p>\n<h2 id=\"2-安装RabbitMQ\"><a href=\"#2-安装RabbitMQ\" class=\"headerlink\" title=\"2.安装RabbitMQ\"></a>2.安装<span style=\"color: #333333; font-family: 'Microsoft YaHei'; line-height: 24px;\">RabbitMQ</span></h2><p>下载运行<a href=\"https://pan.baidu.com/s/1cqpG0u\" target=\"_blank\" rel=\"noopener\">rabbitmq-server-3.6.5</a> ，需要其他版本或者32位系统的，可以去<a href=\"http://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载。</p>\n<p>依旧可以不改变默认进行安装。</p>\n<p>需要注意：默认安装的RabbitMQ 监听端口是5672</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h2><h3 id=\"激活-RabbitMQ’s-Management-Plugin\"><a href=\"#激活-RabbitMQ’s-Management-Plugin\" class=\"headerlink\" title=\"激活 RabbitMQ’s Management Plugin\"></a>激活 RabbitMQ’s Management Plugin</h3><p>使用RabbitMQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态。</p>\n<p>打开命令窗口：</p>\n<p>输入命令：</p>\n<div class=\"cnblogs_code\"><br><br><pre><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin\\rabbitmq-plugins.bat</span><span style=\"color: #800000;\">“</span> enable rabbitmq_management</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924000520059-1488931520.png\" alt=\"\"></p>\n<p>这样，就安装好插件了，是不是能使用了呢？别急，需要重启服务才行，使用命令：</p>\n<div class=\"cnblogs_code\"><br><br><pre>net stop RabbitMQ &amp;&amp; net start RabbitMQ</pre><br><br></div>\n\n<p>这时候的，也许会出现这种结果：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001111465-1934628397.png\" alt=\"\"></p>\n<p>“发生错误：发生系统错误 <span lang=\"EN-US\">5。<span lang=\"EN-US\">  拒绝访问。”</span></span></p>\n<p>这是什么鬼？查了下，原来，5代表的是：不是系统管理员权限。</p>\n<p>问题解决方案：使用管理员打开<span lang=\"EN-US\">cmd再执行此命令：</span></p>\n<p><span lang=\"EN-US\"><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001344449-518927811.png\" alt=\"\"></span></p>\n<p>这样就结束了吗？当然没有。</p>\n<h3 id=\"创建用户，密码，绑定角色\"><a href=\"#创建用户，密码，绑定角色\" class=\"headerlink\" title=\"创建用户，密码，绑定角色\"></a>创建用户，密码，绑定角色</h3><p>使用<span lang=\"EN-US\">rabbitmqctl控制台命令（位于<span lang=\"EN-US\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin&gt;）来创建用户，密码，绑定权限等。</span></span></p>\n<p>注意：安装路径不同的请看仔细啊。</p>\n<p>rabbitmq的用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p>\n<p>查看已有用户及用户的角色：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat list_users</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001810231-489339837.png\" alt=\"\"></p>\n<p>新增一个用户：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat add_user username password</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002317996-1750317042.png\" alt=\"\"></p>\n<p>此时来看下我们当前用户哈：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002417481-667312419.png\" alt=\"\"></p>\n<p>eric 后面没有“[administrator]”</p>\n<p>这个administrator是干嘛用的呢？这就涉及到用户角色问题了：</p>\n<p>按照我个人理解，rabbitmq用户角色可分为五类：超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p>\n<p>(1) 超级管理员(administrator)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>\n<p>(2) 监控者(monitoring)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) </p>\n<p>(3) 策略制定者(policymaker)</p>\n<p>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。</p>\n<p>(4) 普通管理者(management)</p>\n<p>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p>\n<p>(5) 其他的</p>\n<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>\n<p>好啦，我们也给 eric 变成 “超级管理员” 角色：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat set_user_tags username administrator</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003014246-2015422375.png\" alt=\"\"></p>\n<p>再看下结果哈：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003047621-1862534375.png\" alt=\"\"></p>\n<p>当然，除了上面的administrator 还有 monitoring、policymaker、management、自定义名称 ，对应上面介绍到的不同的角色。</p>\n<p>像我们人一样，我们角色除了是公司的员工，还是父母的孩子、子女的爸妈等，用户也可以同时具有多个角色,设置方式:</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat  set_user_tags  username tag1 tag2 …</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924005224668-1215172795.png\" alt=\"\"></p>\n<p>恩，现在总觉得guest 这个不安全（它的默认密码是guest）,想更改密码，好办：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl change_password userName newPassword</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003352168-1350202979.png\" alt=\"\"></p>\n<p>有的人也许会说，我就是看guest不爽，老子新增了administrator用户了，就是想干掉它，可以：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat delete_user username</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003722731-332310837.png\" alt=\"\"></p>\n<p> 这时，可能有人就要问了：命令框是只有一个用户了，你怎么操作啊？怎么查看执行情况啊/</p>\n<p> 当然有路子啦：</p>\n<p>使用浏览器打开<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\"> http://localhost:15672</a><a href=\"http://localhost:15672%C2%A0/\" target=\"_blank\" rel=\"noopener\"> </a>访问Rabbit Mq的管理控制台，使用刚才创建的账号登陆系统：</p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004023387-110874920.png\" alt=\"\"></p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004035121-53385779.png\" alt=\"\"></p>\n<p>其实，除了可查看所有的信息 ，上面的命令 增删改查、权限设置，都可以在这个页面完成，还可以依据业务需求设置策略(policy)，具体的就不在这里啰嗦了，大家可以看看网上的帖子。</p>\n<h3 id=\"权限设置\"><a href=\"#权限设置\" class=\"headerlink\" title=\"权限设置\"></a><span style=\"font-size: 14px; line-height: 1.5;\">权限设置</span></h3><p><span style=\"font-size: 14px; line-height: 1.5;\">用户有了角色，那也需要权限设置啊，别急，慢慢来：</span></p>\n<p>按照官方文档，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。</p>\n<p>我们配置权限会影响到exchange、queue的声明和删除。</p>\n<p>读写权限影响到从queue里取消息、向exchange发送消息以及queue和exchange的绑定(binding)操作。</p>\n<p>例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限</p>\n<p>权限相关命令为：</p>\n<p>(1) 设置用户权限</p>\n<p>rabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP</p>\n<p>(2) 查看(指定hostpath)所有用户的权限信息</p>\n<p>rabbitmqctl  list_permissions  [-p  VHostPath]</p>\n<p>(3) 查看指定用户的权限信息</p>\n<p>rabbitmqctl  list_user_permissions  User</p>\n<p>(4)  清除用户的权限信息</p>\n<p>rabbitmqctl  clear_permissions  [-p VHostPath]  User</p>\n<p>现在环境搭好了，用户、角色、权限全部设置好，开始进行code（原理整理，及编码 待续）</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p>安装参考 <a href=\"http://www.rabbitmq.com/install-windows-manual.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/install-windows-manual.html</a></p>\n<p>权限内容参考 <a href=\"http://www.rabbitmq.com/man/rabbitmqctl.1.man.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/man/rabbitmqctl.1.man.html</a></p>\n<p>权限命令摘自 <a href=\"https://my.oschina.net/hncscwc/blog/262246\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/hncscwc/blog/262246</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>rabbitMQ是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器，Rabbit MQ 是建立在Erlang OTP平台上。</p>\n<h2 id=\"1-安装Erlang\"><a href=\"#1-安装Erlang\" class=\"headerlink\" title=\"1.安装Erlang \"></a>1.安装<span style=\"font-size: 18.018px; line-height: 31.5315px;\">Erlang</span><span style=\"font-size: 18.018px; line-height: 31.5315px;\"> </span></h2><p>所以在安装rabbitMQ之前，需要先安装Erlang 。</p>\n<p>小编使用的是<a href=\"https://pan.baidu.com/s/1c2826rA\" target=\"_blank\" rel=\"noopener\">otp_win64_18.1</a> ，需要其他版本或者32位系统的，可以去<a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"noopener\">官网</a>下载。</p>\n<p>全部点击“下一步”就行。</p>\n<p>有的选择其他的安装方式，可能需要添加一下系统环境变量（正常安装的也要检查下）：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160923235447637-1807926011.png\" alt=\"\"></p>\n<p>有最好，没有的话就手动添加嘛。</p>\n<h2 id=\"2-安装RabbitMQ\"><a href=\"#2-安装RabbitMQ\" class=\"headerlink\" title=\"2.安装RabbitMQ\"></a>2.安装<span style=\"color: #333333; font-family: 'Microsoft YaHei'; line-height: 24px;\">RabbitMQ</span></h2><p>下载运行<a href=\"https://pan.baidu.com/s/1cqpG0u\" target=\"_blank\" rel=\"noopener\">rabbitmq-server-3.6.5</a> ，需要其他版本或者32位系统的，可以去<a href=\"http://www.rabbitmq.com/download.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载。</p>\n<p>依旧可以不改变默认进行安装。</p>\n<p>需要注意：默认安装的RabbitMQ 监听端口是5672</p>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h2><h3 id=\"激活-RabbitMQ’s-Management-Plugin\"><a href=\"#激活-RabbitMQ’s-Management-Plugin\" class=\"headerlink\" title=\"激活 RabbitMQ’s Management Plugin\"></a>激活 RabbitMQ’s Management Plugin</h3><p>使用RabbitMQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态。</p>\n<p>打开命令窗口：</p>\n<p>输入命令：</p>\n<div class=\"cnblogs_code\"><br><br><pre><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin\\rabbitmq-plugins.bat</span><span style=\"color: #800000;\">“</span> enable rabbitmq_management</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924000520059-1488931520.png\" alt=\"\"></p>\n<p>这样，就安装好插件了，是不是能使用了呢？别急，需要重启服务才行，使用命令：</p>\n<div class=\"cnblogs_code\"><br><br><pre>net stop RabbitMQ &amp;&amp; net start RabbitMQ</pre><br><br></div>\n\n<p>这时候的，也许会出现这种结果：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001111465-1934628397.png\" alt=\"\"></p>\n<p>“发生错误：发生系统错误 <span lang=\"EN-US\">5。<span lang=\"EN-US\">  拒绝访问。”</span></span></p>\n<p>这是什么鬼？查了下，原来，5代表的是：不是系统管理员权限。</p>\n<p>问题解决方案：使用管理员打开<span lang=\"EN-US\">cmd再执行此命令：</span></p>\n<p><span lang=\"EN-US\"><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001344449-518927811.png\" alt=\"\"></span></p>\n<p>这样就结束了吗？当然没有。</p>\n<h3 id=\"创建用户，密码，绑定角色\"><a href=\"#创建用户，密码，绑定角色\" class=\"headerlink\" title=\"创建用户，密码，绑定角色\"></a>创建用户，密码，绑定角色</h3><p>使用<span lang=\"EN-US\">rabbitmqctl控制台命令（位于<span lang=\"EN-US\">C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.6.5\\sbin&gt;）来创建用户，密码，绑定权限等。</span></span></p>\n<p>注意：安装路径不同的请看仔细啊。</p>\n<p>rabbitmq的用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p>\n<p>查看已有用户及用户的角色：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat list_users</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924001810231-489339837.png\" alt=\"\"></p>\n<p>新增一个用户：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat add_user username password</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002317996-1750317042.png\" alt=\"\"></p>\n<p>此时来看下我们当前用户哈：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924002417481-667312419.png\" alt=\"\"></p>\n<p>eric 后面没有“[administrator]”</p>\n<p>这个administrator是干嘛用的呢？这就涉及到用户角色问题了：</p>\n<p>按照我个人理解，rabbitmq用户角色可分为五类：超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p>\n<p>(1) 超级管理员(administrator)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>\n<p>(2) 监控者(monitoring)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等) </p>\n<p>(3) 策略制定者(policymaker)</p>\n<p>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。</p>\n<p>(4) 普通管理者(management)</p>\n<p>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p>\n<p>(5) 其他的</p>\n<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>\n<p>好啦，我们也给 eric 变成 “超级管理员” 角色：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat set_user_tags username administrator</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003014246-2015422375.png\" alt=\"\"></p>\n<p>再看下结果哈：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003047621-1862534375.png\" alt=\"\"></p>\n<p>当然，除了上面的administrator 还有 monitoring、policymaker、management、自定义名称 ，对应上面介绍到的不同的角色。</p>\n<p>像我们人一样，我们角色除了是公司的员工，还是父母的孩子、子女的爸妈等，用户也可以同时具有多个角色,设置方式:</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat  set_user_tags  username tag1 tag2 …</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924005224668-1215172795.png\" alt=\"\"></p>\n<p>恩，现在总觉得guest 这个不安全（它的默认密码是guest）,想更改密码，好办：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl change_password userName newPassword</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003352168-1350202979.png\" alt=\"\"></p>\n<p>有的人也许会说，我就是看guest不爽，老子新增了administrator用户了，就是想干掉它，可以：</p>\n<div class=\"cnblogs_code\"><br><br><pre>rabbitmqctl.bat delete_user username</pre><br><br></div>\n\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924003722731-332310837.png\" alt=\"\"></p>\n<p> 这时，可能有人就要问了：命令框是只有一个用户了，你怎么操作啊？怎么查看执行情况啊/</p>\n<p> 当然有路子啦：</p>\n<p>使用浏览器打开<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\"> http://localhost:15672</a><a href=\"http://localhost:15672%C2%A0/\" target=\"_blank\" rel=\"noopener\"> </a>访问Rabbit Mq的管理控制台，使用刚才创建的账号登陆系统：</p>\n<p> <img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004023387-110874920.png\" alt=\"\"></p>\n<p><img src=\"http://images2015.cnblogs.com/blog/784082/201609/784082-20160924004035121-53385779.png\" alt=\"\"></p>\n<p>其实，除了可查看所有的信息 ，上面的命令 增删改查、权限设置，都可以在这个页面完成，还可以依据业务需求设置策略(policy)，具体的就不在这里啰嗦了，大家可以看看网上的帖子。</p>\n<h3 id=\"权限设置\"><a href=\"#权限设置\" class=\"headerlink\" title=\"权限设置\"></a><span style=\"font-size: 14px; line-height: 1.5;\">权限设置</span></h3><p><span style=\"font-size: 14px; line-height: 1.5;\">用户有了角色，那也需要权限设置啊，别急，慢慢来：</span></p>\n<p>按照官方文档，用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。</p>\n<p>我们配置权限会影响到exchange、queue的声明和删除。</p>\n<p>读写权限影响到从queue里取消息、向exchange发送消息以及queue和exchange的绑定(binding)操作。</p>\n<p>例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限</p>\n<p>权限相关命令为：</p>\n<p>(1) 设置用户权限</p>\n<p>rabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP</p>\n<p>(2) 查看(指定hostpath)所有用户的权限信息</p>\n<p>rabbitmqctl  list_permissions  [-p  VHostPath]</p>\n<p>(3) 查看指定用户的权限信息</p>\n<p>rabbitmqctl  list_user_permissions  User</p>\n<p>(4)  清除用户的权限信息</p>\n<p>rabbitmqctl  clear_permissions  [-p VHostPath]  User</p>\n<p>现在环境搭好了，用户、角色、权限全部设置好，开始进行code（原理整理，及编码 待续）</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p>安装参考 <a href=\"http://www.rabbitmq.com/install-windows-manual.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/install-windows-manual.html</a></p>\n<p>权限内容参考 <a href=\"http://www.rabbitmq.com/man/rabbitmqctl.1.man.html\" target=\"_blank\" rel=\"noopener\">http://www.rabbitmq.com/man/rabbitmqctl.1.man.html</a></p>\n<p>权限命令摘自 <a href=\"https://my.oschina.net/hncscwc/blog/262246\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/hncscwc/blog/262246</a></p>\n"},{"title":"对称加密与非对称加密","date":"2017-12-05T03:37:00.000Z","_content":"\n## （一）对称加密（Symmetric Cryptography）\n\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。\n\n对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。\n\n2000年10月2日，美国国家标准与技术研究所（NIST--_American National Institute of Standards and Technology_）选择了Rijndael算法作为新的高级加密标准（AES--_Advanced_ _Encryption_ _Standard）。_.NET中包含了Rijndael算法，类名叫RijndaelManaged，下面举个例子。\n\n加密过程：\n\n\n```java\n        private string myData = \"hello\";\n        private string myPassword = \"OpenSesame\";\n        private byte[] cipherText;\n        private byte[] salt = { 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0 };\n            \n\n        private void mnuSymmetricEncryption_Click(object sender, RoutedEventArgs e)\n        {\n            var key = new Rfc2898DeriveBytes(myPassword, salt);\n            // Encrypt the data.\n            var algorithm = new RijndaelManaged();\n            algorithm.Key = key.GetBytes(16);\n            algorithm.IV = key.GetBytes(16);\n            var sourceBytes = new System.Text.UnicodeEncoding().GetBytes(myData);\n            using (var sourceStream = new MemoryStream(sourceBytes))\n            using (var destinationStream = new MemoryStream())\n            using (var crypto = new CryptoStream(sourceStream, algorithm.CreateEncryptor(), CryptoStreamMode.Read))\n            {\n                moveBytes(crypto, destinationStream);\n                cipherText = destinationStream.ToArray();\n            }\n            MessageBox.Show(String.Format(\"Data:{0}{1}Encrypted and Encoded:{2}\", myData, Environment.NewLine, Convert.ToBase64String(cipherText)));\n        }\n        private void moveBytes(Stream source, Stream dest)\n        {\n            byte[] bytes = new byte[2048];\n            var count = source.Read(bytes, 0, bytes.Length);\n            while (0 != count)\n            {\n                dest.Write(bytes, 0, count);\n                count = source.Read(bytes, 0, bytes.Length);\n            }\n        }\n```\n\n\n解密过程：\n\n\n```java\n        private void mnuSymmetricDecryption_Click(object sender, RoutedEventArgs e)\n        {\n            if (cipherText == null)\n            {\n                MessageBox.Show(\"Encrypt Data First!\");\n                return;\n            }\n            var key = new Rfc2898DeriveBytes(myPassword, salt);\n            // Try to decrypt, thus showing it can be round-tripped.\n            var algorithm = new RijndaelManaged();\n            algorithm.Key = key.GetBytes(16);\n            algorithm.IV = key.GetBytes(16);\n            using (var sourceStream = new MemoryStream(cipherText))\n            using (var destinationStream = new MemoryStream())\n            using (var crypto = new CryptoStream(sourceStream, algorithm.CreateDecryptor(), CryptoStreamMode.Read))\n            {\n                moveBytes(crypto, destinationStream);\n                var decryptedBytes = destinationStream.ToArray();\n                var decryptedMessage = new UnicodeEncoding().GetString(\n                decryptedBytes);\n                MessageBox.Show(decryptedMessage);\n            }\n        }\n```\n\n\n对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。\n\n## （二）非对称加密（Asymmetric Cryptography）\n\n非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人--银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。\n\n目前最常用的非对称加密算法是RSA算法，是Rivest, Shamir, 和Adleman于1978年发明，他们那时都是在MIT。.NET中也有RSA算法，请看下面的例子：\n\n加密过程：\n\n\n```java\n        private byte[] rsaCipherText;\n        private void mnuAsymmetricEncryption_Click(object sender, RoutedEventArgs e)\n        {\n            var rsa = 1;\n            // Encrypt the data.\n            var cspParms = new CspParameters(rsa);\n            cspParms.Flags = CspProviderFlags.UseMachineKeyStore;\n            cspParms.KeyContainerName = \"My Keys\";\n            var algorithm = new RSACryptoServiceProvider(cspParms);\n            var sourceBytes = new UnicodeEncoding().GetBytes(myData);\n            rsaCipherText = algorithm.Encrypt(sourceBytes, true);\n            MessageBox.Show(String.Format(\"Data: {0}{1}Encrypted and Encoded: {2}\",\n                myData, Environment.NewLine,\n                Convert.ToBase64String(rsaCipherText)));\n        }\n```\n\n\n解密过程：\n\n\n```java\n        private void mnuAsymmetricDecryption_Click(object sender, RoutedEventArgs e)\n        {\n            if(rsaCipherText==null)\n            {\n                MessageBox.Show(\"Encrypt First!\");\n                return;\n            }\n            var rsa = 1;\n            // decrypt the data.\n            var cspParms = new CspParameters(rsa);\n            cspParms.Flags = CspProviderFlags.UseMachineKeyStore;\n            cspParms.KeyContainerName = \"My Keys\";\n            var algorithm = new RSACryptoServiceProvider(cspParms);\n            var unencrypted = algorithm.Decrypt(rsaCipherText, true);\n            MessageBox.Show(new UnicodeEncoding().GetString(unencrypted));\n        }\n```\n\n\n虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。为了解释这个过程，请看下面的例子：\n\n（1） Alice需要在银行的网站做一笔交易，她的浏览器首先生成了一个随机数作为对称密钥。\n\n（2） Alice的浏览器向银行的网站请求公钥。\n\n（3） 银行将公钥发送给Alice。\n\n（4） Alice的浏览器使用银行的公钥将自己的对称密钥加密。\n\n（5） Alice的浏览器将加密后的对称密钥发送给银行。\n\n（6） 银行使用私钥解密得到Alice浏览器的对称密钥。\n\n（7） Alice与银行可以使用对称密钥来对沟通的内容进行加密与解密了。\n\n[![image_thumb3](http://images.cnitblog.com/blog/442200/201410/121924258581724.png \"image_thumb3\")](http://images.cnitblog.com/blog/442200/201410/121924251089094.png)\n\n## （三）总结\n\n（1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。\n\n（2） 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。\n\n（3） 解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。\n\n\n\n原创地址：[http://www.cnblogs.com/jfzhu/p/4020928.html](http://www.cnblogs.com/jfzhu/p/4020928.html)","source":"_posts/对称加密与非对称加密.md","raw":"---\ntitle: 对称加密与非对称加密\ndate: 2017-12-05 11:37:00\ntags: RSA\ncategories: 加解密\n---\n\n## （一）对称加密（Symmetric Cryptography）\n\n对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。\n\n对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。\n\n2000年10月2日，美国国家标准与技术研究所（NIST--_American National Institute of Standards and Technology_）选择了Rijndael算法作为新的高级加密标准（AES--_Advanced_ _Encryption_ _Standard）。_.NET中包含了Rijndael算法，类名叫RijndaelManaged，下面举个例子。\n\n加密过程：\n\n\n```java\n        private string myData = \"hello\";\n        private string myPassword = \"OpenSesame\";\n        private byte[] cipherText;\n        private byte[] salt = { 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0 };\n            \n\n        private void mnuSymmetricEncryption_Click(object sender, RoutedEventArgs e)\n        {\n            var key = new Rfc2898DeriveBytes(myPassword, salt);\n            // Encrypt the data.\n            var algorithm = new RijndaelManaged();\n            algorithm.Key = key.GetBytes(16);\n            algorithm.IV = key.GetBytes(16);\n            var sourceBytes = new System.Text.UnicodeEncoding().GetBytes(myData);\n            using (var sourceStream = new MemoryStream(sourceBytes))\n            using (var destinationStream = new MemoryStream())\n            using (var crypto = new CryptoStream(sourceStream, algorithm.CreateEncryptor(), CryptoStreamMode.Read))\n            {\n                moveBytes(crypto, destinationStream);\n                cipherText = destinationStream.ToArray();\n            }\n            MessageBox.Show(String.Format(\"Data:{0}{1}Encrypted and Encoded:{2}\", myData, Environment.NewLine, Convert.ToBase64String(cipherText)));\n        }\n        private void moveBytes(Stream source, Stream dest)\n        {\n            byte[] bytes = new byte[2048];\n            var count = source.Read(bytes, 0, bytes.Length);\n            while (0 != count)\n            {\n                dest.Write(bytes, 0, count);\n                count = source.Read(bytes, 0, bytes.Length);\n            }\n        }\n```\n\n\n解密过程：\n\n\n```java\n        private void mnuSymmetricDecryption_Click(object sender, RoutedEventArgs e)\n        {\n            if (cipherText == null)\n            {\n                MessageBox.Show(\"Encrypt Data First!\");\n                return;\n            }\n            var key = new Rfc2898DeriveBytes(myPassword, salt);\n            // Try to decrypt, thus showing it can be round-tripped.\n            var algorithm = new RijndaelManaged();\n            algorithm.Key = key.GetBytes(16);\n            algorithm.IV = key.GetBytes(16);\n            using (var sourceStream = new MemoryStream(cipherText))\n            using (var destinationStream = new MemoryStream())\n            using (var crypto = new CryptoStream(sourceStream, algorithm.CreateDecryptor(), CryptoStreamMode.Read))\n            {\n                moveBytes(crypto, destinationStream);\n                var decryptedBytes = destinationStream.ToArray();\n                var decryptedMessage = new UnicodeEncoding().GetString(\n                decryptedBytes);\n                MessageBox.Show(decryptedMessage);\n            }\n        }\n```\n\n\n对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。\n\n## （二）非对称加密（Asymmetric Cryptography）\n\n非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人--银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。\n\n目前最常用的非对称加密算法是RSA算法，是Rivest, Shamir, 和Adleman于1978年发明，他们那时都是在MIT。.NET中也有RSA算法，请看下面的例子：\n\n加密过程：\n\n\n```java\n        private byte[] rsaCipherText;\n        private void mnuAsymmetricEncryption_Click(object sender, RoutedEventArgs e)\n        {\n            var rsa = 1;\n            // Encrypt the data.\n            var cspParms = new CspParameters(rsa);\n            cspParms.Flags = CspProviderFlags.UseMachineKeyStore;\n            cspParms.KeyContainerName = \"My Keys\";\n            var algorithm = new RSACryptoServiceProvider(cspParms);\n            var sourceBytes = new UnicodeEncoding().GetBytes(myData);\n            rsaCipherText = algorithm.Encrypt(sourceBytes, true);\n            MessageBox.Show(String.Format(\"Data: {0}{1}Encrypted and Encoded: {2}\",\n                myData, Environment.NewLine,\n                Convert.ToBase64String(rsaCipherText)));\n        }\n```\n\n\n解密过程：\n\n\n```java\n        private void mnuAsymmetricDecryption_Click(object sender, RoutedEventArgs e)\n        {\n            if(rsaCipherText==null)\n            {\n                MessageBox.Show(\"Encrypt First!\");\n                return;\n            }\n            var rsa = 1;\n            // decrypt the data.\n            var cspParms = new CspParameters(rsa);\n            cspParms.Flags = CspProviderFlags.UseMachineKeyStore;\n            cspParms.KeyContainerName = \"My Keys\";\n            var algorithm = new RSACryptoServiceProvider(cspParms);\n            var unencrypted = algorithm.Decrypt(rsaCipherText, true);\n            MessageBox.Show(new UnicodeEncoding().GetString(unencrypted));\n        }\n```\n\n\n虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。为了解释这个过程，请看下面的例子：\n\n（1） Alice需要在银行的网站做一笔交易，她的浏览器首先生成了一个随机数作为对称密钥。\n\n（2） Alice的浏览器向银行的网站请求公钥。\n\n（3） 银行将公钥发送给Alice。\n\n（4） Alice的浏览器使用银行的公钥将自己的对称密钥加密。\n\n（5） Alice的浏览器将加密后的对称密钥发送给银行。\n\n（6） 银行使用私钥解密得到Alice浏览器的对称密钥。\n\n（7） Alice与银行可以使用对称密钥来对沟通的内容进行加密与解密了。\n\n[![image_thumb3](http://images.cnitblog.com/blog/442200/201410/121924258581724.png \"image_thumb3\")](http://images.cnitblog.com/blog/442200/201410/121924251089094.png)\n\n## （三）总结\n\n（1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。\n\n（2） 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。\n\n（3） 解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。\n\n\n\n原创地址：[http://www.cnblogs.com/jfzhu/p/4020928.html](http://www.cnblogs.com/jfzhu/p/4020928.html)","slug":"对称加密与非对称加密","published":1,"updated":"2018-10-17T05:48:51.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr5p0032k4nzyuuzinsx","content":"<h2 id=\"（一）对称加密（Symmetric-Cryptography）\"><a href=\"#（一）对称加密（Symmetric-Cryptography）\" class=\"headerlink\" title=\"（一）对称加密（Symmetric Cryptography）\"></a>（一）对称加密（Symmetric Cryptography）</h2><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p>\n<p>对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。</p>\n<p>2000年10月2日，美国国家标准与技术研究所（NIST–<em>American National Institute of Standards and Technology</em>）选择了Rijndael算法作为新的高级加密标准（AES–<em>Advanced</em> <em>Encryption</em> <em>Standard）。</em>.NET中包含了Rijndael算法，类名叫RijndaelManaged，下面举个例子。</p>\n<p>加密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> string myData = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> string myPassword = <span class=\"string\">\"OpenSesame\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] cipherText;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] salt = &#123; <span class=\"number\">0x0</span>, <span class=\"number\">0x1</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x1</span>, <span class=\"number\">0x0</span> &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuSymmetricEncryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Rfc2898DeriveBytes(myPassword, salt);</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RijndaelManaged();</span><br><span class=\"line\">    algorithm.Key = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    algorithm.IV = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sourceBytes = <span class=\"keyword\">new</span> System.Text.UnicodeEncoding().GetBytes(myData);</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> sourceStream = <span class=\"keyword\">new</span> MemoryStream(sourceBytes))</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> destinationStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> crypto = <span class=\"keyword\">new</span> CryptoStream(sourceStream, algorithm.CreateEncryptor(), CryptoStreamMode.Read))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        moveBytes(crypto, destinationStream);</span><br><span class=\"line\">        cipherText = destinationStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBox.Show(String.Format(<span class=\"string\">\"Data:&#123;0&#125;&#123;1&#125;Encrypted and Encoded:&#123;2&#125;\"</span>, myData, Environment.NewLine, Convert.ToBase64String(cipherText)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBytes</span><span class=\"params\">(Stream source, Stream dest)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2048</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = source.Read(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">0</span> != count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dest.Write(bytes, <span class=\"number\">0</span>, count);</span><br><span class=\"line\">        count = source.Read(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuSymmetricDecryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cipherText == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">\"Encrypt Data First!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Rfc2898DeriveBytes(myPassword, salt);</span><br><span class=\"line\">    <span class=\"comment\">// Try to decrypt, thus showing it can be round-tripped.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RijndaelManaged();</span><br><span class=\"line\">    algorithm.Key = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    algorithm.IV = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> sourceStream = <span class=\"keyword\">new</span> MemoryStream(cipherText))</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> destinationStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> crypto = <span class=\"keyword\">new</span> CryptoStream(sourceStream, algorithm.CreateDecryptor(), CryptoStreamMode.Read))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        moveBytes(crypto, destinationStream);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> decryptedBytes = destinationStream.ToArray();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> decryptedMessage = <span class=\"keyword\">new</span> UnicodeEncoding().GetString(</span><br><span class=\"line\">        decryptedBytes);</span><br><span class=\"line\">        MessageBox.Show(decryptedMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。</p>\n<h2 id=\"（二）非对称加密（Asymmetric-Cryptography）\"><a href=\"#（二）非对称加密（Asymmetric-Cryptography）\" class=\"headerlink\" title=\"（二）非对称加密（Asymmetric Cryptography）\"></a>（二）非对称加密（Asymmetric Cryptography）</h2><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p>\n<p>目前最常用的非对称加密算法是RSA算法，是Rivest, Shamir, 和Adleman于1978年发明，他们那时都是在MIT。.NET中也有RSA算法，请看下面的例子：</p>\n<p>加密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] rsaCipherText;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuAsymmetricEncryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cspParms = <span class=\"keyword\">new</span> CspParameters(rsa);</span><br><span class=\"line\">    cspParms.Flags = CspProviderFlags.UseMachineKeyStore;</span><br><span class=\"line\">    cspParms.KeyContainerName = <span class=\"string\">\"My Keys\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RSACryptoServiceProvider(cspParms);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sourceBytes = <span class=\"keyword\">new</span> UnicodeEncoding().GetBytes(myData);</span><br><span class=\"line\">    rsaCipherText = algorithm.Encrypt(sourceBytes, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    MessageBox.Show(String.Format(<span class=\"string\">\"Data: &#123;0&#125;&#123;1&#125;Encrypted and Encoded: &#123;2&#125;\"</span>,</span><br><span class=\"line\">        myData, Environment.NewLine,</span><br><span class=\"line\">        Convert.ToBase64String(rsaCipherText)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuAsymmetricDecryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rsaCipherText==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">\"Encrypt First!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// decrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cspParms = <span class=\"keyword\">new</span> CspParameters(rsa);</span><br><span class=\"line\">    cspParms.Flags = CspProviderFlags.UseMachineKeyStore;</span><br><span class=\"line\">    cspParms.KeyContainerName = <span class=\"string\">\"My Keys\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RSACryptoServiceProvider(cspParms);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> unencrypted = algorithm.Decrypt(rsaCipherText, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    MessageBox.Show(<span class=\"keyword\">new</span> UnicodeEncoding().GetString(unencrypted));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。为了解释这个过程，请看下面的例子：</p>\n<p>（1） Alice需要在银行的网站做一笔交易，她的浏览器首先生成了一个随机数作为对称密钥。</p>\n<p>（2） Alice的浏览器向银行的网站请求公钥。</p>\n<p>（3） 银行将公钥发送给Alice。</p>\n<p>（4） Alice的浏览器使用银行的公钥将自己的对称密钥加密。</p>\n<p>（5） Alice的浏览器将加密后的对称密钥发送给银行。</p>\n<p>（6） 银行使用私钥解密得到Alice浏览器的对称密钥。</p>\n<p>（7） Alice与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</p>\n<p><a href=\"http://images.cnitblog.com/blog/442200/201410/121924251089094.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnitblog.com/blog/442200/201410/121924258581724.png\" alt=\"image_thumb3\" title=\"image_thumb3\"></a></p>\n<h2 id=\"（三）总结\"><a href=\"#（三）总结\" class=\"headerlink\" title=\"（三）总结\"></a>（三）总结</h2><p>（1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p>\n<p>（2） 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</p>\n<p>（3） 解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。</p>\n<p>原创地址：<a href=\"http://www.cnblogs.com/jfzhu/p/4020928.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jfzhu/p/4020928.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"（一）对称加密（Symmetric-Cryptography）\"><a href=\"#（一）对称加密（Symmetric-Cryptography）\" class=\"headerlink\" title=\"（一）对称加密（Symmetric Cryptography）\"></a>（一）对称加密（Symmetric Cryptography）</h2><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p>\n<p>对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。</p>\n<p>2000年10月2日，美国国家标准与技术研究所（NIST–<em>American National Institute of Standards and Technology</em>）选择了Rijndael算法作为新的高级加密标准（AES–<em>Advanced</em> <em>Encryption</em> <em>Standard）。</em>.NET中包含了Rijndael算法，类名叫RijndaelManaged，下面举个例子。</p>\n<p>加密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> string myData = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> string myPassword = <span class=\"string\">\"OpenSesame\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] cipherText;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] salt = &#123; <span class=\"number\">0x0</span>, <span class=\"number\">0x1</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x6</span>, <span class=\"number\">0x5</span>, <span class=\"number\">0x4</span>, <span class=\"number\">0x3</span>, <span class=\"number\">0x2</span>, <span class=\"number\">0x1</span>, <span class=\"number\">0x0</span> &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuSymmetricEncryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Rfc2898DeriveBytes(myPassword, salt);</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RijndaelManaged();</span><br><span class=\"line\">    algorithm.Key = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    algorithm.IV = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sourceBytes = <span class=\"keyword\">new</span> System.Text.UnicodeEncoding().GetBytes(myData);</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> sourceStream = <span class=\"keyword\">new</span> MemoryStream(sourceBytes))</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> destinationStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> crypto = <span class=\"keyword\">new</span> CryptoStream(sourceStream, algorithm.CreateEncryptor(), CryptoStreamMode.Read))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        moveBytes(crypto, destinationStream);</span><br><span class=\"line\">        cipherText = destinationStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MessageBox.Show(String.Format(<span class=\"string\">\"Data:&#123;0&#125;&#123;1&#125;Encrypted and Encoded:&#123;2&#125;\"</span>, myData, Environment.NewLine, Convert.ToBase64String(cipherText)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBytes</span><span class=\"params\">(Stream source, Stream dest)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">2048</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = source.Read(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">0</span> != count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dest.Write(bytes, <span class=\"number\">0</span>, count);</span><br><span class=\"line\">        count = source.Read(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuSymmetricDecryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cipherText == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">\"Encrypt Data First!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Rfc2898DeriveBytes(myPassword, salt);</span><br><span class=\"line\">    <span class=\"comment\">// Try to decrypt, thus showing it can be round-tripped.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RijndaelManaged();</span><br><span class=\"line\">    algorithm.Key = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    algorithm.IV = key.GetBytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> sourceStream = <span class=\"keyword\">new</span> MemoryStream(cipherText))</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> destinationStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    using (<span class=\"keyword\">var</span> crypto = <span class=\"keyword\">new</span> CryptoStream(sourceStream, algorithm.CreateDecryptor(), CryptoStreamMode.Read))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        moveBytes(crypto, destinationStream);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> decryptedBytes = destinationStream.ToArray();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> decryptedMessage = <span class=\"keyword\">new</span> UnicodeEncoding().GetString(</span><br><span class=\"line\">        decryptedBytes);</span><br><span class=\"line\">        MessageBox.Show(decryptedMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。</p>\n<h2 id=\"（二）非对称加密（Asymmetric-Cryptography）\"><a href=\"#（二）非对称加密（Asymmetric-Cryptography）\" class=\"headerlink\" title=\"（二）非对称加密（Asymmetric Cryptography）\"></a>（二）非对称加密（Asymmetric Cryptography）</h2><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p>\n<p>目前最常用的非对称加密算法是RSA算法，是Rivest, Shamir, 和Adleman于1978年发明，他们那时都是在MIT。.NET中也有RSA算法，请看下面的例子：</p>\n<p>加密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] rsaCipherText;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuAsymmetricEncryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Encrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cspParms = <span class=\"keyword\">new</span> CspParameters(rsa);</span><br><span class=\"line\">    cspParms.Flags = CspProviderFlags.UseMachineKeyStore;</span><br><span class=\"line\">    cspParms.KeyContainerName = <span class=\"string\">\"My Keys\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RSACryptoServiceProvider(cspParms);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sourceBytes = <span class=\"keyword\">new</span> UnicodeEncoding().GetBytes(myData);</span><br><span class=\"line\">    rsaCipherText = algorithm.Encrypt(sourceBytes, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    MessageBox.Show(String.Format(<span class=\"string\">\"Data: &#123;0&#125;&#123;1&#125;Encrypted and Encoded: &#123;2&#125;\"</span>,</span><br><span class=\"line\">        myData, Environment.NewLine,</span><br><span class=\"line\">        Convert.ToBase64String(rsaCipherText)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解密过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">mnuAsymmetricDecryption_Click</span><span class=\"params\">(object sender, RoutedEventArgs e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rsaCipherText==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">\"Encrypt First!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rsa = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// decrypt the data.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cspParms = <span class=\"keyword\">new</span> CspParameters(rsa);</span><br><span class=\"line\">    cspParms.Flags = CspProviderFlags.UseMachineKeyStore;</span><br><span class=\"line\">    cspParms.KeyContainerName = <span class=\"string\">\"My Keys\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> algorithm = <span class=\"keyword\">new</span> RSACryptoServiceProvider(cspParms);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> unencrypted = algorithm.Decrypt(rsaCipherText, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    MessageBox.Show(<span class=\"keyword\">new</span> UnicodeEncoding().GetString(unencrypted));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。为了解释这个过程，请看下面的例子：</p>\n<p>（1） Alice需要在银行的网站做一笔交易，她的浏览器首先生成了一个随机数作为对称密钥。</p>\n<p>（2） Alice的浏览器向银行的网站请求公钥。</p>\n<p>（3） 银行将公钥发送给Alice。</p>\n<p>（4） Alice的浏览器使用银行的公钥将自己的对称密钥加密。</p>\n<p>（5） Alice的浏览器将加密后的对称密钥发送给银行。</p>\n<p>（6） 银行使用私钥解密得到Alice浏览器的对称密钥。</p>\n<p>（7） Alice与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</p>\n<p><a href=\"http://images.cnitblog.com/blog/442200/201410/121924251089094.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnitblog.com/blog/442200/201410/121924258581724.png\" alt=\"image_thumb3\" title=\"image_thumb3\"></a></p>\n<h2 id=\"（三）总结\"><a href=\"#（三）总结\" class=\"headerlink\" title=\"（三）总结\"></a>（三）总结</h2><p>（1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p>\n<p>（2） 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</p>\n<p>（3） 解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。</p>\n<p>原创地址：<a href=\"http://www.cnblogs.com/jfzhu/p/4020928.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jfzhu/p/4020928.html</a></p>\n"},{"title":"Anaconda的使用及配置方法","date":"2017-07-17T01:27:38.000Z","_content":"\n俗话说‘人生苦短，我有Python’，但是如果初学python的过程中碰到包和Python版本的问题估计会让你再苦一会，我在学习Python的爬虫框架中看到看到了anaconda的介绍，简直是相见恨晚啊，我觉的每个Python的学习网站上首先都应该使用anaconda来进行教程，因为在实践的过程中光环境的各种报错就能消磨掉你所有的学习兴趣！\n\n- 下面简单的介绍下anaconda，它是将Python版本和许多常用的package打包直接来使用的Python发行版，支持Linux、mac、windows系统，并有一个conda强大的执行工具。使用起来绝对会让你舒服\n- \n##### Anaconda的安装\n\n不同的操作系统都是直接的在官网中下载安装包进行下载，选择你最经常使用的Python版本进行安装，下载完之后，尽量的按照anaconda默认的行为安装，安装时会自动的吧bin目录加入到环境变量path中去。\n\n- 安装成功就可以通过：conda --version命令进行检验是否安装成功。\n- 还可以通过python --version 命令查看发行版默认的Python版本。\n- \n###### conda的常用命令操作\n\nconda管理工具可以同时安装不同版本的python，并且自由的进行切换，经常使用的有以下的命令：\n\n\n```\n# 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）\nconda create --name python34 python=3.4\n\n# 安装好后，使用activate激活某个环境\nactivate python34 # for Windows\nsource activate python34 # for Linux & Mac\n# 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH\n\n# 此时，再次输入\npython --version\n# 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境\n\n# 如果想返回默认的python 2.7环境，运行\ndeactivate python34 # for Windows\nsource deactivate python34 # for Linux & Mac\n\n# 删除一个已有的环境\nconda remove --name python34 --all\n```\n###### 使用conda管理包\n\n\n```\n# 安装scipy\nconda install scipy\n# conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）\n\n# 查看已经安装的packages\nconda list\n# 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包\n\n# 查看当前环境下已安装的包\nconda list\n\n# 查看某个指定环境的已安装包\nconda list -n python34\n\n# 查找package信息\nconda search numpy\n\n# 安装package\nconda install -n python34 numpy\n# 如果不用-n指定环境名称，则被安装在当前活跃环境\n# 也可以通过-c指定通过某个channel安装\n\n# 更新package\nconda update -n python34 numpy\n\n# 删除package\nconda remove -n python34 numpy\n\n# 更新conda，保持conda最新\nconda update conda\n\n# 更新anaconda\nconda update anaconda\n\n# 更新python\nconda update python\n# 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本\n```\n\n注意：在以上的使用过程中你会发现使用conda的下载速度非常的慢，因为使用的是国外的服务器，所以这里要设置为国内的镜像。使用下面的配置命令即可：\n\n```\n# 添加Anaconda的TUNA镜像\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n# TUNA的help中镜像地址加有引号，需要去掉\n\n# 设置搜索时显示通道地址\nconda config --set show_channel_urls yes\n```\n\n本文转自[http://blog.csdn.net/leoe_/article/details/70544190](http://blog.csdn.net/leoe_/article/details/70544190)","source":"_posts/python-anaconda的使用及配置方法.md","raw":"---\ntitle: Anaconda的使用及配置方法\ndate: 2017-07-17 09:27:38\ntags: Anaconda\ncategories: Python\n---\n\n俗话说‘人生苦短，我有Python’，但是如果初学python的过程中碰到包和Python版本的问题估计会让你再苦一会，我在学习Python的爬虫框架中看到看到了anaconda的介绍，简直是相见恨晚啊，我觉的每个Python的学习网站上首先都应该使用anaconda来进行教程，因为在实践的过程中光环境的各种报错就能消磨掉你所有的学习兴趣！\n\n- 下面简单的介绍下anaconda，它是将Python版本和许多常用的package打包直接来使用的Python发行版，支持Linux、mac、windows系统，并有一个conda强大的执行工具。使用起来绝对会让你舒服\n- \n##### Anaconda的安装\n\n不同的操作系统都是直接的在官网中下载安装包进行下载，选择你最经常使用的Python版本进行安装，下载完之后，尽量的按照anaconda默认的行为安装，安装时会自动的吧bin目录加入到环境变量path中去。\n\n- 安装成功就可以通过：conda --version命令进行检验是否安装成功。\n- 还可以通过python --version 命令查看发行版默认的Python版本。\n- \n###### conda的常用命令操作\n\nconda管理工具可以同时安装不同版本的python，并且自由的进行切换，经常使用的有以下的命令：\n\n\n```\n# 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）\nconda create --name python34 python=3.4\n\n# 安装好后，使用activate激活某个环境\nactivate python34 # for Windows\nsource activate python34 # for Linux & Mac\n# 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH\n\n# 此时，再次输入\npython --version\n# 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境\n\n# 如果想返回默认的python 2.7环境，运行\ndeactivate python34 # for Windows\nsource deactivate python34 # for Linux & Mac\n\n# 删除一个已有的环境\nconda remove --name python34 --all\n```\n###### 使用conda管理包\n\n\n```\n# 安装scipy\nconda install scipy\n# conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）\n\n# 查看已经安装的packages\nconda list\n# 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包\n\n# 查看当前环境下已安装的包\nconda list\n\n# 查看某个指定环境的已安装包\nconda list -n python34\n\n# 查找package信息\nconda search numpy\n\n# 安装package\nconda install -n python34 numpy\n# 如果不用-n指定环境名称，则被安装在当前活跃环境\n# 也可以通过-c指定通过某个channel安装\n\n# 更新package\nconda update -n python34 numpy\n\n# 删除package\nconda remove -n python34 numpy\n\n# 更新conda，保持conda最新\nconda update conda\n\n# 更新anaconda\nconda update anaconda\n\n# 更新python\nconda update python\n# 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本\n```\n\n注意：在以上的使用过程中你会发现使用conda的下载速度非常的慢，因为使用的是国外的服务器，所以这里要设置为国内的镜像。使用下面的配置命令即可：\n\n```\n# 添加Anaconda的TUNA镜像\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n# TUNA的help中镜像地址加有引号，需要去掉\n\n# 设置搜索时显示通道地址\nconda config --set show_channel_urls yes\n```\n\n本文转自[http://blog.csdn.net/leoe_/article/details/70544190](http://blog.csdn.net/leoe_/article/details/70544190)","slug":"python-anaconda的使用及配置方法","published":1,"updated":"2018-10-17T05:48:51.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr5s0033k4nz8mx4d7zm","content":"<p>俗话说‘人生苦短，我有Python’，但是如果初学python的过程中碰到包和Python版本的问题估计会让你再苦一会，我在学习Python的爬虫框架中看到看到了anaconda的介绍，简直是相见恨晚啊，我觉的每个Python的学习网站上首先都应该使用anaconda来进行教程，因为在实践的过程中光环境的各种报错就能消磨掉你所有的学习兴趣！</p>\n<ul>\n<li>下面简单的介绍下anaconda，它是将Python版本和许多常用的package打包直接来使用的Python发行版，支持Linux、mac、windows系统，并有一个conda强大的执行工具。使用起来绝对会让你舒服</li>\n<li><h5 id=\"Anaconda的安装\"><a href=\"#Anaconda的安装\" class=\"headerlink\" title=\"Anaconda的安装\"></a>Anaconda的安装</h5></li>\n</ul>\n<p>不同的操作系统都是直接的在官网中下载安装包进行下载，选择你最经常使用的Python版本进行安装，下载完之后，尽量的按照anaconda默认的行为安装，安装时会自动的吧bin目录加入到环境变量path中去。</p>\n<ul>\n<li>安装成功就可以通过：conda –version命令进行检验是否安装成功。</li>\n<li>还可以通过python –version 命令查看发行版默认的Python版本。</li>\n<li><h6 id=\"conda的常用命令操作\"><a href=\"#conda的常用命令操作\" class=\"headerlink\" title=\"conda的常用命令操作\"></a>conda的常用命令操作</h6></li>\n</ul>\n<p>conda管理工具可以同时安装不同版本的python，并且自由的进行切换，经常使用的有以下的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span><br><span class=\"line\">conda create --name python34 python=3.4</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装好后，使用activate激活某个环境</span><br><span class=\"line\">activate python34 # for Windows</span><br><span class=\"line\">source activate python34 # for Linux &amp; Mac</span><br><span class=\"line\"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时，再次输入</span><br><span class=\"line\">python --version</span><br><span class=\"line\"># 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果想返回默认的python 2.7环境，运行</span><br><span class=\"line\">deactivate python34 # for Windows</span><br><span class=\"line\">source deactivate python34 # for Linux &amp; Mac</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除一个已有的环境</span><br><span class=\"line\">conda remove --name python34 --all</span><br></pre></td></tr></table></figure>\n<h6 id=\"使用conda管理包\"><a href=\"#使用conda管理包\" class=\"headerlink\" title=\"使用conda管理包\"></a>使用conda管理包</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装scipy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看已经安装的packages</span><br><span class=\"line\">conda list</span><br><span class=\"line\"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前环境下已安装的包</span><br><span class=\"line\">conda list</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看某个指定环境的已安装包</span><br><span class=\"line\">conda list -n python34</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找package信息</span><br><span class=\"line\">conda search numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package</span><br><span class=\"line\">conda install -n python34 numpy</span><br><span class=\"line\"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class=\"line\"># 也可以通过-c指定通过某个channel安装</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新package</span><br><span class=\"line\">conda update -n python34 numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除package</span><br><span class=\"line\">conda remove -n python34 numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新conda，保持conda最新</span><br><span class=\"line\">conda update conda</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新anaconda</span><br><span class=\"line\">conda update anaconda</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新python</span><br><span class=\"line\">conda update python</span><br><span class=\"line\"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span><br></pre></td></tr></table></figure>\n<p>注意：在以上的使用过程中你会发现使用conda的下载速度非常的慢，因为使用的是国外的服务器，所以这里要设置为国内的镜像。使用下面的配置命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加Anaconda的TUNA镜像</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置搜索时显示通道地址</span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>\n<p>本文转自<a href=\"http://blog.csdn.net/leoe_/article/details/70544190\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/leoe_/article/details/70544190</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>俗话说‘人生苦短，我有Python’，但是如果初学python的过程中碰到包和Python版本的问题估计会让你再苦一会，我在学习Python的爬虫框架中看到看到了anaconda的介绍，简直是相见恨晚啊，我觉的每个Python的学习网站上首先都应该使用anaconda来进行教程，因为在实践的过程中光环境的各种报错就能消磨掉你所有的学习兴趣！</p>\n<ul>\n<li>下面简单的介绍下anaconda，它是将Python版本和许多常用的package打包直接来使用的Python发行版，支持Linux、mac、windows系统，并有一个conda强大的执行工具。使用起来绝对会让你舒服</li>\n<li><h5 id=\"Anaconda的安装\"><a href=\"#Anaconda的安装\" class=\"headerlink\" title=\"Anaconda的安装\"></a>Anaconda的安装</h5></li>\n</ul>\n<p>不同的操作系统都是直接的在官网中下载安装包进行下载，选择你最经常使用的Python版本进行安装，下载完之后，尽量的按照anaconda默认的行为安装，安装时会自动的吧bin目录加入到环境变量path中去。</p>\n<ul>\n<li>安装成功就可以通过：conda –version命令进行检验是否安装成功。</li>\n<li>还可以通过python –version 命令查看发行版默认的Python版本。</li>\n<li><h6 id=\"conda的常用命令操作\"><a href=\"#conda的常用命令操作\" class=\"headerlink\" title=\"conda的常用命令操作\"></a>conda的常用命令操作</h6></li>\n</ul>\n<p>conda管理工具可以同时安装不同版本的python，并且自由的进行切换，经常使用的有以下的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）</span><br><span class=\"line\">conda create --name python34 python=3.4</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装好后，使用activate激活某个环境</span><br><span class=\"line\">activate python34 # for Windows</span><br><span class=\"line\">source activate python34 # for Linux &amp; Mac</span><br><span class=\"line\"># 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时，再次输入</span><br><span class=\"line\">python --version</span><br><span class=\"line\"># 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果想返回默认的python 2.7环境，运行</span><br><span class=\"line\">deactivate python34 # for Windows</span><br><span class=\"line\">source deactivate python34 # for Linux &amp; Mac</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除一个已有的环境</span><br><span class=\"line\">conda remove --name python34 --all</span><br></pre></td></tr></table></figure>\n<h6 id=\"使用conda管理包\"><a href=\"#使用conda管理包\" class=\"headerlink\" title=\"使用conda管理包\"></a>使用conda管理包</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装scipy</span><br><span class=\"line\">conda install scipy</span><br><span class=\"line\"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看已经安装的packages</span><br><span class=\"line\">conda list</span><br><span class=\"line\"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前环境下已安装的包</span><br><span class=\"line\">conda list</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看某个指定环境的已安装包</span><br><span class=\"line\">conda list -n python34</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找package信息</span><br><span class=\"line\">conda search numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装package</span><br><span class=\"line\">conda install -n python34 numpy</span><br><span class=\"line\"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class=\"line\"># 也可以通过-c指定通过某个channel安装</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新package</span><br><span class=\"line\">conda update -n python34 numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除package</span><br><span class=\"line\">conda remove -n python34 numpy</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新conda，保持conda最新</span><br><span class=\"line\">conda update conda</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新anaconda</span><br><span class=\"line\">conda update anaconda</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新python</span><br><span class=\"line\">conda update python</span><br><span class=\"line\"># 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span><br></pre></td></tr></table></figure>\n<p>注意：在以上的使用过程中你会发现使用conda的下载速度非常的慢，因为使用的是国外的服务器，所以这里要设置为国内的镜像。使用下面的配置命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加Anaconda的TUNA镜像</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置搜索时显示通道地址</span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>\n<p>本文转自<a href=\"http://blog.csdn.net/leoe_/article/details/70544190\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/leoe_/article/details/70544190</a></p>\n"},{"title":"Atom缂栬緫鍣ㄧ殑浣跨敤鍜宮arkdown鍩烘湰鐢ㄦ硶","date":"2016-12-20T03:04:47.000Z","_content":"\nAtom缂栬緫鍣ㄧ畝杩�\n  [Atom](https://github.com/atom/atom)鏄痝ithub寮�彂鐨勫紑婧愯法骞冲彴鐨勭紪杈戝櫒锛孉tom鐨勫己澶у彲浠ヤ笌澶у悕榧庨紟鐨凷ublime Text鐩稿缇庛�鍥犱负浣跨敤杩嘢ublime Text锛屾墍浠ョ敤Atom涓婃墜寰堝揩銆傝繖绡囨枃绔犱富瑕佷粙缁嶄娇鐢ˋtom鍐檓arkdown銆� \n\nmarkdown缂栬緫鍣ㄦ瘮杈�\n----\n  浠讳綍鏂囨湰缂栬緫鍣ㄩ兘鍙互涔﹀啓markdown锛屼絾鎴戜滑鏇存湡鏈涜兘澶熷湪涔﹀啓鐨勬椂鍊欒兘澶熷嵆鏃剁殑鐪嬪埌瑙ｆ瀽鏁堟灉锛屾柟渚垮鏍煎紡杩涜璋冩暣銆� \n+ mac os  \n  鍦╩ac os 涓嬶紝鎴戞帹鑽怣ou锛岀晫闈㈢畝娲佷紭闆咃紝瑙ｆ瀽娴佺晠锛屼篃璁告病鏈夋洿濂界殑浜嗐�  \n+ windows os  \n  1. Sublime Text锛氭湁markdown preview鎻掍欢鏀寔锛岃兘澶熷湪娴忚鍣ㄩ噷鏌ョ湅缂栬瘧鏁堟灉锛屼絾鏄苟涓嶆槸瀹炴椂鐨勶紝闇�鍦ㄤ慨鏀瑰悗杩涜鍒锋柊鎴栬�锛屽苟涓嶆柟渚裤�  \n  2. mardown pad锛氳兘澶熷緢濂界殑涔﹀啓锛屽苟鏀寔棰勮銆備絾free鐗堢珶鐒朵笉鏀寔琛ㄦ牸鐨勮В鏋愶紒pro鐗堝彲浠ラ�鎷╄В鏋愮殑theme锛屽github绛夛紝鏄惁鑳藉瑙ｆ瀽琛ㄦ牸涓嶅緱鑰岀煡銆� \n  3. Atom锛氭帹鑽愪娇鐢ㄣ�鍐呯疆瀵筸arkdown鐨勬敮鎸侊紝鑳藉鏂逛究鐨勮繘琛岃В鏋愰瑙堛�\n***\nAtom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\n---\n+ 棰勮markdown\n  1. 鎵撳紑浠绘剰.md鏂囦欢(markdown婧愭枃浠�\n  2.  \n  windows :   `ctrl + shift + p`  \n  mac : `command + shift + p`  \n  杩欐潯鍛戒护璺烻ublime Text鏄竴鏍风殑锛屾墦寮�懡浠よ緭鍏ユ\n  3. 杈撳叆 `markdown preview toggle`(鍙互鍋锋噿鍙緭鍏mdpt`锛岃窡Sublime Text涓�牱鏀寔妯＄硦鍖归厤)\n  4. enter閿嵆鍙湅鍒伴瑙�\n+ Atom鎻掍欢瀹夎\n  1.  \n  windows :   `ctrl + shift + p`  \n  mac : `command + shift + p`  \n  鎵撳紑鍛戒护杈撳叆妗嗭紝杈撳叆 `settings view view installed packages`  \n  2銆佸湪绛涢�杈撳叆妗嗕腑锛屽啓`markdown`,鍗冲彲鐪嬪埌銆� \n+ 鎻掍欢瀹夎绀轰緥  \n  涓嬮潰鎴戝啀浠嬬粛涓�釜灏忔彃浠讹紝鐢ㄦ潵鏍煎紡鍖栦粠鏈嶅姟绔姹傛潵鐨刯son鏁版嵁锛宲retty json銆�\n鎿嶄綔姝ラ锛� \n  1. mac : `ctrl + shift + p`\nwindows : `command + shift + p`\n鎵撳紑鍛戒护杈撳叆妗�`settings view install packages and themes`(涔熷彲浠ョ畝鍗曠殑杈撳叆install package)  \n  2. 鍦ㄦ悳绱㈡杈撳叆`pretty json`锛岀偣鍑籔ackages鎸夐挳锛屽湪鎼滅储缁撴灉涓紝鐐瑰嚮Install鎸夐挳鍗冲彲瀹夎銆� \n  3. 閫変腑涓�浠庢湇鍔″櫒涓嬭浇鐨刯son锛屽\n```json\n{\"result\":{\"error\":0,\"type\":2000},\"sync\":{\"newdata\":null,\"lastver\":\"0\",\"newnum\":\"0\"}}\n```\n\n\n  4. windows : `ctrl + shift + p`\nmac : `command + shift + p`\n鎵撳紑鍛戒护杈撳叆妗�杈撳叆 `pretty json prettify`\n  5. 鐐瑰嚮纭畾锛屽嵆鍙�\n```json\n  {\n  \"result\": {\n    \"error\": 0,\n    \"type\": 2000\n  },\n  \"sync\": {\n    \"newdata\": null,\n    \"lastver\": \"0\",\n    \"newnum\": \"0\"\n  }\n}\n```\nAtom鏄痝ithub瀹樻柟鐨勭紪杈戣蒋浠讹紝涓汉璁や负寰堝ソ鐢�\n***\nmarkdown鍩烘湰璇硶\n---\n+ __姒傝堪__\nMarkdown 鐨勭洰鏍囨槸瀹炵幇銆屾槗璇绘槗鍐欍�銆� \nMarkdown 鐨勮娉曞叏鐢变竴浜涚鍙锋墍缁勬垚锛岃繖浜涚鍙风粡杩囩簿鎸戠粏閫夛紝鍏朵綔鐢ㄤ竴鐩簡鐒躲�姣斿锛氬湪鏂囧瓧涓ゆ梺鍔犱笂鏄熷彿锛岀湅璧锋潵灏卞儚寮鸿皟銆侻arkdown 鐨勫垪琛ㄧ湅璧锋潵锛屽棷锛屽氨鏄垪琛ㄣ�Markdown 鐨勫尯鍧楀紩鐢ㄧ湅璧锋潵灏辩湡鐨勫儚鏄紩鐢ㄤ竴娈垫枃瀛楋紝灏卞儚浣犳浘鍦ㄧ數瀛愰偖浠朵腑瑙佽繃鐨勯偅鏍枫�  \n+ __鏍囬__\n1. 绫�Setext 褰㈠紡鏄敤搴曠嚎鐨勫舰寮忥紝鍒╃敤 = 锛堟渶楂橀樁鏍囬锛夊拰 - 锛堢浜岄樁鏍囬锛夛紝渚嬪\n```markdown\nThis is an H1\n=============\n\nThis is an H2\n-------------\n```\n2. 绫�Atx 褰㈠紡鍒欐槸鍦ㄨ棣栨彃鍏�1 鍒�6 涓�# 锛屽搴斿埌鏍囬 1 鍒�6 闃讹紝渚嬪\n```markdown\n# 杩欐槸 H1\n\n## 杩欐槸 H2\n\n###### 杩欐槸 H6\n```\n+ __鍖哄潡寮曠敤 Blockquotes__  \n Markdown 鏍囪鍖哄潡寮曠敤鏄娇鐢ㄧ被浼�email 涓敤 > 鐨勫紩鐢ㄦ柟寮忋�濡傛灉浣犺繕鐔熸倝鍦�email 淇′欢涓殑寮曡█閮ㄥ垎锛屼綘灏辩煡閬撴�涔堝湪 Markdown 鏂囦欢涓缓绔嬩竴涓尯鍧楀紩鐢紝閭ｄ細鐪嬭捣鏉ュ儚鏄綘鑷繁鍏堟柇濂借锛岀劧鍚庡湪姣忚鐨勬渶鍓嶉潰鍔犱笂 > 锛� \n\n\\> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  \n\\> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  \n\\> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  \n\\>  \n\\> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  \n\\> id sem consectetuer libero luctus adipiscing.  \n\nMarkdown 涔熷厑璁镐綘鍋锋噿鍙湪鏁翠釜娈佃惤鐨勭涓�鏈�墠闈㈠姞涓�\\> 锛�\n\n\\> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  \n\n\\> Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n  Suspendisse id sem consectetuer libero luctus adipiscing.  \n鍖哄潡寮曠敤鍙互宓屽锛堜緥濡傦細寮曠敤鍐呯殑寮曠敤锛夛紝鍙鏍规嵁灞傛鍔犱笂涓嶅悓鏁伴噺鐨�\\> 锛� \n\n  \\> This is the first level of quoting.  \n  \\>  \n  \\> This is nested blockquote.  \n  \\>  \n  \\> Back to the first level.  \n\n寮曠敤鐨勫尯鍧楀唴涔熷彲浠ヤ娇鐢ㄥ叾浠栫殑 Markdown 璇硶锛屽寘鎷爣棰樸�鍒楄〃銆佷唬鐮佸尯鍧楃瓑锛� \n\n\\> ## 杩欐槸涓�釜鏍囬銆� \n\\>  \n\\> 1.   杩欐槸绗竴琛屽垪琛ㄩ」銆� \n\\> 2.   杩欐槸绗簩琛屽垪琛ㄩ」銆� \n\\>  \n\\> 缁欏嚭涓�簺渚嬪瓙浠ｇ爜锛� \n\\>  \n\\>     return shell_exec(\"echo $input | $markdown_script\");  \n浠讳綍鍍忔牱鐨勬枃鏈紪杈戝櫒閮借兘杞绘澗鍦板缓绔�email 鍨嬬殑寮曠敤銆備緥濡傚湪 BBEdit 涓紝浣犲彲浠ラ�鍙栨枃瀛楀悗鐒跺悗浠庨�鍗曚腑閫夋嫨澧炲姞寮曠敤闃跺眰銆� \n+ __鍒楄〃__\nMarkdown 鏀寔鏈夊簭鍒楄〃鍜屾棤搴忓垪琛ㄣ�\n1. 鏃犲簭鍒楄〃浣跨敤鏄熷彿銆佸姞鍙锋垨鏄噺鍙蜂綔涓哄垪琛ㄦ爣璁�\n```\n*   Red\n*   Green\n*   Blue\n```\n2. 绛夊悓浜�\n```\n+   Red\n+   Green\n+   Blue\n```\n3. 涔熺瓑鍚屼簬:\n```\n-   Red\n-   Green\n-   Blue\n```\n4. 鏈夊簭鍒楄〃鍒欎娇鐢ㄦ暟瀛楁帴鐫�竴涓嫳鏂囧彞鐐�\n```\n1.  Bird\n2.  McHale\n3.  Parish\n```\n5. 濡傛灉瑕佸湪鍒楄〃椤圭洰鍐呮斁杩涘紩鐢紝閭�\\`\\>\\`\\` 灏遍渶瑕佺缉杩�\n\n    \\> This is a blockquote\n    \\> inside a list item.\n\n\n\n+ __浠ｇ爜鍖哄潡__  \n\n1. 鍜岀▼搴忕浉鍏崇殑鍐欎綔鎴栨槸鏍囩璇█鍘熷鐮侀�甯镐細鏈夊凡缁忔帓鐗堝ソ鐨勪唬鐮佸尯鍧楋紝閫氬父杩欎簺鍖哄潡鎴戜滑骞朵笉甯屾湜瀹冧互涓�埇娈佃惤鏂囦欢鐨勬柟寮忓幓鎺掔増锛岃�鏄収鍘熸潵鐨勬牱瀛愭樉绀猴紝Markdown 浼氱敤 \\<pre\\> 鍜�\\<code\\> 鏍囩鏉ユ妸浠ｇ爜鍖哄潡鍖呰捣鏉ャ�\n瑕佸湪 Markdown 涓缓绔嬩唬鐮佸尯鍧楀緢绠�崟锛屽彧瑕佺畝鍗曞湴缂╄繘 4 涓┖鏍兼垨鏄�1 涓埗琛ㄧ灏卞彲浠ワ紝渚嬪锛屼笅闈㈢殑杈撳叆锛�\n杩欐槸涓�釜鏅�娈佃惤锛�\n\n    杩欐槸涓�釜浠ｇ爜鍖哄潡銆�\n+ __鍒嗛殧绾縚_\n浣犲彲浠ュ湪涓�涓敤涓変釜浠ヤ笂鐨勬槦鍙枫�鍑忓彿銆佸簳绾挎潵寤虹珛涓�釜鍒嗛殧绾匡紝琛屽唴涓嶈兘鏈夊叾浠栦笢瑗裤�浣犱篃鍙互鍦ㄦ槦鍙锋垨鏄噺鍙蜂腑闂存彃鍏ョ┖鏍笺�涓嬮潰姣忕鍐欐硶閮藉彲浠ュ缓绔嬪垎闅旂嚎锛�\n```\n* * *\n***\n*****\n- - -\n```\n\n* * *\n***\n*****\n- - -\n\n+ __閾炬帴__  \nMarkdown 鏀寔涓ょ褰㈠紡鐨勯摼鎺ヨ娉曪細 琛屽唴寮忓拰鍙傝�寮忎袱绉嶅舰寮忋�\n涓嶇鏄摢涓�锛岄摼鎺ユ枃瀛楅兘鏄敤 [鏂规嫭鍙穄 鏉ユ爣璁般�\n1. 瑕佸缓绔嬩竴涓鍐呭紡鐨勯摼鎺ワ紝鍙鍦ㄦ柟鍧楁嫭鍙峰悗闈㈢揣鎺ョ潃鍦嗘嫭鍙峰苟鎻掑叆缃戝潃閾炬帴鍗冲彲锛屽鏋滀綘杩樻兂瑕佸姞涓婇摼鎺ョ殑 title 鏂囧瓧锛屽彧瑕佸湪缃戝潃鍚庨潰锛岀敤鍙屽紩鍙锋妸 title 鏂囧瓧鍖呰捣鏉ュ嵆鍙紝渚嬪锛�\n```\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\n2. 濡傛灉浣犳槸瑕侀摼鎺ュ埌鍚屾牱涓绘満鐨勮祫婧愶紝浣犲彲浠ヤ娇鐢ㄧ浉瀵硅矾寰勶細\n```\nSee my [About](/about/) page for details.\n```\n\n3. 鍙傝�寮忕殑閾炬帴鏄湪閾炬帴鏂囧瓧鐨勬嫭鍙峰悗闈㈠啀鎺ヤ笂鍙︿竴涓柟鎷彿锛岃�鍦ㄧ浜屼釜鏂规嫭鍙烽噷闈㈣濉叆鐢ㄤ互杈ㄨ瘑閾炬帴鐨勬爣璁帮細\n```\nThis is [an example][id] reference-style link.\n```\n4. 浣犱篃鍙互閫夋嫨鎬у湴鍦ㄤ袱涓柟鎷彿涓棿鍔犱笂涓�釜绌烘牸锛�\n```\nThis is [an example] [id] reference-style link.\n```\n\n5. 鎺ョ潃锛屽湪鏂囦欢鐨勪换鎰忓锛屼綘鍙互鎶婅繖涓爣璁扮殑閾炬帴鍐呭瀹氫箟鍑烘潵锛�\n```\n[id]: http://example.com/  \"Optional Title Here\"\n```\n\n6. 涓嬮潰鏄竴涓弬鑰冨紡閾炬帴鐨勮寖渚嬶細\n```\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n  ```\n\n7. 濡傛灉鏀规垚鐢ㄩ摼鎺ュ悕绉扮殑鏂瑰紡鍐欙細\n```\nI get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \"Google\"\n  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n  [msn]:    http://search.msn.com/    \"MSN Search\"\n```\n\n+ __寮鸿皟__\nMarkdown 浣跨敤鏄熷彿锛圽*锛夊拰搴曠嚎锛圽_锛変綔涓烘爣璁板己璋冨瓧璇嶇殑绗﹀彿锛岃\\* 鎴�\\_ 鍖呭洿鐨勫瓧璇嶄細琚浆鎴愮敤 鏍囩鍖呭洿锛岀敤涓や釜\\* 鎴�\\_ 鍖呰捣鏉ョ殑璇濓紝鍒欎細琚浆鎴�<strong>锛屼緥濡傦細\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n```\n\n+ __浠ｇ爜__\n1. 濡傛灉瑕佹爣璁颁竴灏忔琛屽唴浠ｇ爜锛屼綘鍙互鐢ㄥ弽寮曞彿鎶婂畠鍖呰捣鏉ワ紙\\`锛夛紝渚嬪锛�\n```\nUse the `printf()` function.\n```\n2. 濡傛灉瑕佸湪浠ｇ爜鍖烘鍐呮彃鍏ュ弽寮曞彿锛屼綘鍙互鐢ㄥ涓弽寮曞彿鏉ュ紑鍚拰缁撴潫浠ｇ爜鍖烘锛�\n```\n ``There is a literal backtick (`) here.``\n```\n3. 浠ｇ爜鍖烘鐨勮捣濮嬪拰缁撴潫绔兘鍙互鏀惧叆涓�釜绌虹櫧锛岃捣濮嬬鍚庨潰涓�釜锛岀粨鏉熺鍓嶉潰涓�釜锛岃繖鏍蜂綘灏卞彲浠ュ湪鍖烘鐨勪竴寮�灏辨彃鍏ュ弽寮曞彿锛�\n```\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n```\n4. 鍦ㄤ唬鐮佸尯娈靛唴锛� 鍜屽皷鎷彿閮戒細琚嚜鍔ㄥ湴杞垚 HTML 瀹炰綋锛岃繖浣垮緱鎻掑叆 HTML 鍘熷鐮佸彉寰楀緢瀹规槗锛孧arkdown 浼氭妸涓嬮潰杩欐锛�\n```\nPlease don't use any `<blink>` tags.\n# 浣犱篃鍙互杩欐牱鍐欙細\n`&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n```\n\n+ __鍥剧墖__\n寰堟槑鏄惧湴锛岃鍦ㄧ函鏂囧瓧搴旂敤涓璁′竴涓�鑷劧銆嶇殑璇硶鏉ユ彃鍏ュ浘鐗囨槸鏈変竴瀹氶毦搴︾殑銆�\nMarkdown 浣跨敤涓�鍜岄摼鎺ュ緢鐩镐技鐨勮娉曟潵鏍囪鍥剧墖锛屽悓鏍蜂篃鍏佽涓ょ鏍峰紡锛�琛屽唴寮忓拰鍙傝�寮忋�\n1. 琛屽唴寮忕殑鍥剧墖璇硶鐪嬭捣鏉ュ儚鏄細\n`![Alt text](/path/to/img.jpg)`\n\n`![Alt text](/path/to/img.jpg \"Optional title\")`\n璇︾粏鍙欒堪濡備笅锛�\n涓�釜鎯婂徆鍙�!\n  鈼�鎺ョ潃涓�釜鏂规嫭鍙凤紝閲岄潰鏀句笂鍥剧墖鐨勬浛浠ｆ枃瀛�\n  鈼�鎺ョ潃涓�釜鏅�鎷彿锛岄噷闈㈡斁涓婂浘鐗囩殑缃戝潃锛屾渶鍚庤繕鍙互鐢ㄥ紩鍙峰寘浣忓苟鍔犱笂 閫夋嫨鎬х殑 'title' 鏂囧瓧銆�\n鍙傝�寮忕殑鍥剧墖璇硶鍒欓暱寰楀儚杩欐牱锛�\n`![Alt text][id]`\n銆宨d銆嶆槸鍥剧墖鍙傝�鐨勫悕绉帮紝鍥剧墖鍙傝�鐨勫畾涔夋柟寮忓垯鍜岃繛缁撳弬鑰冧竴鏍凤細\n`[id]: url/to/image  \"Optional title attribute\"`\n鍒扮洰鍓嶄负姝紝 Markdown 杩樻病鏈夊姙娉曟寚瀹氬浘鐗囩殑瀹介珮锛屽鏋滀綘闇�鐨勮瘽锛屼綘鍙互浣跨敤鏅�鐨�img>鏍囩\n\nGFM\n---\nGitHub鐢�GitHub Flavored Markdown\"锛岀畝绉癎FM銆傚畠骞挎硾搴旂敤鍦╯ite--in issues, comments, 浠ュ強pull requests.\n瀹冨拰鏍囧噯鐨凪arkdown鏈変竴浜涘尯鍒紝骞舵坊鍔犱簡涓�簺棰濆鐨勫姛鑳姐�\n涓庢爣鍑哅arkdown鐨勫尯鍒�\n+ 涓嬪垝绾�\n鏍囧噯Markdown灏嗗惈鏈変笅鍒掔嚎鐨勫崟璇嶈浆鎴愭枩浣撳瓧锛岃�GFM蹇界暐鍗曡瘝涓殑涓嬪垝绾裤�\n+ 鍒犻櫎绾�\nGFM澧炲姞浜嗗垹闄ょ嚎\n```\n~~Mistaken text.~~\n```\n鏄剧ず涓猴細\n~~Mistaken text.~~\n+ 浠ｇ爜鍧�\n濡傛灉鏈変竴鏁村潡浠ｇ爜闇�鍖呭洿锛�鍙互浣跨敤(\\`\\`\\`)\n渚嬪锛�\n```\nx = 0\nx = 2 + 2\nwhat is x\n```\n+ 璇硶楂樹寒\n浠ｇ爜鍧楀彲浠ヤ娇鐢ㄨ娉曢珮浜簡锛侊紒鍦ㄤ綘鐨勪唬鐮佸潡涓坊鍔犱竴涓彲閫夌殑璇█鏍囪瘑绗�鎴戜滑浼氶�杩囪娉曢珮浜樉绀鸿繍琛屽畠銆備緥濡傦紝涓轰簡璇硶楂樹寒ruby浠ｇ爜锛�\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\nGithub浣跨敤Linguist鏉ュ疄鐜拌瑷�娴嬪拰璇硶楂樹寒銆�\n浣犲彲浠ラ�杩囬槄璇籺he languages YAML file.鏉ヨ幏鍙栨湁鏁堢殑璇硶楂樹寒鍏抽敭瀛椼�\n\n\n __琛ㄦ牸__  \n -------\n浣犲彲浠ュ垱寤鸿〃鏍硷紝閫氳繃绗﹀彿-鍒嗗紑绗竴琛屽拰鍏朵粬琛岋紝閫氳繃|鍒嗗紑鍚勪釜鍒� \n| row1    | row2    | row3    |  \n| ------- | ------- | ------- |  \n| 1234    | 4567    | 4567    |  \n\n| row1    | row2    | row3    |\n| ------- | ------- | ------- |\n| 1234    | 4567    | 4567    |\n\n鍦ㄦ爣棰樿鍖呭惈:锛屼綘鍙互浣垮緱琛ㄦ牸鍚戝乏瀵归綈锛屽悜鍙冲榻愶紝灞呬腑  \n| Left-Aligned  | Center Aligned  | Right Aligned |  \n| :------------ |:---------------:| -----:|  \n| col 3 is      | some wordy text | $1600 |  \n| col 2 is      | centered        |   $12 |  \n| zebra stripes | are neat        |    $1 |  \n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\nA colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\n:鍦ㄦ渶宸﹁竟琛ㄧず宸﹀榻愶紝:鍦ㄦ渶鍙宠竟琛ㄧず鍙冲榻愶紝宸﹀彸涓よ竟閮芥湁:琛ㄧず灞呬腑銆�\n\n__缁撹锛歘_\n-----\nmarkdown杩樻湁涓�簺鐢绘祦绋嬪浘鐨勯珮绾х敤娉曪紝杩欓噷灏变笉鍒椾妇浜�\n","source":"_posts/Markdown-markdown.md","raw":"---\ntitle: Atom缂栬緫鍣ㄧ殑浣跨敤鍜宮arkdown鍩烘湰鐢ㄦ硶\ndate: 2016-12-20 11:04:47\ntags: [Markdown,Atom]\ncategories: Markdown\n---\n\nAtom缂栬緫鍣ㄧ畝杩�\n  [Atom](https://github.com/atom/atom)鏄痝ithub寮�彂鐨勫紑婧愯法骞冲彴鐨勭紪杈戝櫒锛孉tom鐨勫己澶у彲浠ヤ笌澶у悕榧庨紟鐨凷ublime Text鐩稿缇庛�鍥犱负浣跨敤杩嘢ublime Text锛屾墍浠ョ敤Atom涓婃墜寰堝揩銆傝繖绡囨枃绔犱富瑕佷粙缁嶄娇鐢ˋtom鍐檓arkdown銆� \n\nmarkdown缂栬緫鍣ㄦ瘮杈�\n----\n  浠讳綍鏂囨湰缂栬緫鍣ㄩ兘鍙互涔﹀啓markdown锛屼絾鎴戜滑鏇存湡鏈涜兘澶熷湪涔﹀啓鐨勬椂鍊欒兘澶熷嵆鏃剁殑鐪嬪埌瑙ｆ瀽鏁堟灉锛屾柟渚垮鏍煎紡杩涜璋冩暣銆� \n+ mac os  \n  鍦╩ac os 涓嬶紝鎴戞帹鑽怣ou锛岀晫闈㈢畝娲佷紭闆咃紝瑙ｆ瀽娴佺晠锛屼篃璁告病鏈夋洿濂界殑浜嗐�  \n+ windows os  \n  1. Sublime Text锛氭湁markdown preview鎻掍欢鏀寔锛岃兘澶熷湪娴忚鍣ㄩ噷鏌ョ湅缂栬瘧鏁堟灉锛屼絾鏄苟涓嶆槸瀹炴椂鐨勶紝闇�鍦ㄤ慨鏀瑰悗杩涜鍒锋柊鎴栬�锛屽苟涓嶆柟渚裤�  \n  2. mardown pad锛氳兘澶熷緢濂界殑涔﹀啓锛屽苟鏀寔棰勮銆備絾free鐗堢珶鐒朵笉鏀寔琛ㄦ牸鐨勮В鏋愶紒pro鐗堝彲浠ラ�鎷╄В鏋愮殑theme锛屽github绛夛紝鏄惁鑳藉瑙ｆ瀽琛ㄦ牸涓嶅緱鑰岀煡銆� \n  3. Atom锛氭帹鑽愪娇鐢ㄣ�鍐呯疆瀵筸arkdown鐨勬敮鎸侊紝鑳藉鏂逛究鐨勮繘琛岃В鏋愰瑙堛�\n***\nAtom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\n---\n+ 棰勮markdown\n  1. 鎵撳紑浠绘剰.md鏂囦欢(markdown婧愭枃浠�\n  2.  \n  windows :   `ctrl + shift + p`  \n  mac : `command + shift + p`  \n  杩欐潯鍛戒护璺烻ublime Text鏄竴鏍风殑锛屾墦寮�懡浠よ緭鍏ユ\n  3. 杈撳叆 `markdown preview toggle`(鍙互鍋锋噿鍙緭鍏mdpt`锛岃窡Sublime Text涓�牱鏀寔妯＄硦鍖归厤)\n  4. enter閿嵆鍙湅鍒伴瑙�\n+ Atom鎻掍欢瀹夎\n  1.  \n  windows :   `ctrl + shift + p`  \n  mac : `command + shift + p`  \n  鎵撳紑鍛戒护杈撳叆妗嗭紝杈撳叆 `settings view view installed packages`  \n  2銆佸湪绛涢�杈撳叆妗嗕腑锛屽啓`markdown`,鍗冲彲鐪嬪埌銆� \n+ 鎻掍欢瀹夎绀轰緥  \n  涓嬮潰鎴戝啀浠嬬粛涓�釜灏忔彃浠讹紝鐢ㄦ潵鏍煎紡鍖栦粠鏈嶅姟绔姹傛潵鐨刯son鏁版嵁锛宲retty json銆�\n鎿嶄綔姝ラ锛� \n  1. mac : `ctrl + shift + p`\nwindows : `command + shift + p`\n鎵撳紑鍛戒护杈撳叆妗�`settings view install packages and themes`(涔熷彲浠ョ畝鍗曠殑杈撳叆install package)  \n  2. 鍦ㄦ悳绱㈡杈撳叆`pretty json`锛岀偣鍑籔ackages鎸夐挳锛屽湪鎼滅储缁撴灉涓紝鐐瑰嚮Install鎸夐挳鍗冲彲瀹夎銆� \n  3. 閫変腑涓�浠庢湇鍔″櫒涓嬭浇鐨刯son锛屽\n```json\n{\"result\":{\"error\":0,\"type\":2000},\"sync\":{\"newdata\":null,\"lastver\":\"0\",\"newnum\":\"0\"}}\n```\n\n\n  4. windows : `ctrl + shift + p`\nmac : `command + shift + p`\n鎵撳紑鍛戒护杈撳叆妗�杈撳叆 `pretty json prettify`\n  5. 鐐瑰嚮纭畾锛屽嵆鍙�\n```json\n  {\n  \"result\": {\n    \"error\": 0,\n    \"type\": 2000\n  },\n  \"sync\": {\n    \"newdata\": null,\n    \"lastver\": \"0\",\n    \"newnum\": \"0\"\n  }\n}\n```\nAtom鏄痝ithub瀹樻柟鐨勭紪杈戣蒋浠讹紝涓汉璁や负寰堝ソ鐢�\n***\nmarkdown鍩烘湰璇硶\n---\n+ __姒傝堪__\nMarkdown 鐨勭洰鏍囨槸瀹炵幇銆屾槗璇绘槗鍐欍�銆� \nMarkdown 鐨勮娉曞叏鐢变竴浜涚鍙锋墍缁勬垚锛岃繖浜涚鍙风粡杩囩簿鎸戠粏閫夛紝鍏朵綔鐢ㄤ竴鐩簡鐒躲�姣斿锛氬湪鏂囧瓧涓ゆ梺鍔犱笂鏄熷彿锛岀湅璧锋潵灏卞儚寮鸿皟銆侻arkdown 鐨勫垪琛ㄧ湅璧锋潵锛屽棷锛屽氨鏄垪琛ㄣ�Markdown 鐨勫尯鍧楀紩鐢ㄧ湅璧锋潵灏辩湡鐨勫儚鏄紩鐢ㄤ竴娈垫枃瀛楋紝灏卞儚浣犳浘鍦ㄧ數瀛愰偖浠朵腑瑙佽繃鐨勯偅鏍枫�  \n+ __鏍囬__\n1. 绫�Setext 褰㈠紡鏄敤搴曠嚎鐨勫舰寮忥紝鍒╃敤 = 锛堟渶楂橀樁鏍囬锛夊拰 - 锛堢浜岄樁鏍囬锛夛紝渚嬪\n```markdown\nThis is an H1\n=============\n\nThis is an H2\n-------------\n```\n2. 绫�Atx 褰㈠紡鍒欐槸鍦ㄨ棣栨彃鍏�1 鍒�6 涓�# 锛屽搴斿埌鏍囬 1 鍒�6 闃讹紝渚嬪\n```markdown\n# 杩欐槸 H1\n\n## 杩欐槸 H2\n\n###### 杩欐槸 H6\n```\n+ __鍖哄潡寮曠敤 Blockquotes__  \n Markdown 鏍囪鍖哄潡寮曠敤鏄娇鐢ㄧ被浼�email 涓敤 > 鐨勫紩鐢ㄦ柟寮忋�濡傛灉浣犺繕鐔熸倝鍦�email 淇′欢涓殑寮曡█閮ㄥ垎锛屼綘灏辩煡閬撴�涔堝湪 Markdown 鏂囦欢涓缓绔嬩竴涓尯鍧楀紩鐢紝閭ｄ細鐪嬭捣鏉ュ儚鏄綘鑷繁鍏堟柇濂借锛岀劧鍚庡湪姣忚鐨勬渶鍓嶉潰鍔犱笂 > 锛� \n\n\\> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,  \n\\> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.  \n\\> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  \n\\>  \n\\> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse  \n\\> id sem consectetuer libero luctus adipiscing.  \n\nMarkdown 涔熷厑璁镐綘鍋锋噿鍙湪鏁翠釜娈佃惤鐨勭涓�鏈�墠闈㈠姞涓�\\> 锛�\n\n\\> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  \n\n\\> Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n  Suspendisse id sem consectetuer libero luctus adipiscing.  \n鍖哄潡寮曠敤鍙互宓屽锛堜緥濡傦細寮曠敤鍐呯殑寮曠敤锛夛紝鍙鏍规嵁灞傛鍔犱笂涓嶅悓鏁伴噺鐨�\\> 锛� \n\n  \\> This is the first level of quoting.  \n  \\>  \n  \\> This is nested blockquote.  \n  \\>  \n  \\> Back to the first level.  \n\n寮曠敤鐨勫尯鍧楀唴涔熷彲浠ヤ娇鐢ㄥ叾浠栫殑 Markdown 璇硶锛屽寘鎷爣棰樸�鍒楄〃銆佷唬鐮佸尯鍧楃瓑锛� \n\n\\> ## 杩欐槸涓�釜鏍囬銆� \n\\>  \n\\> 1.   杩欐槸绗竴琛屽垪琛ㄩ」銆� \n\\> 2.   杩欐槸绗簩琛屽垪琛ㄩ」銆� \n\\>  \n\\> 缁欏嚭涓�簺渚嬪瓙浠ｇ爜锛� \n\\>  \n\\>     return shell_exec(\"echo $input | $markdown_script\");  \n浠讳綍鍍忔牱鐨勬枃鏈紪杈戝櫒閮借兘杞绘澗鍦板缓绔�email 鍨嬬殑寮曠敤銆備緥濡傚湪 BBEdit 涓紝浣犲彲浠ラ�鍙栨枃瀛楀悗鐒跺悗浠庨�鍗曚腑閫夋嫨澧炲姞寮曠敤闃跺眰銆� \n+ __鍒楄〃__\nMarkdown 鏀寔鏈夊簭鍒楄〃鍜屾棤搴忓垪琛ㄣ�\n1. 鏃犲簭鍒楄〃浣跨敤鏄熷彿銆佸姞鍙锋垨鏄噺鍙蜂綔涓哄垪琛ㄦ爣璁�\n```\n*   Red\n*   Green\n*   Blue\n```\n2. 绛夊悓浜�\n```\n+   Red\n+   Green\n+   Blue\n```\n3. 涔熺瓑鍚屼簬:\n```\n-   Red\n-   Green\n-   Blue\n```\n4. 鏈夊簭鍒楄〃鍒欎娇鐢ㄦ暟瀛楁帴鐫�竴涓嫳鏂囧彞鐐�\n```\n1.  Bird\n2.  McHale\n3.  Parish\n```\n5. 濡傛灉瑕佸湪鍒楄〃椤圭洰鍐呮斁杩涘紩鐢紝閭�\\`\\>\\`\\` 灏遍渶瑕佺缉杩�\n\n    \\> This is a blockquote\n    \\> inside a list item.\n\n\n\n+ __浠ｇ爜鍖哄潡__  \n\n1. 鍜岀▼搴忕浉鍏崇殑鍐欎綔鎴栨槸鏍囩璇█鍘熷鐮侀�甯镐細鏈夊凡缁忔帓鐗堝ソ鐨勪唬鐮佸尯鍧楋紝閫氬父杩欎簺鍖哄潡鎴戜滑骞朵笉甯屾湜瀹冧互涓�埇娈佃惤鏂囦欢鐨勬柟寮忓幓鎺掔増锛岃�鏄収鍘熸潵鐨勬牱瀛愭樉绀猴紝Markdown 浼氱敤 \\<pre\\> 鍜�\\<code\\> 鏍囩鏉ユ妸浠ｇ爜鍖哄潡鍖呰捣鏉ャ�\n瑕佸湪 Markdown 涓缓绔嬩唬鐮佸尯鍧楀緢绠�崟锛屽彧瑕佺畝鍗曞湴缂╄繘 4 涓┖鏍兼垨鏄�1 涓埗琛ㄧ灏卞彲浠ワ紝渚嬪锛屼笅闈㈢殑杈撳叆锛�\n杩欐槸涓�釜鏅�娈佃惤锛�\n\n    杩欐槸涓�釜浠ｇ爜鍖哄潡銆�\n+ __鍒嗛殧绾縚_\n浣犲彲浠ュ湪涓�涓敤涓変釜浠ヤ笂鐨勬槦鍙枫�鍑忓彿銆佸簳绾挎潵寤虹珛涓�釜鍒嗛殧绾匡紝琛屽唴涓嶈兘鏈夊叾浠栦笢瑗裤�浣犱篃鍙互鍦ㄦ槦鍙锋垨鏄噺鍙蜂腑闂存彃鍏ョ┖鏍笺�涓嬮潰姣忕鍐欐硶閮藉彲浠ュ缓绔嬪垎闅旂嚎锛�\n```\n* * *\n***\n*****\n- - -\n```\n\n* * *\n***\n*****\n- - -\n\n+ __閾炬帴__  \nMarkdown 鏀寔涓ょ褰㈠紡鐨勯摼鎺ヨ娉曪細 琛屽唴寮忓拰鍙傝�寮忎袱绉嶅舰寮忋�\n涓嶇鏄摢涓�锛岄摼鎺ユ枃瀛楅兘鏄敤 [鏂规嫭鍙穄 鏉ユ爣璁般�\n1. 瑕佸缓绔嬩竴涓鍐呭紡鐨勯摼鎺ワ紝鍙鍦ㄦ柟鍧楁嫭鍙峰悗闈㈢揣鎺ョ潃鍦嗘嫭鍙峰苟鎻掑叆缃戝潃閾炬帴鍗冲彲锛屽鏋滀綘杩樻兂瑕佸姞涓婇摼鎺ョ殑 title 鏂囧瓧锛屽彧瑕佸湪缃戝潃鍚庨潰锛岀敤鍙屽紩鍙锋妸 title 鏂囧瓧鍖呰捣鏉ュ嵆鍙紝渚嬪锛�\n```\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\n2. 濡傛灉浣犳槸瑕侀摼鎺ュ埌鍚屾牱涓绘満鐨勮祫婧愶紝浣犲彲浠ヤ娇鐢ㄧ浉瀵硅矾寰勶細\n```\nSee my [About](/about/) page for details.\n```\n\n3. 鍙傝�寮忕殑閾炬帴鏄湪閾炬帴鏂囧瓧鐨勬嫭鍙峰悗闈㈠啀鎺ヤ笂鍙︿竴涓柟鎷彿锛岃�鍦ㄧ浜屼釜鏂规嫭鍙烽噷闈㈣濉叆鐢ㄤ互杈ㄨ瘑閾炬帴鐨勬爣璁帮細\n```\nThis is [an example][id] reference-style link.\n```\n4. 浣犱篃鍙互閫夋嫨鎬у湴鍦ㄤ袱涓柟鎷彿涓棿鍔犱笂涓�釜绌烘牸锛�\n```\nThis is [an example] [id] reference-style link.\n```\n\n5. 鎺ョ潃锛屽湪鏂囦欢鐨勪换鎰忓锛屼綘鍙互鎶婅繖涓爣璁扮殑閾炬帴鍐呭瀹氫箟鍑烘潵锛�\n```\n[id]: http://example.com/  \"Optional Title Here\"\n```\n\n6. 涓嬮潰鏄竴涓弬鑰冨紡閾炬帴鐨勮寖渚嬶細\n```\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n  ```\n\n7. 濡傛灉鏀规垚鐢ㄩ摼鎺ュ悕绉扮殑鏂瑰紡鍐欙細\n```\nI get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \"Google\"\n  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n  [msn]:    http://search.msn.com/    \"MSN Search\"\n```\n\n+ __寮鸿皟__\nMarkdown 浣跨敤鏄熷彿锛圽*锛夊拰搴曠嚎锛圽_锛変綔涓烘爣璁板己璋冨瓧璇嶇殑绗﹀彿锛岃\\* 鎴�\\_ 鍖呭洿鐨勫瓧璇嶄細琚浆鎴愮敤 鏍囩鍖呭洿锛岀敤涓や釜\\* 鎴�\\_ 鍖呰捣鏉ョ殑璇濓紝鍒欎細琚浆鎴�<strong>锛屼緥濡傦細\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n```\n\n+ __浠ｇ爜__\n1. 濡傛灉瑕佹爣璁颁竴灏忔琛屽唴浠ｇ爜锛屼綘鍙互鐢ㄥ弽寮曞彿鎶婂畠鍖呰捣鏉ワ紙\\`锛夛紝渚嬪锛�\n```\nUse the `printf()` function.\n```\n2. 濡傛灉瑕佸湪浠ｇ爜鍖烘鍐呮彃鍏ュ弽寮曞彿锛屼綘鍙互鐢ㄥ涓弽寮曞彿鏉ュ紑鍚拰缁撴潫浠ｇ爜鍖烘锛�\n```\n ``There is a literal backtick (`) here.``\n```\n3. 浠ｇ爜鍖烘鐨勮捣濮嬪拰缁撴潫绔兘鍙互鏀惧叆涓�釜绌虹櫧锛岃捣濮嬬鍚庨潰涓�釜锛岀粨鏉熺鍓嶉潰涓�釜锛岃繖鏍蜂綘灏卞彲浠ュ湪鍖烘鐨勪竴寮�灏辨彃鍏ュ弽寮曞彿锛�\n```\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n```\n4. 鍦ㄤ唬鐮佸尯娈靛唴锛� 鍜屽皷鎷彿閮戒細琚嚜鍔ㄥ湴杞垚 HTML 瀹炰綋锛岃繖浣垮緱鎻掑叆 HTML 鍘熷鐮佸彉寰楀緢瀹规槗锛孧arkdown 浼氭妸涓嬮潰杩欐锛�\n```\nPlease don't use any `<blink>` tags.\n# 浣犱篃鍙互杩欐牱鍐欙細\n`&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n```\n\n+ __鍥剧墖__\n寰堟槑鏄惧湴锛岃鍦ㄧ函鏂囧瓧搴旂敤涓璁′竴涓�鑷劧銆嶇殑璇硶鏉ユ彃鍏ュ浘鐗囨槸鏈変竴瀹氶毦搴︾殑銆�\nMarkdown 浣跨敤涓�鍜岄摼鎺ュ緢鐩镐技鐨勮娉曟潵鏍囪鍥剧墖锛屽悓鏍蜂篃鍏佽涓ょ鏍峰紡锛�琛屽唴寮忓拰鍙傝�寮忋�\n1. 琛屽唴寮忕殑鍥剧墖璇硶鐪嬭捣鏉ュ儚鏄細\n`![Alt text](/path/to/img.jpg)`\n\n`![Alt text](/path/to/img.jpg \"Optional title\")`\n璇︾粏鍙欒堪濡備笅锛�\n涓�釜鎯婂徆鍙�!\n  鈼�鎺ョ潃涓�釜鏂规嫭鍙凤紝閲岄潰鏀句笂鍥剧墖鐨勬浛浠ｆ枃瀛�\n  鈼�鎺ョ潃涓�釜鏅�鎷彿锛岄噷闈㈡斁涓婂浘鐗囩殑缃戝潃锛屾渶鍚庤繕鍙互鐢ㄥ紩鍙峰寘浣忓苟鍔犱笂 閫夋嫨鎬х殑 'title' 鏂囧瓧銆�\n鍙傝�寮忕殑鍥剧墖璇硶鍒欓暱寰楀儚杩欐牱锛�\n`![Alt text][id]`\n銆宨d銆嶆槸鍥剧墖鍙傝�鐨勫悕绉帮紝鍥剧墖鍙傝�鐨勫畾涔夋柟寮忓垯鍜岃繛缁撳弬鑰冧竴鏍凤細\n`[id]: url/to/image  \"Optional title attribute\"`\n鍒扮洰鍓嶄负姝紝 Markdown 杩樻病鏈夊姙娉曟寚瀹氬浘鐗囩殑瀹介珮锛屽鏋滀綘闇�鐨勮瘽锛屼綘鍙互浣跨敤鏅�鐨�img>鏍囩\n\nGFM\n---\nGitHub鐢�GitHub Flavored Markdown\"锛岀畝绉癎FM銆傚畠骞挎硾搴旂敤鍦╯ite--in issues, comments, 浠ュ強pull requests.\n瀹冨拰鏍囧噯鐨凪arkdown鏈変竴浜涘尯鍒紝骞舵坊鍔犱簡涓�簺棰濆鐨勫姛鑳姐�\n涓庢爣鍑哅arkdown鐨勫尯鍒�\n+ 涓嬪垝绾�\n鏍囧噯Markdown灏嗗惈鏈変笅鍒掔嚎鐨勫崟璇嶈浆鎴愭枩浣撳瓧锛岃�GFM蹇界暐鍗曡瘝涓殑涓嬪垝绾裤�\n+ 鍒犻櫎绾�\nGFM澧炲姞浜嗗垹闄ょ嚎\n```\n~~Mistaken text.~~\n```\n鏄剧ず涓猴細\n~~Mistaken text.~~\n+ 浠ｇ爜鍧�\n濡傛灉鏈変竴鏁村潡浠ｇ爜闇�鍖呭洿锛�鍙互浣跨敤(\\`\\`\\`)\n渚嬪锛�\n```\nx = 0\nx = 2 + 2\nwhat is x\n```\n+ 璇硶楂樹寒\n浠ｇ爜鍧楀彲浠ヤ娇鐢ㄨ娉曢珮浜簡锛侊紒鍦ㄤ綘鐨勪唬鐮佸潡涓坊鍔犱竴涓彲閫夌殑璇█鏍囪瘑绗�鎴戜滑浼氶�杩囪娉曢珮浜樉绀鸿繍琛屽畠銆備緥濡傦紝涓轰簡璇硶楂樹寒ruby浠ｇ爜锛�\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\nGithub浣跨敤Linguist鏉ュ疄鐜拌瑷�娴嬪拰璇硶楂樹寒銆�\n浣犲彲浠ラ�杩囬槄璇籺he languages YAML file.鏉ヨ幏鍙栨湁鏁堢殑璇硶楂樹寒鍏抽敭瀛椼�\n\n\n __琛ㄦ牸__  \n -------\n浣犲彲浠ュ垱寤鸿〃鏍硷紝閫氳繃绗﹀彿-鍒嗗紑绗竴琛屽拰鍏朵粬琛岋紝閫氳繃|鍒嗗紑鍚勪釜鍒� \n| row1    | row2    | row3    |  \n| ------- | ------- | ------- |  \n| 1234    | 4567    | 4567    |  \n\n| row1    | row2    | row3    |\n| ------- | ------- | ------- |\n| 1234    | 4567    | 4567    |\n\n鍦ㄦ爣棰樿鍖呭惈:锛屼綘鍙互浣垮緱琛ㄦ牸鍚戝乏瀵归綈锛屽悜鍙冲榻愶紝灞呬腑  \n| Left-Aligned  | Center Aligned  | Right Aligned |  \n| :------------ |:---------------:| -----:|  \n| col 3 is      | some wordy text | $1600 |  \n| col 2 is      | centered        |   $12 |  \n| zebra stripes | are neat        |    $1 |  \n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\nA colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\n:鍦ㄦ渶宸﹁竟琛ㄧず宸﹀榻愶紝:鍦ㄦ渶鍙宠竟琛ㄧず鍙冲榻愶紝宸﹀彸涓よ竟閮芥湁:琛ㄧず灞呬腑銆�\n\n__缁撹锛歘_\n-----\nmarkdown杩樻湁涓�簺鐢绘祦绋嬪浘鐨勯珮绾х敤娉曪紝杩欓噷灏变笉鍒椾妇浜�\n","slug":"Markdown-markdown","published":1,"updated":"2018-10-17T05:48:51.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr6a003gk4nzrqafsgc0","content":"<p>Atom缂栬緫鍣ㄧ畝杩�<br>  <a href=\"https://github.com/atom/atom\" target=\"_blank\" rel=\"noopener\">Atom</a>鏄痝ithub寮�彂鐨勫紑婧愯法骞冲彴鐨勭紪杈戝櫒锛孉tom鐨勫己澶у彲浠ヤ笌澶у悕榧庨紟鐨凷ublime Text鐩稿缇庛�鍥犱负浣跨敤杩嘢ublime Text锛屾墍浠ョ敤Atom涓婃墜寰堝揩銆傝繖绡囨枃绔犱富瑕佷粙缁嶄娇鐢ˋtom鍐檓arkdown銆� </p>\n<h2 id=\"markdown缂栬緫鍣ㄦ瘮杈�\"><a href=\"#markdown缂栬緫鍣ㄦ瘮杈�\" class=\"headerlink\" title=\"markdown缂栬緫鍣ㄦ瘮杈�\"></a>markdown缂栬緫鍣ㄦ瘮杈�</h2><p>  浠讳綍鏂囨湰缂栬緫鍣ㄩ兘鍙互涔﹀啓markdown锛屼絾鎴戜滑鏇存湡鏈涜兘澶熷湪涔﹀啓鐨勬椂鍊欒兘澶熷嵆鏃剁殑鐪嬪埌瑙ｆ瀽鏁堟灉锛屾柟渚垮鏍煎紡杩涜璋冩暣銆� </p>\n<ul>\n<li>mac os<br>鍦╩ac os 涓嬶紝鎴戞帹鑽怣ou锛岀晫闈㈢畝娲佷紭闆咃紝瑙ｆ瀽娴佺晠锛屼篃璁告病鏈夋洿濂界殑浜嗐�  </li>\n<li>windows os  <ol>\n<li>Sublime Text锛氭湁markdown preview鎻掍欢鏀寔锛岃兘澶熷湪娴忚鍣ㄩ噷鏌ョ湅缂栬瘧鏁堟灉锛屼絾鏄苟涓嶆槸瀹炴椂鐨勶紝闇�鍦ㄤ慨鏀瑰悗杩涜鍒锋柊鎴栬�锛屽苟涓嶆柟渚裤�  </li>\n<li>mardown pad锛氳兘澶熷緢濂界殑涔﹀啓锛屽苟鏀寔棰勮銆備絾free鐗堢珶鐒朵笉鏀寔琛ㄦ牸鐨勮В鏋愶紒pro鐗堝彲浠ラ�鎷╄В鏋愮殑theme锛屽github绛夛紝鏄惁鑳藉瑙ｆ瀽琛ㄦ牸涓嶅緱鑰岀煡銆� </li>\n<li>Atom锛氭帹鑽愪娇鐢ㄣ�鍐呯疆瀵筸arkdown鐨勬敮鎸侊紝鑳藉鏂逛究鐨勮繘琛岃В鏋愰瑙堛�</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\"><a href=\"#Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\" class=\"headerlink\" title=\"Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\"></a>Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�</h2><ul>\n<li>棰勮markdown<ol>\n<li>鎵撳紑浠绘剰.md鏂囦欢(markdown婧愭枃浠�</li>\n<li>windows :   <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>杩欐潯鍛戒护璺烻ublime Text鏄竴鏍风殑锛屾墦寮�懡浠よ緭鍏ユ</li>\n<li>杈撳叆 <code>markdown preview toggle</code>(鍙互鍋锋噿鍙緭鍏mdpt`锛岃窡Sublime Text涓�牱鏀寔妯＄硦鍖归厤)</li>\n<li>enter閿嵆鍙湅鍒伴瑙�</li>\n</ol>\n</li>\n<li>Atom鎻掍欢瀹夎<ol>\n<li>windows :   <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗嗭紝杈撳叆 <code>settings view view installed packages</code><br>2銆佸湪绛涢�杈撳叆妗嗕腑锛屽啓<code>markdown</code>,鍗冲彲鐪嬪埌銆� </li>\n</ol>\n</li>\n<li><p>鎻掍欢瀹夎绀轰緥<br>涓嬮潰鎴戝啀浠嬬粛涓�釜灏忔彃浠讹紝鐢ㄦ潵鏍煎紡鍖栦粠鏈嶅姟绔姹傛潵鐨刯son鏁版嵁锛宲retty json銆�<br>鎿嶄綔姝ラ锛� </p>\n<ol>\n<li>mac : <code>ctrl + shift + p</code><br>windows : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗�<code>settings view install packages and themes</code>(涔熷彲浠ョ畝鍗曠殑杈撳叆install package)  </li>\n<li>鍦ㄦ悳绱㈡杈撳叆<code>pretty json</code>锛岀偣鍑籔ackages鎸夐挳锛屽湪鎼滅储缁撴灉涓紝鐐瑰嚮Install鎸夐挳鍗冲彲瀹夎銆� </li>\n<li><p>閫変腑涓�浠庢湇鍔″櫒涓嬭浇鐨刯son锛屽</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"result\"</span>:&#123;<span class=\"attr\">\"error\"</span>:<span class=\"number\">0</span>,<span class=\"attr\">\"type\"</span>:<span class=\"number\">2000</span>&#125;,<span class=\"attr\">\"sync\"</span>:&#123;<span class=\"attr\">\"newdata\"</span>:<span class=\"literal\">null</span>,<span class=\"attr\">\"lastver\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"newnum\"</span>:<span class=\"string\">\"0\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows : <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗�杈撳叆 <code>pretty json prettify</code></p>\n</li>\n<li>鐐瑰嚮纭畾锛屽嵆鍙�<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"result\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"sync\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"newdata\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastver\"</span>: <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"newnum\"</span>: <span class=\"string\">\"0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>Atom鏄痝ithub瀹樻柟鐨勭紪杈戣蒋浠讹紝涓汉璁や负寰堝ソ鐢�</p>\n<hr>\n<h2 id=\"markdown鍩烘湰璇硶\"><a href=\"#markdown鍩烘湰璇硶\" class=\"headerlink\" title=\"markdown鍩烘湰璇硶\"></a>markdown鍩烘湰璇硶</h2><ul>\n<li><strong>姒傝堪</strong><br>Markdown 鐨勭洰鏍囨槸瀹炵幇銆屾槗璇绘槗鍐欍�銆�<br>Markdown 鐨勮娉曞叏鐢变竴浜涚鍙锋墍缁勬垚锛岃繖浜涚鍙风粡杩囩簿鎸戠粏閫夛紝鍏朵綔鐢ㄤ竴鐩簡鐒躲�姣斿锛氬湪鏂囧瓧涓ゆ梺鍔犱笂鏄熷彿锛岀湅璧锋潵灏卞儚寮鸿皟銆侻arkdown 鐨勫垪琛ㄧ湅璧锋潵锛屽棷锛屽氨鏄垪琛ㄣ�Markdown 鐨勫尯鍧楀紩鐢ㄧ湅璧锋潵灏辩湡鐨勫儚鏄紩鐢ㄤ竴娈垫枃瀛楋紝灏卞儚浣犳浘鍦ㄧ數瀛愰偖浠朵腑瑙佽繃鐨勯偅鏍枫�  </li>\n<li><strong>鏍囬</strong></li>\n</ul>\n<ol>\n<li><p>绫�Setext 褰㈠紡鏄敤搴曠嚎鐨勫舰寮忥紝鍒╃敤 = 锛堟渶楂橀樁鏍囬锛夊拰 - 锛堢浜岄樁鏍囬锛夛紝渚嬪</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is an H1</span><br><span class=\"line\">=============</span><br><span class=\"line\"></span><br><span class=\"line\">This is an H2</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绫�Atx 褰㈠紡鍒欐槸鍦ㄨ棣栨彃鍏�1 鍒�6 涓�# 锛屽搴斿埌鏍囬 1 鍒�6 闃讹紝渚嬪</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 杩欐槸 H1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 杩欐槸 H2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 杩欐槸 H6</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>鍖哄潡寮曠敤 Blockquotes</strong><br>Markdown 鏍囪鍖哄潡寮曠敤鏄娇鐢ㄧ被浼�email 涓敤 &gt; 鐨勫紩鐢ㄦ柟寮忋�濡傛灉浣犺繕鐔熸倝鍦�email 淇′欢涓殑寮曡█閮ㄥ垎锛屼綘灏辩煡閬撴�涔堝湪 Markdown 鏂囦欢涓缓绔嬩竴涓尯鍧楀紩鐢紝閭ｄ細鐪嬭捣鏉ュ儚鏄綘鑷繁鍏堟柇濂借锛岀劧鍚庡湪姣忚鐨勬渶鍓嶉潰鍔犱笂 &gt; 锛� </li>\n</ul>\n<p>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.<br>><br>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>> id sem consectetuer libero luctus adipiscing.  </p>\n<p>Markdown 涔熷厑璁镐綘鍋锋噿鍙湪鏁翠釜娈佃惤鐨勭涓�鏈�墠闈㈠姞涓�> 锛�</p>\n<p>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  </p>\n<p>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>  Suspendisse id sem consectetuer libero luctus adipiscing.<br>鍖哄潡寮曠敤鍙互宓屽锛堜緥濡傦細寮曠敤鍐呯殑寮曠敤锛夛紝鍙鏍规嵁灞傛鍔犱笂涓嶅悓鏁伴噺鐨�> 锛� </p>\n<p>  > This is the first level of quoting.<br>  ><br>  > This is nested blockquote.<br>  ><br>  > Back to the first level.  </p>\n<p>寮曠敤鐨勫尯鍧楀唴涔熷彲浠ヤ娇鐢ㄥ叾浠栫殑 Markdown 璇硶锛屽寘鎷爣棰樸�鍒楄〃銆佷唬鐮佸尯鍧楃瓑锛� </p>\n<p>> ## 杩欐槸涓�釜鏍囬銆�<br>><br>> 1.   杩欐槸绗竴琛屽垪琛ㄩ」銆�<br>> 2.   杩欐槸绗簩琛屽垪琛ㄩ」銆�<br>><br>> 缁欏嚭涓�簺渚嬪瓙浠ｇ爜锛�<br>><br>>     return shell_exec(“echo $input | $markdown_script”);<br>浠讳綍鍍忔牱鐨勬枃鏈紪杈戝櫒閮借兘杞绘澗鍦板缓绔�email 鍨嬬殑寮曠敤銆備緥濡傚湪 BBEdit 涓紝浣犲彲浠ラ�鍙栨枃瀛楀悗鐒跺悗浠庨�鍗曚腑閫夋嫨澧炲姞寮曠敤闃跺眰銆� </p>\n<ul>\n<li><strong>鍒楄〃</strong><br>Markdown 鏀寔鏈夊簭鍒楄〃鍜屾棤搴忓垪琛ㄣ�</li>\n</ul>\n<ol>\n<li><p>鏃犲簭鍒楄〃浣跨敤鏄熷彿銆佸姞鍙锋垨鏄噺鍙蜂綔涓哄垪琛ㄦ爣璁�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*   Red</span><br><span class=\"line\">*   Green</span><br><span class=\"line\">*   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绛夊悓浜�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+   Red</span><br><span class=\"line\">+   Green</span><br><span class=\"line\">+   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>涔熺瓑鍚屼簬:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   Red</span><br><span class=\"line\">-   Green</span><br><span class=\"line\">-   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鏈夊簭鍒楄〃鍒欎娇鐢ㄦ暟瀛楁帴鐫�竴涓嫳鏂囧彞鐐�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  Bird</span><br><span class=\"line\">2.  McHale</span><br><span class=\"line\">3.  Parish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉瑕佸湪鍒楄〃椤圭洰鍐呮斁杩涘紩鐢紝閭�`>`` 灏遍渶瑕佺缉杩�</p>\n<p> > This is a blockquote<br> > inside a list item.</p>\n</li>\n</ol>\n<ul>\n<li><strong>浠ｇ爜鍖哄潡</strong>  </li>\n</ul>\n<ol>\n<li><p>鍜岀▼搴忕浉鍏崇殑鍐欎綔鎴栨槸鏍囩璇█鍘熷鐮侀�甯镐細鏈夊凡缁忔帓鐗堝ソ鐨勪唬鐮佸尯鍧楋紝閫氬父杩欎簺鍖哄潡鎴戜滑骞朵笉甯屾湜瀹冧互涓�埇娈佃惤鏂囦欢鐨勬柟寮忓幓鎺掔増锛岃�鏄収鍘熸潵鐨勬牱瀛愭樉绀猴紝Markdown 浼氱敤 \\&lt;pre> 鍜�\\&lt;code> 鏍囩鏉ユ妸浠ｇ爜鍖哄潡鍖呰捣鏉ャ�<br>瑕佸湪 Markdown 涓缓绔嬩唬鐮佸尯鍧楀緢绠�崟锛屽彧瑕佺畝鍗曞湴缂╄繘 4 涓┖鏍兼垨鏄�1 涓埗琛ㄧ灏卞彲浠ワ紝渚嬪锛屼笅闈㈢殑杈撳叆锛�<br>杩欐槸涓�釜鏅�娈佃惤锛�</p>\n<p> 杩欐槸涓�釜浠ｇ爜鍖哄潡銆�</p>\n</li>\n</ol>\n<ul>\n<li>__鍒嗛殧绾縚_<br>浣犲彲浠ュ湪涓�涓敤涓変釜浠ヤ笂鐨勬槦鍙枫�鍑忓彿銆佸簳绾挎潵寤虹珛涓�釜鍒嗛殧绾匡紝琛屽唴涓嶈兘鏈夊叾浠栦笢瑗裤�浣犱篃鍙互鍦ㄦ槦鍙锋垨鏄噺鍙蜂腑闂存彃鍏ョ┖鏍笺�涓嬮潰姣忕鍐欐硶閮藉彲浠ュ缓绔嬪垎闅旂嚎锛�<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * *</span><br><span class=\"line\">***</span><br><span class=\"line\">*****</span><br><span class=\"line\">- - -</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<hr>\n<hr>\n<hr>\n<ul>\n<li><strong>閾炬帴</strong><br>Markdown 鏀寔涓ょ褰㈠紡鐨勯摼鎺ヨ娉曪細 琛屽唴寮忓拰鍙傝�寮忎袱绉嶅舰寮忋�<br>涓嶇鏄摢涓�锛岄摼鎺ユ枃瀛楅兘鏄敤 [鏂规嫭鍙穄 鏉ユ爣璁般�</li>\n</ul>\n<ol>\n<li><p>瑕佸缓绔嬩竴涓鍐呭紡鐨勯摼鎺ワ紝鍙鍦ㄦ柟鍧楁嫭鍙峰悗闈㈢揣鎺ョ潃鍦嗘嫭鍙峰苟鎻掑叆缃戝潃閾炬帴鍗冲彲锛屽鏋滀綘杩樻兂瑕佸姞涓婇摼鎺ョ殑 title 鏂囧瓧锛屽彧瑕佸湪缃戝潃鍚庨潰锛岀敤鍙屽紩鍙锋妸 title 鏂囧瓧鍖呰捣鏉ュ嵆鍙紝渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class=\"line\"></span><br><span class=\"line\">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉浣犳槸瑕侀摼鎺ュ埌鍚屾牱涓绘満鐨勮祫婧愶紝浣犲彲浠ヤ娇鐢ㄧ浉瀵硅矾寰勶細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鍙傝�寮忕殑閾炬帴鏄湪閾炬帴鏂囧瓧鐨勬嫭鍙峰悗闈㈠啀鎺ヤ笂鍙︿竴涓柟鎷彿锛岃�鍦ㄧ浜屼釜鏂规嫭鍙烽噷闈㈣濉叆鐢ㄤ互杈ㄨ瘑閾炬帴鐨勬爣璁帮細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浣犱篃鍙互閫夋嫨鎬у湴鍦ㄤ袱涓柟鎷彿涓棿鍔犱笂涓�釜绌烘牸锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鎺ョ潃锛屽湪鏂囦欢鐨勪换鎰忓锛屼綘鍙互鎶婅繖涓爣璁扮殑閾炬帴鍐呭瀹氫箟鍑烘潵锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>涓嬮潰鏄竴涓弬鑰冨紡閾炬帴鐨勮寖渚嬶細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I get 10 times more traffic from [Google] [1] than from</span><br><span class=\"line\">[Yahoo] [2] or [MSN] [3].</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class=\"line\">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class=\"line\">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉鏀规垚鐢ㄩ摼鎺ュ悕绉扮殑鏂瑰紡鍐欙細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I get 10 times more traffic from [Google][] than from</span><br><span class=\"line\">[Yahoo][] or [MSN][].</span><br><span class=\"line\"></span><br><span class=\"line\">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class=\"line\">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class=\"line\">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><strong>寮鸿皟</strong><br>Markdown 浣跨敤鏄熷彿锛圽<em>锛夊拰搴曠嚎锛圽_锛変綔涓烘爣璁板己璋冨瓧璇嶇殑绗﹀彿锛岃\\</em> 鎴�_ 鍖呭洿鐨勫瓧璇嶄細琚浆鎴愮敤 鏍囩鍖呭洿锛岀敤涓や釜* 鎴�_ 鍖呰捣鏉ョ殑璇濓紝鍒欎細琚浆鎴�<strong>锛屼緥濡傦細</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*single asterisks*</span><br><span class=\"line\"></span><br><span class=\"line\">_single underscores_</span><br><span class=\"line\"></span><br><span class=\"line\">**double asterisks**</span><br><span class=\"line\"></span><br><span class=\"line\">__double underscores__</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>浠ｇ爜</strong></p>\n</li>\n</ul>\n<ol>\n<li><p>濡傛灉瑕佹爣璁颁竴灏忔琛屽唴浠ｇ爜锛屼綘鍙互鐢ㄥ弽寮曞彿鎶婂畠鍖呰捣鏉ワ紙`锛夛紝渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Use the `printf()` function.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉瑕佸湪浠ｇ爜鍖烘鍐呮彃鍏ュ弽寮曞彿锛屼綘鍙互鐢ㄥ涓弽寮曞彿鏉ュ紑鍚拰缁撴潫浠ｇ爜鍖烘锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浠ｇ爜鍖烘鐨勮捣濮嬪拰缁撴潫绔兘鍙互鏀惧叆涓�釜绌虹櫧锛岃捣濮嬬鍚庨潰涓�釜锛岀粨鏉熺鍓嶉潰涓�釜锛岃繖鏍蜂綘灏卞彲浠ュ湪鍖烘鐨勪竴寮�灏辨彃鍏ュ弽寮曞彿锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A single backtick in a code span: `` ` ``</span><br><span class=\"line\"></span><br><span class=\"line\">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鍦ㄤ唬鐮佸尯娈靛唴锛� 鍜屽皷鎷彿閮戒細琚嚜鍔ㄥ湴杞垚 HTML 瀹炰綋锛岃繖浣垮緱鎻掑叆 HTML 鍘熷鐮佸彉寰楀緢瀹规槗锛孧arkdown 浼氭妸涓嬮潰杩欐锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please don&apos;t use any `&lt;blink&gt;` tags.</span><br><span class=\"line\"># 浣犱篃鍙互杩欐牱鍐欙細</span><br><span class=\"line\">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>鍥剧墖</strong><br>寰堟槑鏄惧湴锛岃鍦ㄧ函鏂囧瓧搴旂敤涓璁′竴涓�鑷劧銆嶇殑璇硶鏉ユ彃鍏ュ浘鐗囨槸鏈変竴瀹氶毦搴︾殑銆�<br>Markdown 浣跨敤涓�鍜岄摼鎺ュ緢鐩镐技鐨勮娉曟潵鏍囪鍥剧墖锛屽悓鏍蜂篃鍏佽涓ょ鏍峰紡锛�琛屽唴寮忓拰鍙傝�寮忋�</li>\n</ul>\n<ol>\n<li>琛屽唴寮忕殑鍥剧墖璇硶鐪嬭捣鏉ュ儚鏄細<br><code>![Alt text](/path/to/img.jpg)</code></li>\n</ol>\n<p><code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code><br>璇︾粏鍙欒堪濡備笅锛�<br>涓�釜鎯婂徆鍙�!<br>  鈼�鎺ョ潃涓�釜鏂规嫭鍙凤紝閲岄潰鏀句笂鍥剧墖鐨勬浛浠ｆ枃瀛�<br>  鈼�鎺ョ潃涓�釜鏅�鎷彿锛岄噷闈㈡斁涓婂浘鐗囩殑缃戝潃锛屾渶鍚庤繕鍙互鐢ㄥ紩鍙峰寘浣忓苟鍔犱笂 閫夋嫨鎬х殑 ‘title’ 鏂囧瓧銆�<br>鍙傝�寮忕殑鍥剧墖璇硶鍒欓暱寰楀儚杩欐牱锛�<br><code>![Alt text][id]</code><br>銆宨d銆嶆槸鍥剧墖鍙傝�鐨勫悕绉帮紝鍥剧墖鍙傝�鐨勫畾涔夋柟寮忓垯鍜岃繛缁撳弬鑰冧竴鏍凤細<br><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code><br>鍒扮洰鍓嶄负姝紝 Markdown 杩樻病鏈夊姙娉曟寚瀹氬浘鐗囩殑瀹介珮锛屽鏋滀綘闇�鐨勮瘽锛屼綘鍙互浣跨敤鏅�鐨�img&gt;鏍囩</p>\n<h2 id=\"GFM\"><a href=\"#GFM\" class=\"headerlink\" title=\"GFM\"></a>GFM</h2><p>GitHub鐢�GitHub Flavored Markdown”锛岀畝绉癎FM銆傚畠骞挎硾搴旂敤鍦╯ite–in issues, comments, 浠ュ強pull requests.<br>瀹冨拰鏍囧噯鐨凪arkdown鏈変竴浜涘尯鍒紝骞舵坊鍔犱簡涓�簺棰濆鐨勫姛鑳姐�<br>涓庢爣鍑哅arkdown鐨勫尯鍒�</p>\n<ul>\n<li>涓嬪垝绾�<br>鏍囧噯Markdown灏嗗惈鏈変笅鍒掔嚎鐨勫崟璇嶈浆鎴愭枩浣撳瓧锛岃�GFM蹇界暐鍗曡瘝涓殑涓嬪垝绾裤�</li>\n<li>鍒犻櫎绾�<br>GFM澧炲姞浜嗗垹闄ょ嚎<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~Mistaken text.~~</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>鏄剧ず涓猴細<br><del>Mistaken text.</del></p>\n<ul>\n<li><p>浠ｇ爜鍧�<br>濡傛灉鏈変竴鏁村潡浠ｇ爜闇�鍖呭洿锛�鍙互浣跨敤(```)<br>渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 0</span><br><span class=\"line\">x = 2 + 2</span><br><span class=\"line\">what is x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>璇硶楂樹寒<br>浠ｇ爜鍧楀彲浠ヤ娇鐢ㄨ娉曢珮浜簡锛侊紒鍦ㄤ綘鐨勪唬鐮佸潡涓坊鍔犱竴涓彲閫夌殑璇█鏍囪瘑绗�鎴戜滑浼氶�杩囪娉曢珮浜樉绀鸿繍琛屽畠銆備緥濡傦紝涓轰簡璇硶楂樹寒ruby浠ｇ爜锛�</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Github浣跨敤Linguist鏉ュ疄鐜拌瑷�娴嬪拰璇硶楂樹寒銆�<br>浣犲彲浠ラ�杩囬槄璇籺he languages YAML file.鏉ヨ幏鍙栨湁鏁堢殑璇硶楂樹寒鍏抽敭瀛椼�</p>\n<h2 id=\"琛ㄦ牸\"><a href=\"#琛ㄦ牸\" class=\"headerlink\" title=\" 琛ㄦ牸  \"></a> <strong>琛ㄦ牸</strong>  </h2><p>浣犲彲浠ュ垱寤鸿〃鏍硷紝閫氳繃绗﹀彿-鍒嗗紑绗竴琛屽拰鍏朵粬琛岋紝閫氳繃|鍒嗗紑鍚勪釜鍒�<br>| row1    | row2    | row3    |<br>| ——- | ——- | ——- |<br>| 1234    | 4567    | 4567    |  </p>\n<table>\n<thead>\n<tr>\n<th>row1</th>\n<th>row2</th>\n<th>row3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1234</td>\n<td>4567</td>\n<td>4567</td>\n</tr>\n</tbody>\n</table>\n<p>鍦ㄦ爣棰樿鍖呭惈:锛屼綘鍙互浣垮緱琛ㄦ牸鍚戝乏瀵归綈锛屽悜鍙冲榻愶紝灞呬腑<br>| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :———— |:—————:| —–:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.<br>:鍦ㄦ渶宸﹁竟琛ㄧず宸﹀榻愶紝:鍦ㄦ渶鍙宠竟琛ㄧず鍙冲榻愶紝宸﹀彸涓よ竟閮芥湁:琛ㄧず灞呬腑銆�</p>\n<h2 id=\"缁撹锛歘\"><a href=\"#缁撹锛歘\" class=\"headerlink\" title=\"__缁撹锛歘_\"></a>__缁撹锛歘_</h2><p>markdown杩樻湁涓�簺鐢绘祦绋嬪浘鐨勯珮绾х敤娉曪紝杩欓噷灏变笉鍒椾妇浜�</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Atom缂栬緫鍣ㄧ畝杩�<br>  <a href=\"https://github.com/atom/atom\" target=\"_blank\" rel=\"noopener\">Atom</a>鏄痝ithub寮�彂鐨勫紑婧愯法骞冲彴鐨勭紪杈戝櫒锛孉tom鐨勫己澶у彲浠ヤ笌澶у悕榧庨紟鐨凷ublime Text鐩稿缇庛�鍥犱负浣跨敤杩嘢ublime Text锛屾墍浠ョ敤Atom涓婃墜寰堝揩銆傝繖绡囨枃绔犱富瑕佷粙缁嶄娇鐢ˋtom鍐檓arkdown銆� </p>\n<h2 id=\"markdown缂栬緫鍣ㄦ瘮杈�\"><a href=\"#markdown缂栬緫鍣ㄦ瘮杈�\" class=\"headerlink\" title=\"markdown缂栬緫鍣ㄦ瘮杈�\"></a>markdown缂栬緫鍣ㄦ瘮杈�</h2><p>  浠讳綍鏂囨湰缂栬緫鍣ㄩ兘鍙互涔﹀啓markdown锛屼絾鎴戜滑鏇存湡鏈涜兘澶熷湪涔﹀啓鐨勬椂鍊欒兘澶熷嵆鏃剁殑鐪嬪埌瑙ｆ瀽鏁堟灉锛屾柟渚垮鏍煎紡杩涜璋冩暣銆� </p>\n<ul>\n<li>mac os<br>鍦╩ac os 涓嬶紝鎴戞帹鑽怣ou锛岀晫闈㈢畝娲佷紭闆咃紝瑙ｆ瀽娴佺晠锛屼篃璁告病鏈夋洿濂界殑浜嗐�  </li>\n<li>windows os  <ol>\n<li>Sublime Text锛氭湁markdown preview鎻掍欢鏀寔锛岃兘澶熷湪娴忚鍣ㄩ噷鏌ョ湅缂栬瘧鏁堟灉锛屼絾鏄苟涓嶆槸瀹炴椂鐨勶紝闇�鍦ㄤ慨鏀瑰悗杩涜鍒锋柊鎴栬�锛屽苟涓嶆柟渚裤�  </li>\n<li>mardown pad锛氳兘澶熷緢濂界殑涔﹀啓锛屽苟鏀寔棰勮銆備絾free鐗堢珶鐒朵笉鏀寔琛ㄦ牸鐨勮В鏋愶紒pro鐗堝彲浠ラ�鎷╄В鏋愮殑theme锛屽github绛夛紝鏄惁鑳藉瑙ｆ瀽琛ㄦ牸涓嶅緱鑰岀煡銆� </li>\n<li>Atom锛氭帹鑽愪娇鐢ㄣ�鍐呯疆瀵筸arkdown鐨勬敮鎸侊紝鑳藉鏂逛究鐨勮繘琛岃В鏋愰瑙堛�</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\"><a href=\"#Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\" class=\"headerlink\" title=\"Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�\"></a>Atom缂栬緫鍣ㄤ娇鐢ㄦ柟娉�</h2><ul>\n<li>棰勮markdown<ol>\n<li>鎵撳紑浠绘剰.md鏂囦欢(markdown婧愭枃浠�</li>\n<li>windows :   <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>杩欐潯鍛戒护璺烻ublime Text鏄竴鏍风殑锛屾墦寮�懡浠よ緭鍏ユ</li>\n<li>杈撳叆 <code>markdown preview toggle</code>(鍙互鍋锋噿鍙緭鍏mdpt`锛岃窡Sublime Text涓�牱鏀寔妯＄硦鍖归厤)</li>\n<li>enter閿嵆鍙湅鍒伴瑙�</li>\n</ol>\n</li>\n<li>Atom鎻掍欢瀹夎<ol>\n<li>windows :   <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗嗭紝杈撳叆 <code>settings view view installed packages</code><br>2銆佸湪绛涢�杈撳叆妗嗕腑锛屽啓<code>markdown</code>,鍗冲彲鐪嬪埌銆� </li>\n</ol>\n</li>\n<li><p>鎻掍欢瀹夎绀轰緥<br>涓嬮潰鎴戝啀浠嬬粛涓�釜灏忔彃浠讹紝鐢ㄦ潵鏍煎紡鍖栦粠鏈嶅姟绔姹傛潵鐨刯son鏁版嵁锛宲retty json銆�<br>鎿嶄綔姝ラ锛� </p>\n<ol>\n<li>mac : <code>ctrl + shift + p</code><br>windows : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗�<code>settings view install packages and themes</code>(涔熷彲浠ョ畝鍗曠殑杈撳叆install package)  </li>\n<li>鍦ㄦ悳绱㈡杈撳叆<code>pretty json</code>锛岀偣鍑籔ackages鎸夐挳锛屽湪鎼滅储缁撴灉涓紝鐐瑰嚮Install鎸夐挳鍗冲彲瀹夎銆� </li>\n<li><p>閫変腑涓�浠庢湇鍔″櫒涓嬭浇鐨刯son锛屽</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"result\"</span>:&#123;<span class=\"attr\">\"error\"</span>:<span class=\"number\">0</span>,<span class=\"attr\">\"type\"</span>:<span class=\"number\">2000</span>&#125;,<span class=\"attr\">\"sync\"</span>:&#123;<span class=\"attr\">\"newdata\"</span>:<span class=\"literal\">null</span>,<span class=\"attr\">\"lastver\"</span>:<span class=\"string\">\"0\"</span>,<span class=\"attr\">\"newnum\"</span>:<span class=\"string\">\"0\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>windows : <code>ctrl + shift + p</code><br>mac : <code>command + shift + p</code><br>鎵撳紑鍛戒护杈撳叆妗�杈撳叆 <code>pretty json prettify</code></p>\n</li>\n<li>鐐瑰嚮纭畾锛屽嵆鍙�<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"result\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"sync\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"newdata\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lastver\"</span>: <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"newnum\"</span>: <span class=\"string\">\"0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>Atom鏄痝ithub瀹樻柟鐨勭紪杈戣蒋浠讹紝涓汉璁や负寰堝ソ鐢�</p>\n<hr>\n<h2 id=\"markdown鍩烘湰璇硶\"><a href=\"#markdown鍩烘湰璇硶\" class=\"headerlink\" title=\"markdown鍩烘湰璇硶\"></a>markdown鍩烘湰璇硶</h2><ul>\n<li><strong>姒傝堪</strong><br>Markdown 鐨勭洰鏍囨槸瀹炵幇銆屾槗璇绘槗鍐欍�銆�<br>Markdown 鐨勮娉曞叏鐢变竴浜涚鍙锋墍缁勬垚锛岃繖浜涚鍙风粡杩囩簿鎸戠粏閫夛紝鍏朵綔鐢ㄤ竴鐩簡鐒躲�姣斿锛氬湪鏂囧瓧涓ゆ梺鍔犱笂鏄熷彿锛岀湅璧锋潵灏卞儚寮鸿皟銆侻arkdown 鐨勫垪琛ㄧ湅璧锋潵锛屽棷锛屽氨鏄垪琛ㄣ�Markdown 鐨勫尯鍧楀紩鐢ㄧ湅璧锋潵灏辩湡鐨勫儚鏄紩鐢ㄤ竴娈垫枃瀛楋紝灏卞儚浣犳浘鍦ㄧ數瀛愰偖浠朵腑瑙佽繃鐨勯偅鏍枫�  </li>\n<li><strong>鏍囬</strong></li>\n</ul>\n<ol>\n<li><p>绫�Setext 褰㈠紡鏄敤搴曠嚎鐨勫舰寮忥紝鍒╃敤 = 锛堟渶楂橀樁鏍囬锛夊拰 - 锛堢浜岄樁鏍囬锛夛紝渚嬪</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is an H1</span><br><span class=\"line\">=============</span><br><span class=\"line\"></span><br><span class=\"line\">This is an H2</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绫�Atx 褰㈠紡鍒欐槸鍦ㄨ棣栨彃鍏�1 鍒�6 涓�# 锛屽搴斿埌鏍囬 1 鍒�6 闃讹紝渚嬪</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 杩欐槸 H1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 杩欐槸 H2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 杩欐槸 H6</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>鍖哄潡寮曠敤 Blockquotes</strong><br>Markdown 鏍囪鍖哄潡寮曠敤鏄娇鐢ㄧ被浼�email 涓敤 &gt; 鐨勫紩鐢ㄦ柟寮忋�濡傛灉浣犺繕鐔熸倝鍦�email 淇′欢涓殑寮曡█閮ㄥ垎锛屼綘灏辩煡閬撴�涔堝湪 Markdown 鏂囦欢涓缓绔嬩竴涓尯鍧楀紩鐢紝閭ｄ細鐪嬭捣鏉ュ儚鏄綘鑷繁鍏堟柇濂借锛岀劧鍚庡湪姣忚鐨勬渶鍓嶉潰鍔犱笂 &gt; 锛� </li>\n</ul>\n<p>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.<br>><br>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>> id sem consectetuer libero luctus adipiscing.  </p>\n<p>Markdown 涔熷厑璁镐綘鍋锋噿鍙湪鏁翠釜娈佃惤鐨勭涓�鏈�墠闈㈠姞涓�> 锛�</p>\n<p>> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  </p>\n<p>> Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>  Suspendisse id sem consectetuer libero luctus adipiscing.<br>鍖哄潡寮曠敤鍙互宓屽锛堜緥濡傦細寮曠敤鍐呯殑寮曠敤锛夛紝鍙鏍规嵁灞傛鍔犱笂涓嶅悓鏁伴噺鐨�> 锛� </p>\n<p>  > This is the first level of quoting.<br>  ><br>  > This is nested blockquote.<br>  ><br>  > Back to the first level.  </p>\n<p>寮曠敤鐨勫尯鍧楀唴涔熷彲浠ヤ娇鐢ㄥ叾浠栫殑 Markdown 璇硶锛屽寘鎷爣棰樸�鍒楄〃銆佷唬鐮佸尯鍧楃瓑锛� </p>\n<p>> ## 杩欐槸涓�釜鏍囬銆�<br>><br>> 1.   杩欐槸绗竴琛屽垪琛ㄩ」銆�<br>> 2.   杩欐槸绗簩琛屽垪琛ㄩ」銆�<br>><br>> 缁欏嚭涓�簺渚嬪瓙浠ｇ爜锛�<br>><br>>     return shell_exec(“echo $input | $markdown_script”);<br>浠讳綍鍍忔牱鐨勬枃鏈紪杈戝櫒閮借兘杞绘澗鍦板缓绔�email 鍨嬬殑寮曠敤銆備緥濡傚湪 BBEdit 涓紝浣犲彲浠ラ�鍙栨枃瀛楀悗鐒跺悗浠庨�鍗曚腑閫夋嫨澧炲姞寮曠敤闃跺眰銆� </p>\n<ul>\n<li><strong>鍒楄〃</strong><br>Markdown 鏀寔鏈夊簭鍒楄〃鍜屾棤搴忓垪琛ㄣ�</li>\n</ul>\n<ol>\n<li><p>鏃犲簭鍒楄〃浣跨敤鏄熷彿銆佸姞鍙锋垨鏄噺鍙蜂綔涓哄垪琛ㄦ爣璁�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*   Red</span><br><span class=\"line\">*   Green</span><br><span class=\"line\">*   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绛夊悓浜�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+   Red</span><br><span class=\"line\">+   Green</span><br><span class=\"line\">+   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>涔熺瓑鍚屼簬:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   Red</span><br><span class=\"line\">-   Green</span><br><span class=\"line\">-   Blue</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鏈夊簭鍒楄〃鍒欎娇鐢ㄦ暟瀛楁帴鐫�竴涓嫳鏂囧彞鐐�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.  Bird</span><br><span class=\"line\">2.  McHale</span><br><span class=\"line\">3.  Parish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉瑕佸湪鍒楄〃椤圭洰鍐呮斁杩涘紩鐢紝閭�`>`` 灏遍渶瑕佺缉杩�</p>\n<p> > This is a blockquote<br> > inside a list item.</p>\n</li>\n</ol>\n<ul>\n<li><strong>浠ｇ爜鍖哄潡</strong>  </li>\n</ul>\n<ol>\n<li><p>鍜岀▼搴忕浉鍏崇殑鍐欎綔鎴栨槸鏍囩璇█鍘熷鐮侀�甯镐細鏈夊凡缁忔帓鐗堝ソ鐨勪唬鐮佸尯鍧楋紝閫氬父杩欎簺鍖哄潡鎴戜滑骞朵笉甯屾湜瀹冧互涓�埇娈佃惤鏂囦欢鐨勬柟寮忓幓鎺掔増锛岃�鏄収鍘熸潵鐨勬牱瀛愭樉绀猴紝Markdown 浼氱敤 \\&lt;pre> 鍜�\\&lt;code> 鏍囩鏉ユ妸浠ｇ爜鍖哄潡鍖呰捣鏉ャ�<br>瑕佸湪 Markdown 涓缓绔嬩唬鐮佸尯鍧楀緢绠�崟锛屽彧瑕佺畝鍗曞湴缂╄繘 4 涓┖鏍兼垨鏄�1 涓埗琛ㄧ灏卞彲浠ワ紝渚嬪锛屼笅闈㈢殑杈撳叆锛�<br>杩欐槸涓�釜鏅�娈佃惤锛�</p>\n<p> 杩欐槸涓�釜浠ｇ爜鍖哄潡銆�</p>\n</li>\n</ol>\n<ul>\n<li>__鍒嗛殧绾縚_<br>浣犲彲浠ュ湪涓�涓敤涓変釜浠ヤ笂鐨勬槦鍙枫�鍑忓彿銆佸簳绾挎潵寤虹珛涓�釜鍒嗛殧绾匡紝琛屽唴涓嶈兘鏈夊叾浠栦笢瑗裤�浣犱篃鍙互鍦ㄦ槦鍙锋垨鏄噺鍙蜂腑闂存彃鍏ョ┖鏍笺�涓嬮潰姣忕鍐欐硶閮藉彲浠ュ缓绔嬪垎闅旂嚎锛�<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * *</span><br><span class=\"line\">***</span><br><span class=\"line\">*****</span><br><span class=\"line\">- - -</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<hr>\n<hr>\n<hr>\n<ul>\n<li><strong>閾炬帴</strong><br>Markdown 鏀寔涓ょ褰㈠紡鐨勯摼鎺ヨ娉曪細 琛屽唴寮忓拰鍙傝�寮忎袱绉嶅舰寮忋�<br>涓嶇鏄摢涓�锛岄摼鎺ユ枃瀛楅兘鏄敤 [鏂规嫭鍙穄 鏉ユ爣璁般�</li>\n</ul>\n<ol>\n<li><p>瑕佸缓绔嬩竴涓鍐呭紡鐨勯摼鎺ワ紝鍙鍦ㄦ柟鍧楁嫭鍙峰悗闈㈢揣鎺ョ潃鍦嗘嫭鍙峰苟鎻掑叆缃戝潃閾炬帴鍗冲彲锛屽鏋滀綘杩樻兂瑕佸姞涓婇摼鎺ョ殑 title 鏂囧瓧锛屽彧瑕佸湪缃戝潃鍚庨潰锛岀敤鍙屽紩鍙锋妸 title 鏂囧瓧鍖呰捣鏉ュ嵆鍙紝渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class=\"line\"></span><br><span class=\"line\">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉浣犳槸瑕侀摼鎺ュ埌鍚屾牱涓绘満鐨勮祫婧愶紝浣犲彲浠ヤ娇鐢ㄧ浉瀵硅矾寰勶細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鍙傝�寮忕殑閾炬帴鏄湪閾炬帴鏂囧瓧鐨勬嫭鍙峰悗闈㈠啀鎺ヤ笂鍙︿竴涓柟鎷彿锛岃�鍦ㄧ浜屼釜鏂规嫭鍙烽噷闈㈣濉叆鐢ㄤ互杈ㄨ瘑閾炬帴鐨勬爣璁帮細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浣犱篃鍙互閫夋嫨鎬у湴鍦ㄤ袱涓柟鎷彿涓棿鍔犱笂涓�釜绌烘牸锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鎺ョ潃锛屽湪鏂囦欢鐨勪换鎰忓锛屼綘鍙互鎶婅繖涓爣璁扮殑閾炬帴鍐呭瀹氫箟鍑烘潵锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>涓嬮潰鏄竴涓弬鑰冨紡閾炬帴鐨勮寖渚嬶細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I get 10 times more traffic from [Google] [1] than from</span><br><span class=\"line\">[Yahoo] [2] or [MSN] [3].</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class=\"line\">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class=\"line\">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉鏀规垚鐢ㄩ摼鎺ュ悕绉扮殑鏂瑰紡鍐欙細</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I get 10 times more traffic from [Google][] than from</span><br><span class=\"line\">[Yahoo][] or [MSN][].</span><br><span class=\"line\"></span><br><span class=\"line\">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class=\"line\">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class=\"line\">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p><strong>寮鸿皟</strong><br>Markdown 浣跨敤鏄熷彿锛圽<em>锛夊拰搴曠嚎锛圽_锛変綔涓烘爣璁板己璋冨瓧璇嶇殑绗﹀彿锛岃\\</em> 鎴�_ 鍖呭洿鐨勫瓧璇嶄細琚浆鎴愮敤 鏍囩鍖呭洿锛岀敤涓や釜* 鎴�_ 鍖呰捣鏉ョ殑璇濓紝鍒欎細琚浆鎴�<strong>锛屼緥濡傦細</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*single asterisks*</span><br><span class=\"line\"></span><br><span class=\"line\">_single underscores_</span><br><span class=\"line\"></span><br><span class=\"line\">**double asterisks**</span><br><span class=\"line\"></span><br><span class=\"line\">__double underscores__</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>浠ｇ爜</strong></p>\n</li>\n</ul>\n<ol>\n<li><p>濡傛灉瑕佹爣璁颁竴灏忔琛屽唴浠ｇ爜锛屼綘鍙互鐢ㄥ弽寮曞彿鎶婂畠鍖呰捣鏉ワ紙`锛夛紝渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Use the `printf()` function.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>濡傛灉瑕佸湪浠ｇ爜鍖烘鍐呮彃鍏ュ弽寮曞彿锛屼綘鍙互鐢ㄥ涓弽寮曞彿鏉ュ紑鍚拰缁撴潫浠ｇ爜鍖烘锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浠ｇ爜鍖烘鐨勮捣濮嬪拰缁撴潫绔兘鍙互鏀惧叆涓�釜绌虹櫧锛岃捣濮嬬鍚庨潰涓�釜锛岀粨鏉熺鍓嶉潰涓�釜锛岃繖鏍蜂綘灏卞彲浠ュ湪鍖烘鐨勪竴寮�灏辨彃鍏ュ弽寮曞彿锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A single backtick in a code span: `` ` ``</span><br><span class=\"line\"></span><br><span class=\"line\">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>鍦ㄤ唬鐮佸尯娈靛唴锛� 鍜屽皷鎷彿閮戒細琚嚜鍔ㄥ湴杞垚 HTML 瀹炰綋锛岃繖浣垮緱鎻掑叆 HTML 鍘熷鐮佸彉寰楀緢瀹规槗锛孧arkdown 浼氭妸涓嬮潰杩欐锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please don&apos;t use any `&lt;blink&gt;` tags.</span><br><span class=\"line\"># 浣犱篃鍙互杩欐牱鍐欙細</span><br><span class=\"line\">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>鍥剧墖</strong><br>寰堟槑鏄惧湴锛岃鍦ㄧ函鏂囧瓧搴旂敤涓璁′竴涓�鑷劧銆嶇殑璇硶鏉ユ彃鍏ュ浘鐗囨槸鏈変竴瀹氶毦搴︾殑銆�<br>Markdown 浣跨敤涓�鍜岄摼鎺ュ緢鐩镐技鐨勮娉曟潵鏍囪鍥剧墖锛屽悓鏍蜂篃鍏佽涓ょ鏍峰紡锛�琛屽唴寮忓拰鍙傝�寮忋�</li>\n</ul>\n<ol>\n<li>琛屽唴寮忕殑鍥剧墖璇硶鐪嬭捣鏉ュ儚鏄細<br><code>![Alt text](/path/to/img.jpg)</code></li>\n</ol>\n<p><code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code><br>璇︾粏鍙欒堪濡備笅锛�<br>涓�釜鎯婂徆鍙�!<br>  鈼�鎺ョ潃涓�釜鏂规嫭鍙凤紝閲岄潰鏀句笂鍥剧墖鐨勬浛浠ｆ枃瀛�<br>  鈼�鎺ョ潃涓�釜鏅�鎷彿锛岄噷闈㈡斁涓婂浘鐗囩殑缃戝潃锛屾渶鍚庤繕鍙互鐢ㄥ紩鍙峰寘浣忓苟鍔犱笂 閫夋嫨鎬х殑 ‘title’ 鏂囧瓧銆�<br>鍙傝�寮忕殑鍥剧墖璇硶鍒欓暱寰楀儚杩欐牱锛�<br><code>![Alt text][id]</code><br>銆宨d銆嶆槸鍥剧墖鍙傝�鐨勫悕绉帮紝鍥剧墖鍙傝�鐨勫畾涔夋柟寮忓垯鍜岃繛缁撳弬鑰冧竴鏍凤細<br><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code><br>鍒扮洰鍓嶄负姝紝 Markdown 杩樻病鏈夊姙娉曟寚瀹氬浘鐗囩殑瀹介珮锛屽鏋滀綘闇�鐨勮瘽锛屼綘鍙互浣跨敤鏅�鐨�img&gt;鏍囩</p>\n<h2 id=\"GFM\"><a href=\"#GFM\" class=\"headerlink\" title=\"GFM\"></a>GFM</h2><p>GitHub鐢�GitHub Flavored Markdown”锛岀畝绉癎FM銆傚畠骞挎硾搴旂敤鍦╯ite–in issues, comments, 浠ュ強pull requests.<br>瀹冨拰鏍囧噯鐨凪arkdown鏈変竴浜涘尯鍒紝骞舵坊鍔犱簡涓�簺棰濆鐨勫姛鑳姐�<br>涓庢爣鍑哅arkdown鐨勫尯鍒�</p>\n<ul>\n<li>涓嬪垝绾�<br>鏍囧噯Markdown灏嗗惈鏈変笅鍒掔嚎鐨勫崟璇嶈浆鎴愭枩浣撳瓧锛岃�GFM蹇界暐鍗曡瘝涓殑涓嬪垝绾裤�</li>\n<li>鍒犻櫎绾�<br>GFM澧炲姞浜嗗垹闄ょ嚎<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~Mistaken text.~~</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>鏄剧ず涓猴細<br><del>Mistaken text.</del></p>\n<ul>\n<li><p>浠ｇ爜鍧�<br>濡傛灉鏈変竴鏁村潡浠ｇ爜闇�鍖呭洿锛�鍙互浣跨敤(```)<br>渚嬪锛�</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 0</span><br><span class=\"line\">x = 2 + 2</span><br><span class=\"line\">what is x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>璇硶楂樹寒<br>浠ｇ爜鍧楀彲浠ヤ娇鐢ㄨ娉曢珮浜簡锛侊紒鍦ㄤ綘鐨勪唬鐮佸潡涓坊鍔犱竴涓彲閫夌殑璇█鏍囪瘑绗�鎴戜滑浼氶�杩囪娉曢珮浜樉绀鸿繍琛屽畠銆備緥濡傦紝涓轰簡璇硶楂樹寒ruby浠ｇ爜锛�</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'redcarpet'</span></span><br><span class=\"line\">markdown = Redcarpet.new(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">puts markdown.to_html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Github浣跨敤Linguist鏉ュ疄鐜拌瑷�娴嬪拰璇硶楂樹寒銆�<br>浣犲彲浠ラ�杩囬槄璇籺he languages YAML file.鏉ヨ幏鍙栨湁鏁堢殑璇硶楂樹寒鍏抽敭瀛椼�</p>\n<h2 id=\"琛ㄦ牸\"><a href=\"#琛ㄦ牸\" class=\"headerlink\" title=\" 琛ㄦ牸  \"></a> <strong>琛ㄦ牸</strong>  </h2><p>浣犲彲浠ュ垱寤鸿〃鏍硷紝閫氳繃绗﹀彿-鍒嗗紑绗竴琛屽拰鍏朵粬琛岋紝閫氳繃|鍒嗗紑鍚勪釜鍒�<br>| row1    | row2    | row3    |<br>| ——- | ——- | ——- |<br>| 1234    | 4567    | 4567    |  </p>\n<table>\n<thead>\n<tr>\n<th>row1</th>\n<th>row2</th>\n<th>row3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1234</td>\n<td>4567</td>\n<td>4567</td>\n</tr>\n</tbody>\n</table>\n<p>鍦ㄦ爣棰樿鍖呭惈:锛屼綘鍙互浣垮緱琛ㄦ牸鍚戝乏瀵归綈锛屽悜鍙冲榻愶紝灞呬腑<br>| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :———— |:—————:| —–:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.<br>:鍦ㄦ渶宸﹁竟琛ㄧず宸﹀榻愶紝:鍦ㄦ渶鍙宠竟琛ㄧず鍙冲榻愶紝宸﹀彸涓よ竟閮芥湁:琛ㄧず灞呬腑銆�</p>\n<h2 id=\"缁撹锛歘\"><a href=\"#缁撹锛歘\" class=\"headerlink\" title=\"__缁撹锛歘_\"></a>__缁撹锛歘_</h2><p>markdown杩樻湁涓�簺鐢绘祦绋嬪浘鐨勯珮绾х敤娉曪紝杩欓噷灏变笉鍒椾妇浜�</p>\n"},{"title":"MyBatis自动生成工具generator详细使用","date":"2017-07-13T01:27:38.000Z","_content":"\ngenerator测config配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<!-- 配置生成器 -->\n<generatorConfiguration>\n<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项\n    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        \n    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.\n    注意，两个属性只能选址一个;\n\n    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用\n<properties resource=\"\" url=\"\" />\n -->\n\n <!-- 在MBG工作的时候，需要额外加载的依赖包\n     location属性指明加载jar/zip包的全路径\n<classPathEntry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\" />\n  -->\n\n<!-- \n    context:生成一组对象的环境 \n    id:必选，上下文id，用于在生成错误时提示\n    defaultModelType:指定生成对象的样式\n        1，conditional：类似hierarchical；\n        2，flat：所有内容（主键，blob）等全部生成在一个对象中；\n        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)\n    targetRuntime:\n        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；\n        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；\n    introspectedColumnImpl：类全限定名，用于扩展MBG\n-->\n<context id=\"mysql\" defaultModelType=\"hierarchical\" targetRuntime=\"MyBatis3Simple\" >\n\n    <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；\n        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖\n     -->\n    <property name=\"autoDelimitKeywords\" value=\"false\"/>\n    <!-- 生成的Java文件的编码 -->\n    <property name=\"javaFileEncoding\" value=\"UTF-8\"/>\n    <!-- 格式化java代码 -->\n    <property name=\"javaFormatter\" value=\"org.mybatis.generator.api.dom.DefaultJavaFormatter\"/>\n    <!-- 格式化XML代码 -->\n    <property name=\"xmlFormatter\" value=\"org.mybatis.generator.api.dom.DefaultXmlFormatter\"/>\n\n    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->\n    <property name=\"beginningDelimiter\" value=\"`\"/>\n    <property name=\"endingDelimiter\" value=\"`\"/>\n\n    <!-- 必须要有的，使用这个配置链接数据库\n        @TODO:是否可以扩展\n     -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\" connectionURL=\"jdbc:mysql:///pss\" userId=\"root\" password=\"admin\">\n        <!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 -->\n    </jdbcConnection>\n\n    <!-- java类型处理器 \n        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；\n        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； \n    -->\n    <javaTypeResolver type=\"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl\">\n        <!-- \n            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型\n            false：默认,\n                scale>0;length>18：使用BigDecimal;\n                scale=0;length[10,18]：使用Long；\n                scale=0;length[5,9]：使用Integer；\n                scale=0;length<5：使用Short；\n         -->\n        <property name=\"forceBigDecimals\" value=\"false\"/>\n    </javaTypeResolver>\n\n\n    <!-- java模型创建器，是必须要的元素\n        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类\n        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；\n        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录\n     -->\n    <javaModelGenerator targetPackage=\"com._520it.mybatis.domain\" targetProject=\"src/main/java\">\n        <!--  for MyBatis3/MyBatis3Simple\n            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；\n         -->\n        <property name=\"constructorBased\" value=\"false\"/>\n\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n\n        <!-- for MyBatis3 / MyBatis3Simple\n            是否创建一个不可变的类，如果为true，\n            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类\n         -->\n        <property name=\"immutable\" value=\"false\"/>\n\n        <!-- 设置一个根对象，\n            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项\n            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：\n                1，属性名相同，类型相同，有相同的getter/setter方法；\n         -->\n        <property name=\"rootClass\" value=\"com._520it.mybatis.domain.BaseDomain\"/>\n\n        <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->\n        <property name=\"trimStrings\" value=\"true\"/>\n    </javaModelGenerator>\n\n\n    <!-- 生成SQL map的XML文件生成器，\n        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），\n            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置\n        targetPackage/targetProject:同javaModelGenerator\n     -->\n    <sqlMapGenerator targetPackage=\"com._520it.mybatis.mapper\" targetProject=\"src/main/resources\">\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n    </sqlMapGenerator>\n\n\n    <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 \n        targetPackage/targetProject:同javaModelGenerator\n        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：\n            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；\n            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；\n            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；\n        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER\n    -->\n    <javaClientGenerator targetPackage=\"com._520it.mybatis.mapper\" type=\"ANNOTATEDMAPPER\" targetProject=\"src/main/java\">\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n\n        <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查\n        <property name=\"rootInterface\" value=\"\"/>\n         -->\n    </javaClientGenerator>\n\n    <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素\n        选择的table会生成一下文件：\n        1，SQL map文件\n        2，生成一个主键类；\n        3，除了BLOB和主键的其他字段的类；\n        4，包含BLOB的类；\n        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；\n        6，Mapper接口（可选）\n\n        tableName（必要）：要生成对象的表名；\n        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会\n            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：\n            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；\n            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；\n            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；\n            4，否则，使用指定的大小写格式查询；\n        另外的，如果在创建表的时候，使用的\"\"把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；\n        这个时候，请设置delimitIdentifiers=\"true\"即可保留大小写格式；\n\n        可选：\n        1，schema：数据库的schema；\n        2，catalog：数据库的catalog；\n        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName\n        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；\n        5，enableInsert（默认true）：指定是否生成insert语句；\n        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；\n        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；\n        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；\n        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；\n        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；\n        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；\n        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；\n        13，modelType：参考context元素的defaultModelType，相当于覆盖；\n        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）\n        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性\n\n        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；\n     -->\n    <table tableName=\"userinfo\" >\n\n        <!-- 参考 javaModelGenerator 的 constructorBased属性-->\n        <property name=\"constructorBased\" value=\"false\"/>\n\n        <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； -->\n        <property name=\"ignoreQualifiersAtRuntime\" value=\"false\"/>\n\n        <!-- 参考 javaModelGenerator 的 immutable 属性 -->\n        <property name=\"immutable\" value=\"false\"/>\n\n        <!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 -->\n        <property name=\"modelOnly\" value=\"false\"/>\n\n        <!-- 参考 javaModelGenerator 的 rootClass 属性 \n        <property name=\"rootClass\" value=\"\"/>\n         -->\n\n        <!-- 参考javaClientGenerator 的  rootInterface 属性\n        <property name=\"rootInterface\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog \n        <property name=\"runtimeCatalog\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema \n        <property name=\"runtimeSchema\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename \n        <property name=\"runtimeTableName\" value=\"\"/>\n        -->\n\n        <!-- 注意，该属性只针对MyBatis3Simple有用；\n            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；\n         -->\n        <property name=\"selectAllOrderByClause\" value=\"age desc,username asc\"/>\n\n        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->\n        <property name=\"useActualColumnNames\" value=\"false\"/>\n\n\n        <!-- generatedKey用于生成生成主键的方法，\n            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选\n            column:主键的列名；\n            sqlStatement：要生成的selectKey语句，有以下可选项：\n                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()\n                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()\n                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1\n                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()\n                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()\n                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1\n                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()\n                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()\n                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY\n                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=\"true\"和keyProperty属性\n        <generatedKey column=\"\" sqlStatement=\"\"/>\n         -->\n\n        <!-- \n            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，\n            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；\n            那么就可以设置searchString为\"^CUST_\"，并使用空白替换，那么生成的Customer对象中的属性名称就不是\n            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；\n\n            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，\n            如果使用了columnOverride元素，该属性无效；\n\n        <columnRenamingRule searchString=\"\" replaceString=\"\"/>\n         -->\n\n\n         <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；\n             column:要重新设置的列名；\n             注意，一个table元素中可以有多个columnOverride元素哈~\n          -->\n         <columnOverride column=\"username\">\n             <!-- 使用property属性来指定列要生成的属性名称 -->\n             <property name=\"property\" value=\"userName\"/>\n\n             <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名\n             <property name=\"javaType\" value=\"\"/>\n              -->\n\n             <!-- jdbcType用于指定该列的JDBC类型 \n             <property name=\"jdbcType\" value=\"\"/>\n              -->\n\n             <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名\n                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler\n                 只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述\n             <property name=\"jdbcType\" value=\"\"/>\n             -->\n\n             <!-- 参考table元素的delimitAllColumns配置，默认为false\n             <property name=\"delimitedColumnName\" value=\"\"/>\n              -->\n         </columnOverride>\n\n         <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 \n             column:指定要忽略的列的名字；\n             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false\n\n             注意，一个table元素中可以有多个ignoreColumn元素\n         <ignoreColumn column=\"deptId\" delimitedColumnName=\"\"/>\n         -->\n    </table>\n\n</context>\n\n</generatorConfiguration>\n```\n","source":"_posts/MyBatis-generator.md","raw":"---\ntitle: MyBatis自动生成工具generator详细使用\ndate: 2017-07-13 09:27:38\ntags: generator\ncategories: MyBatis\n---\n\ngenerator测config配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n  PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<!-- 配置生成器 -->\n<generatorConfiguration>\n<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项\n    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        \n    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.\n    注意，两个属性只能选址一个;\n\n    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用\n<properties resource=\"\" url=\"\" />\n -->\n\n <!-- 在MBG工作的时候，需要额外加载的依赖包\n     location属性指明加载jar/zip包的全路径\n<classPathEntry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\" />\n  -->\n\n<!-- \n    context:生成一组对象的环境 \n    id:必选，上下文id，用于在生成错误时提示\n    defaultModelType:指定生成对象的样式\n        1，conditional：类似hierarchical；\n        2，flat：所有内容（主键，blob）等全部生成在一个对象中；\n        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)\n    targetRuntime:\n        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；\n        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；\n    introspectedColumnImpl：类全限定名，用于扩展MBG\n-->\n<context id=\"mysql\" defaultModelType=\"hierarchical\" targetRuntime=\"MyBatis3Simple\" >\n\n    <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；\n        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖\n     -->\n    <property name=\"autoDelimitKeywords\" value=\"false\"/>\n    <!-- 生成的Java文件的编码 -->\n    <property name=\"javaFileEncoding\" value=\"UTF-8\"/>\n    <!-- 格式化java代码 -->\n    <property name=\"javaFormatter\" value=\"org.mybatis.generator.api.dom.DefaultJavaFormatter\"/>\n    <!-- 格式化XML代码 -->\n    <property name=\"xmlFormatter\" value=\"org.mybatis.generator.api.dom.DefaultXmlFormatter\"/>\n\n    <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->\n    <property name=\"beginningDelimiter\" value=\"`\"/>\n    <property name=\"endingDelimiter\" value=\"`\"/>\n\n    <!-- 必须要有的，使用这个配置链接数据库\n        @TODO:是否可以扩展\n     -->\n    <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\" connectionURL=\"jdbc:mysql:///pss\" userId=\"root\" password=\"admin\">\n        <!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 -->\n    </jdbcConnection>\n\n    <!-- java类型处理器 \n        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；\n        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； \n    -->\n    <javaTypeResolver type=\"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl\">\n        <!-- \n            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型\n            false：默认,\n                scale>0;length>18：使用BigDecimal;\n                scale=0;length[10,18]：使用Long；\n                scale=0;length[5,9]：使用Integer；\n                scale=0;length<5：使用Short；\n         -->\n        <property name=\"forceBigDecimals\" value=\"false\"/>\n    </javaTypeResolver>\n\n\n    <!-- java模型创建器，是必须要的元素\n        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类\n        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；\n        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录\n     -->\n    <javaModelGenerator targetPackage=\"com._520it.mybatis.domain\" targetProject=\"src/main/java\">\n        <!--  for MyBatis3/MyBatis3Simple\n            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；\n         -->\n        <property name=\"constructorBased\" value=\"false\"/>\n\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n\n        <!-- for MyBatis3 / MyBatis3Simple\n            是否创建一个不可变的类，如果为true，\n            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类\n         -->\n        <property name=\"immutable\" value=\"false\"/>\n\n        <!-- 设置一个根对象，\n            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项\n            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：\n                1，属性名相同，类型相同，有相同的getter/setter方法；\n         -->\n        <property name=\"rootClass\" value=\"com._520it.mybatis.domain.BaseDomain\"/>\n\n        <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->\n        <property name=\"trimStrings\" value=\"true\"/>\n    </javaModelGenerator>\n\n\n    <!-- 生成SQL map的XML文件生成器，\n        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），\n            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置\n        targetPackage/targetProject:同javaModelGenerator\n     -->\n    <sqlMapGenerator targetPackage=\"com._520it.mybatis.mapper\" targetProject=\"src/main/resources\">\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n    </sqlMapGenerator>\n\n\n    <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 \n        targetPackage/targetProject:同javaModelGenerator\n        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：\n            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；\n            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；\n            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；\n        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER\n    -->\n    <javaClientGenerator targetPackage=\"com._520it.mybatis.mapper\" type=\"ANNOTATEDMAPPER\" targetProject=\"src/main/java\">\n        <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n        <property name=\"enableSubPackages\" value=\"true\"/>\n\n        <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查\n        <property name=\"rootInterface\" value=\"\"/>\n         -->\n    </javaClientGenerator>\n\n    <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素\n        选择的table会生成一下文件：\n        1，SQL map文件\n        2，生成一个主键类；\n        3，除了BLOB和主键的其他字段的类；\n        4，包含BLOB的类；\n        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；\n        6，Mapper接口（可选）\n\n        tableName（必要）：要生成对象的表名；\n        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会\n            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：\n            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；\n            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；\n            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；\n            4，否则，使用指定的大小写格式查询；\n        另外的，如果在创建表的时候，使用的\"\"把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；\n        这个时候，请设置delimitIdentifiers=\"true\"即可保留大小写格式；\n\n        可选：\n        1，schema：数据库的schema；\n        2，catalog：数据库的catalog；\n        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName\n        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；\n        5，enableInsert（默认true）：指定是否生成insert语句；\n        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；\n        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；\n        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；\n        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；\n        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；\n        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；\n        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；\n        13，modelType：参考context元素的defaultModelType，相当于覆盖；\n        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）\n        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性\n\n        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；\n     -->\n    <table tableName=\"userinfo\" >\n\n        <!-- 参考 javaModelGenerator 的 constructorBased属性-->\n        <property name=\"constructorBased\" value=\"false\"/>\n\n        <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； -->\n        <property name=\"ignoreQualifiersAtRuntime\" value=\"false\"/>\n\n        <!-- 参考 javaModelGenerator 的 immutable 属性 -->\n        <property name=\"immutable\" value=\"false\"/>\n\n        <!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 -->\n        <property name=\"modelOnly\" value=\"false\"/>\n\n        <!-- 参考 javaModelGenerator 的 rootClass 属性 \n        <property name=\"rootClass\" value=\"\"/>\n         -->\n\n        <!-- 参考javaClientGenerator 的  rootInterface 属性\n        <property name=\"rootInterface\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog \n        <property name=\"runtimeCatalog\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema \n        <property name=\"runtimeSchema\" value=\"\"/>\n        -->\n\n        <!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename \n        <property name=\"runtimeTableName\" value=\"\"/>\n        -->\n\n        <!-- 注意，该属性只针对MyBatis3Simple有用；\n            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；\n         -->\n        <property name=\"selectAllOrderByClause\" value=\"age desc,username asc\"/>\n\n        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->\n        <property name=\"useActualColumnNames\" value=\"false\"/>\n\n\n        <!-- generatedKey用于生成生成主键的方法，\n            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选\n            column:主键的列名；\n            sqlStatement：要生成的selectKey语句，有以下可选项：\n                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()\n                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()\n                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1\n                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()\n                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()\n                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1\n                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()\n                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()\n                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY\n                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=\"true\"和keyProperty属性\n        <generatedKey column=\"\" sqlStatement=\"\"/>\n         -->\n\n        <!-- \n            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，\n            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；\n            那么就可以设置searchString为\"^CUST_\"，并使用空白替换，那么生成的Customer对象中的属性名称就不是\n            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；\n\n            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，\n            如果使用了columnOverride元素，该属性无效；\n\n        <columnRenamingRule searchString=\"\" replaceString=\"\"/>\n         -->\n\n\n         <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；\n             column:要重新设置的列名；\n             注意，一个table元素中可以有多个columnOverride元素哈~\n          -->\n         <columnOverride column=\"username\">\n             <!-- 使用property属性来指定列要生成的属性名称 -->\n             <property name=\"property\" value=\"userName\"/>\n\n             <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名\n             <property name=\"javaType\" value=\"\"/>\n              -->\n\n             <!-- jdbcType用于指定该列的JDBC类型 \n             <property name=\"jdbcType\" value=\"\"/>\n              -->\n\n             <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名\n                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler\n                 只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述\n             <property name=\"jdbcType\" value=\"\"/>\n             -->\n\n             <!-- 参考table元素的delimitAllColumns配置，默认为false\n             <property name=\"delimitedColumnName\" value=\"\"/>\n              -->\n         </columnOverride>\n\n         <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 \n             column:指定要忽略的列的名字；\n             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false\n\n             注意，一个table元素中可以有多个ignoreColumn元素\n         <ignoreColumn column=\"deptId\" delimitedColumnName=\"\"/>\n         -->\n    </table>\n\n</context>\n\n</generatorConfiguration>\n```\n","slug":"MyBatis-generator","published":1,"updated":"2018-10-17T05:48:51.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr6b003hk4nzpvqce57i","content":"<p>generator测config配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- 配置生成器 --&gt;</span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span><br><span class=\"line\">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span><br><span class=\"line\">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span><br><span class=\"line\">    注意，两个属性只能选址一个;</span><br><span class=\"line\"></span><br><span class=\"line\">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span><br><span class=\"line\">&lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span><br><span class=\"line\">     location属性指明加载jar/zip包的全路径</span><br><span class=\"line\">&lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot; /&gt;</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">    context:生成一组对象的环境 </span><br><span class=\"line\">    id:必选，上下文id，用于在生成错误时提示</span><br><span class=\"line\">    defaultModelType:指定生成对象的样式</span><br><span class=\"line\">        1，conditional：类似hierarchical；</span><br><span class=\"line\">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span><br><span class=\"line\">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span><br><span class=\"line\">    targetRuntime:</span><br><span class=\"line\">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span><br><span class=\"line\">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span><br><span class=\"line\">    introspectedColumnImpl：类全限定名，用于扩展MBG</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;context id=&quot;mysql&quot; defaultModelType=&quot;hierarchical&quot; targetRuntime=&quot;MyBatis3Simple&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span><br><span class=\"line\">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 生成的Java文件的编码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 格式化java代码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 格式化XML代码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 必须要有的，使用这个配置链接数据库</span><br><span class=\"line\">        @TODO:是否可以扩展</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql:///pss&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span><br><span class=\"line\">    &lt;/jdbcConnection&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- java类型处理器 </span><br><span class=\"line\">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span><br><span class=\"line\">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;javaTypeResolver type=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;&gt;</span><br><span class=\"line\">        &lt;!-- </span><br><span class=\"line\">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span><br><span class=\"line\">            false：默认,</span><br><span class=\"line\">                scale&gt;0;length&gt;18：使用BigDecimal;</span><br><span class=\"line\">                scale=0;length[10,18]：使用Long；</span><br><span class=\"line\">                scale=0;length[5,9]：使用Integer；</span><br><span class=\"line\">                scale=0;length&lt;5：使用Short；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;/javaTypeResolver&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- java模型创建器，是必须要的元素</span><br><span class=\"line\">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span><br><span class=\"line\">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span><br><span class=\"line\">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;javaModelGenerator targetPackage=&quot;com._520it.mybatis.domain&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class=\"line\">        &lt;!--  for MyBatis3/MyBatis3Simple</span><br><span class=\"line\">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- for MyBatis3 / MyBatis3Simple</span><br><span class=\"line\">            是否创建一个不可变的类，如果为true，</span><br><span class=\"line\">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置一个根对象，</span><br><span class=\"line\">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span><br><span class=\"line\">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span><br><span class=\"line\">                1，属性名相同，类型相同，有相同的getter/setter方法；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;rootClass&quot; value=&quot;com._520it.mybatis.domain.BaseDomain&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;/javaModelGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 生成SQL map的XML文件生成器，</span><br><span class=\"line\">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span><br><span class=\"line\">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span><br><span class=\"line\">        targetPackage/targetProject:同javaModelGenerator</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;sqlMapGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;/sqlMapGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span><br><span class=\"line\">        targetPackage/targetProject:同javaModelGenerator</span><br><span class=\"line\">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span><br><span class=\"line\">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span><br><span class=\"line\">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span><br><span class=\"line\">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span><br><span class=\"line\">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;javaClientGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; type=&quot;ANNOTATEDMAPPER&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span><br><span class=\"line\">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">    &lt;/javaClientGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span><br><span class=\"line\">        选择的table会生成一下文件：</span><br><span class=\"line\">        1，SQL map文件</span><br><span class=\"line\">        2，生成一个主键类；</span><br><span class=\"line\">        3，除了BLOB和主键的其他字段的类；</span><br><span class=\"line\">        4，包含BLOB的类；</span><br><span class=\"line\">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span><br><span class=\"line\">        6，Mapper接口（可选）</span><br><span class=\"line\"></span><br><span class=\"line\">        tableName（必要）：要生成对象的表名；</span><br><span class=\"line\">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span><br><span class=\"line\">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span><br><span class=\"line\">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span><br><span class=\"line\">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span><br><span class=\"line\">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span><br><span class=\"line\">            4，否则，使用指定的大小写格式查询；</span><br><span class=\"line\">        另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span><br><span class=\"line\">        这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式；</span><br><span class=\"line\"></span><br><span class=\"line\">        可选：</span><br><span class=\"line\">        1，schema：数据库的schema；</span><br><span class=\"line\">        2，catalog：数据库的catalog；</span><br><span class=\"line\">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span><br><span class=\"line\">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span><br><span class=\"line\">        5，enableInsert（默认true）：指定是否生成insert语句；</span><br><span class=\"line\">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span><br><span class=\"line\">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span><br><span class=\"line\">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span><br><span class=\"line\">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span><br><span class=\"line\">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span><br><span class=\"line\">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span><br><span class=\"line\">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span><br><span class=\"line\">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span><br><span class=\"line\">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span><br><span class=\"line\">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span><br><span class=\"line\"></span><br><span class=\"line\">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;table tableName=&quot;userinfo&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span><br><span class=\"line\">        &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span><br><span class=\"line\">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span><br><span class=\"line\">        &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span><br><span class=\"line\">        &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span><br><span class=\"line\">        &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span><br><span class=\"line\">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username asc&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- generatedKey用于生成生成主键的方法，</span><br><span class=\"line\">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span><br><span class=\"line\">            column:主键的列名；</span><br><span class=\"line\">            sqlStatement：要生成的selectKey语句，有以下可选项：</span><br><span class=\"line\">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span><br><span class=\"line\">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span><br><span class=\"line\">                Informix  :相当于selectKey的SQL为：select dbinfo(&apos;sqlca.sqlerrd1&apos;) from systables where tabid=1</span><br><span class=\"line\">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span><br><span class=\"line\">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span><br><span class=\"line\">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span><br><span class=\"line\">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性</span><br><span class=\"line\">        &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- </span><br><span class=\"line\">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span><br><span class=\"line\">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span><br><span class=\"line\">            那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span><br><span class=\"line\">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span><br><span class=\"line\"></span><br><span class=\"line\">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span><br><span class=\"line\">            如果使用了columnOverride元素，该属性无效；</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span><br><span class=\"line\">             column:要重新设置的列名；</span><br><span class=\"line\">             注意，一个table元素中可以有多个columnOverride元素哈~</span><br><span class=\"line\">          --&gt;</span><br><span class=\"line\">         &lt;columnOverride column=&quot;username&quot;&gt;</span><br><span class=\"line\">             &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span><br><span class=\"line\">             &lt;property name=&quot;property&quot; value=&quot;userName&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span><br><span class=\"line\">             &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- jdbcType用于指定该列的JDBC类型 </span><br><span class=\"line\">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span><br><span class=\"line\">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span><br><span class=\"line\">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span><br><span class=\"line\">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">             --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span><br><span class=\"line\">             &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\">         &lt;/columnOverride&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span><br><span class=\"line\">             column:指定要忽略的列的名字；</span><br><span class=\"line\">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span><br><span class=\"line\"></span><br><span class=\"line\">             注意，一个table元素中可以有多个ignoreColumn元素</span><br><span class=\"line\">         &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>generator测config配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!-- 配置生成器 --&gt;</span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span><br><span class=\"line\">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span><br><span class=\"line\">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span><br><span class=\"line\">    注意，两个属性只能选址一个;</span><br><span class=\"line\"></span><br><span class=\"line\">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span><br><span class=\"line\">&lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span><br><span class=\"line\">     location属性指明加载jar/zip包的全路径</span><br><span class=\"line\">&lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot; /&gt;</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">    context:生成一组对象的环境 </span><br><span class=\"line\">    id:必选，上下文id，用于在生成错误时提示</span><br><span class=\"line\">    defaultModelType:指定生成对象的样式</span><br><span class=\"line\">        1，conditional：类似hierarchical；</span><br><span class=\"line\">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span><br><span class=\"line\">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span><br><span class=\"line\">    targetRuntime:</span><br><span class=\"line\">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span><br><span class=\"line\">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span><br><span class=\"line\">    introspectedColumnImpl：类全限定名，用于扩展MBG</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;context id=&quot;mysql&quot; defaultModelType=&quot;hierarchical&quot; targetRuntime=&quot;MyBatis3Simple&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span><br><span class=\"line\">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 生成的Java文件的编码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 格式化java代码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 格式化XML代码 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 必须要有的，使用这个配置链接数据库</span><br><span class=\"line\">        @TODO:是否可以扩展</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql:///pss&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span><br><span class=\"line\">    &lt;/jdbcConnection&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- java类型处理器 </span><br><span class=\"line\">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span><br><span class=\"line\">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;javaTypeResolver type=&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;&gt;</span><br><span class=\"line\">        &lt;!-- </span><br><span class=\"line\">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span><br><span class=\"line\">            false：默认,</span><br><span class=\"line\">                scale&gt;0;length&gt;18：使用BigDecimal;</span><br><span class=\"line\">                scale=0;length[10,18]：使用Long；</span><br><span class=\"line\">                scale=0;length[5,9]：使用Integer；</span><br><span class=\"line\">                scale=0;length&lt;5：使用Short；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;/javaTypeResolver&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- java模型创建器，是必须要的元素</span><br><span class=\"line\">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span><br><span class=\"line\">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span><br><span class=\"line\">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;javaModelGenerator targetPackage=&quot;com._520it.mybatis.domain&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class=\"line\">        &lt;!--  for MyBatis3/MyBatis3Simple</span><br><span class=\"line\">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- for MyBatis3 / MyBatis3Simple</span><br><span class=\"line\">            是否创建一个不可变的类，如果为true，</span><br><span class=\"line\">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置一个根对象，</span><br><span class=\"line\">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span><br><span class=\"line\">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span><br><span class=\"line\">                1，属性名相同，类型相同，有相同的getter/setter方法；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;rootClass&quot; value=&quot;com._520it.mybatis.domain.BaseDomain&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;/javaModelGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 生成SQL map的XML文件生成器，</span><br><span class=\"line\">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span><br><span class=\"line\">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span><br><span class=\"line\">        targetPackage/targetProject:同javaModelGenerator</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;sqlMapGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;/sqlMapGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span><br><span class=\"line\">        targetPackage/targetProject:同javaModelGenerator</span><br><span class=\"line\">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span><br><span class=\"line\">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span><br><span class=\"line\">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span><br><span class=\"line\">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span><br><span class=\"line\">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;javaClientGenerator targetPackage=&quot;com._520it.mybatis.mapper&quot; type=&quot;ANNOTATEDMAPPER&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span><br><span class=\"line\">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">    &lt;/javaClientGenerator&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span><br><span class=\"line\">        选择的table会生成一下文件：</span><br><span class=\"line\">        1，SQL map文件</span><br><span class=\"line\">        2，生成一个主键类；</span><br><span class=\"line\">        3，除了BLOB和主键的其他字段的类；</span><br><span class=\"line\">        4，包含BLOB的类；</span><br><span class=\"line\">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span><br><span class=\"line\">        6，Mapper接口（可选）</span><br><span class=\"line\"></span><br><span class=\"line\">        tableName（必要）：要生成对象的表名；</span><br><span class=\"line\">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span><br><span class=\"line\">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span><br><span class=\"line\">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span><br><span class=\"line\">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span><br><span class=\"line\">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span><br><span class=\"line\">            4，否则，使用指定的大小写格式查询；</span><br><span class=\"line\">        另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span><br><span class=\"line\">        这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式；</span><br><span class=\"line\"></span><br><span class=\"line\">        可选：</span><br><span class=\"line\">        1，schema：数据库的schema；</span><br><span class=\"line\">        2，catalog：数据库的catalog；</span><br><span class=\"line\">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span><br><span class=\"line\">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span><br><span class=\"line\">        5，enableInsert（默认true）：指定是否生成insert语句；</span><br><span class=\"line\">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span><br><span class=\"line\">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span><br><span class=\"line\">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span><br><span class=\"line\">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span><br><span class=\"line\">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span><br><span class=\"line\">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span><br><span class=\"line\">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span><br><span class=\"line\">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span><br><span class=\"line\">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span><br><span class=\"line\">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span><br><span class=\"line\"></span><br><span class=\"line\">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span><br><span class=\"line\">     --&gt;</span><br><span class=\"line\">    &lt;table tableName=&quot;userinfo&quot; &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span><br><span class=\"line\">        &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span><br><span class=\"line\">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span><br><span class=\"line\">        &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span><br><span class=\"line\">        &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span><br><span class=\"line\">        &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span><br><span class=\"line\">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username asc&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- generatedKey用于生成生成主键的方法，</span><br><span class=\"line\">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span><br><span class=\"line\">            column:主键的列名；</span><br><span class=\"line\">            sqlStatement：要生成的selectKey语句，有以下可选项：</span><br><span class=\"line\">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span><br><span class=\"line\">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span><br><span class=\"line\">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span><br><span class=\"line\">                Informix  :相当于selectKey的SQL为：select dbinfo(&apos;sqlca.sqlerrd1&apos;) from systables where tabid=1</span><br><span class=\"line\">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span><br><span class=\"line\">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span><br><span class=\"line\">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span><br><span class=\"line\">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性</span><br><span class=\"line\">        &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- </span><br><span class=\"line\">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span><br><span class=\"line\">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span><br><span class=\"line\">            那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span><br><span class=\"line\">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span><br><span class=\"line\"></span><br><span class=\"line\">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span><br><span class=\"line\">            如果使用了columnOverride元素，该属性无效；</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span><br><span class=\"line\">             column:要重新设置的列名；</span><br><span class=\"line\">             注意，一个table元素中可以有多个columnOverride元素哈~</span><br><span class=\"line\">          --&gt;</span><br><span class=\"line\">         &lt;columnOverride column=&quot;username&quot;&gt;</span><br><span class=\"line\">             &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span><br><span class=\"line\">             &lt;property name=&quot;property&quot; value=&quot;userName&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span><br><span class=\"line\">             &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- jdbcType用于指定该列的JDBC类型 </span><br><span class=\"line\">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span><br><span class=\"line\">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span><br><span class=\"line\">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span><br><span class=\"line\">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">             --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span><br><span class=\"line\">             &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">              --&gt;</span><br><span class=\"line\">         &lt;/columnOverride&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span><br><span class=\"line\">             column:指定要忽略的列的名字；</span><br><span class=\"line\">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span><br><span class=\"line\"></span><br><span class=\"line\">             注意，一个table元素中可以有多个ignoreColumn元素</span><br><span class=\"line\">         &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt;</span><br><span class=\"line\">         --&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/context&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Eclipse上GIT插件EGIT使用手册","date":"2017-07-13T08:21:00.000Z","_content":"\n安装EGIT插件\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_828.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_954.gif)\n\n[http://download.eclipse.org/egit/updates/](http://download.eclipse.org/egit/updates/)\n\n或者使用Eclipse Marketplace，搜索EGit\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_929.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_238.gif)\n\n### 二_使用EGIT前的配置\n\n<a name=\"_Toc315382081\" style=\"color:#336699;text-decoration:underline;font-family:Arial;line-height:26px;\"></a>\n\n配置个人信息，最重要的是user.name和user.email\n\nl  Preferences > Team > Git > Configuration\n\nl  New Entry\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_479.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_503.gif)\n\n### 三_新建GIT仓库\n\n新建NC module project\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150921_350.gif)\n\nl  File > Team > Share Project 选择GIT\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150921_322.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_449.gif)\n\n创建仓库后，在$workspace\\demo目录下的.git文件夹，就是git的仓库地址。和CVS、SVN不同，GIT不会在每一个目录下建立版本控制文件夹，仅在根目录下建立仓库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_761.gif)\n\n同时，eclipse中的project也建立git版本控制，此时未创建分支，处于NO-HEAD状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_101.gif)\n\n文件夹中的符号”?”表示此文件夹处于untracked状态，这样就成功创建GIT仓库。\n\n\n### 四_配置.gitignore\n\n此时我们尝试做一次提交\n\nl  Team -> Commit…\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_31.gif)\n\n如上图所示，Author和Committer会默认为Git配置的用户信息。下面的Files窗口中可以看到此次提交的文件，其中有非常多带有NC_HOME的文件，此时可以猜测出，在我们的project中链接的NC_HOME也被GIT默认到版本控制中了，如下图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_748.gif)\n\n显然NC_HOME和out是不需要进行版本控制的，我们可以通过配置.gitignore来排除这两个文件夹\n\n打开Navigator窗口，在project根目录中添加.gitignore文件，将需要排除控制的目录写入.gitignore文件中\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_948.gif)\n\n再次尝试commit，需要提交的文件已经被过滤\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_440.gif)\n\n首次提交后，会自动生成master分支\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_921.gif)\n\n然后在public中新建一个文件，可以看到图标依然是问号，处于untracked状态，即git没有对此文件进行监控\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_243.gif)\n\n通过Team -> Add to index可以将文件加入git索引，进行版本监控\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_728.gif)\n\n可以看到图标显示也有了变化（EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作）\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_422.gif)\n\n也可以通过Team -> Untrack将文件从索引控制中排除。\n\n将此次新增的文件commit到仓库中，文件将处于unmodified状态，或者说，这就是一种staged状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_598.gif)\n\n然后修改文件的内容，文件将处于modified状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_746.gif)\n\n### 五_查看历史记录\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">Team -> Show in history可以查看版本历史提交记录</span>\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_350.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150927_97.gif \"点击查看原始大小图片\")\n\n可以选择对比模式\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150927_216.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150928_348.gif)\n\n### 六_远程GIT仓库\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">此 小结的前提是已经搭建GIT服务器，并通过SSH协议连接，可参看文档《RHEL下搭建GIT服务器》《WindowsXP下搭建GIT服务器》《GIT 服务器使用基础》。本文使用RHEL5.5系统下的GIT-2012-01-11，用户root/password，GIT仓库统一存放在/app /gitspace目录下。</span>\n\n首先通过shell工具连接到服务器，建立空仓库gitdemo，此时的ssh访问地址如下,分别由协议名称、用户名、IP、端口、git仓库目录组成。\n\nssh://root@192.168.1.101:22/app/gitspace/gitdemo\n\n打开GIT资源库窗口，选择克隆资源库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150928_486.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150929_452.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150929_538.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150930_822.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150931_30.gif)\n\n现在已经把远程的GIT仓库克隆到本地，接下来需要将仓库检出为NC模块项目。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_652.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_503.gif)\n\n最后得到gitdemo模块项目，分支是mirror\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_873.gif)\n\n### 七_推送远程仓库\n\n克隆服务器端仓库后，会在本地建立一个一样的仓库，称本地仓库。在本地进行commit操作将把更新提交到本地仓库，然后可以将服务器端的更新pull到本地仓库进行合并，最后将合并好的本地仓库push到服务器端，这样就进行了一次远程提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150933_729.gif)\n\n先提交一次到本地仓库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150934_243.gif)\n\n然后push到服务器端的mirror分支，Team -> remote -> Push\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150934_504.gif)\n\n完成推送后，可以在服务器端mirror镜像的log中查看到此次记录\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150935_650.gif)\n\n### 八_解决推送冲突\n\n多人协作开发的情况下，往服务器推送更新时难免出现冲突，所以推送之前需要解决服务器端的最新版本和本地仓库的冲突。Pull操作就是把服务器端的更新拉拢到本地仓库进行合并，解决好合并冲突后，就可以顺利push到服务器分支了。\n\n假设现在Mairo兄弟在用GIT协作开发NewSuperMairoBro游戏，目前服务器端的mushroom.java文件的内容如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150935_999.gif)\n\nMairoBro克隆出代码后，Mairo哥哥做了如下修改\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150936_685.gif)\n\nMairo弟弟做了如下修改\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150936_554.gif)\n\n然后Mairo弟弟先push代码，Mairo哥哥使用pull来合并本地仓库和远程仓库，将发行文件出现冲突，此时GIT会自动合并冲突的文件，如下图所示：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150937_374.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150937_761.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150938_25.gif)\n\n很明显自动合并的冲突文件不能直接使用，我们可以手动调整，右键发生冲突的文件，选择Team -> Merge Tool\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150939_41.gif)\n\n第一项是将GIT自动合并过的文件和服务器端文件进行对比\n\n第二项是用本地最新版本的文件和服务器端文件进行对比，建议用此项\n\n接下来就是熟悉的对比界面\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150939_428.gif)\n\nMairo哥哥将冲突文件修改如下\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150940_565.gif)\n\n然后右键点击此冲突文件，选择Team -> Add to index再次将文件加入索引控制，此时文件已经不是冲突状态，并且可以进行提交并push到服务器端\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150941_256.gif)\n\n解决合并冲突后，Mairo弟弟只需要将服务器中合并后的版本pull到本地，就完成了一次协作开发的代码合并。从历史记录中可以看到，从mushroom开始历史进入分支，先是mushroomA的记录，然后是mushroomB的记录，最后历史分支合并。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150941_83.gif)\n\n### 九_Rebase和Merge的区别\n\nRebase和Merge操作最终的结果是一样的，但是实现原理不一样。\n\n从上面的MairoBro例子可以知道pull大概对历史记录进行了怎样的合并操作，其实默认pull的操作就是一个分支的merge操作，如下图重现一下：\n\nMairo弟弟的提交记录如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150942_300.gif)\n\nMairo哥哥的提交记录如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_94.gif)\n\n首先是Mairo弟弟把更新push到服务器，这样服务器端的记录就和Mairo弟弟本地的记录是一样的，接着Mairo哥哥执行pull操作，现在分析下pull是如何操作的。\n\nl  pull默认就是先把服务器端的最新记录更新到本地的Remote Tracking中对应的mirror分支\n\nl  接着对Local的mirror分支和Remote Tracking的mirror分支进行merge操作\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_24.gif)\n\nMerge操作后的结果就是会新增加一个merge记录节点，如下所示：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_894.gif)\n\n从上图可以看出，mushroomA是在mushroomB之前的，这个时间关系不取决于谁先执行push，而取决于本地仓库中谁先执行commit。所以merge会按照时间顺序严格的记录每一次commit。\n\n接下来看看rebase，其实rebase也是把两个分支进行合并的操作，当Mairo弟弟push更新后，服务器端的mirror分支的历史如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150944_289.gif)\n\nMairo哥哥本地的历史如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150945_104.gif)\n\n现在Mairo哥哥不是执行merge操作，而是执行rebase操作，最后结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150945_319.gif)\n\n很明显的区别是没有出现分支的记录，而且注意到mushroomA*，请注意这个记录和mushroomA不是同一个记录，我们先分析下rebase操作下，Mairo哥哥的历史记录都做了哪些变化：\n\nl  先将当前分支的更新部分保存到临时区域，而当前分支重置到上一次pull的记录\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150946_936.gif)\n\nl  然后将服务器端的更新添加到当前分支，此时当前分支和服务器端分支是一样的\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150946_102.gif)\n\nl  最后将原分支的更新部分mushroomA提交到当前分支的后面，就是要在mushroomB的后面添加mushroomA的更新，当然此时更新记录已经不是之前的mushroomA了，如果出现冲突则使用对比工具解决冲突，最后记录变成mushroomA*。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150948_358.gif)\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">如 果Mairo哥哥提交过mushroomA1、mushroomA2、mushroomA3，那么执行rebase后会对mushroomA1、 mushroomA2、mushroomA3分别顺序执行上图所示的合并，最后记录为mushroomA1*、mushroomA2*、 mushroomA3*。很显然rebase操作更复杂，冲突的概率也更高，并且不是按照时间顺序记录。</span>\n\n### 十_Rebase和Merge如何选择的简单解析\n\n此小结为什么说是简单解析呢，因为rebase和merge的选择问题讨论比较激烈，笔者也没有一个定论，而且git也处于研究发展阶段，很多理论还没有完全的纯熟。\n\n对于一个多人开发团队频繁提交更新的情况，如果使用merge会使得历史线图非常复杂，并且merge一次就会新增一个记录点，如果使用rebase就是完全的线性开发。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150949_351.gif)\n\n上图所示是Merge和Rebase的两个结果，显然你不想要merge的混乱结果吧，你能告诉我merge图中那条线是master分支吗？\n\n所以给出如下建议，如果同一文件反复修改或提交次数比较多，预期会出现很多的conflict，那么可以使用merge合并，仅需要解决一次冲突即可（不 过，大范围主题式的修改，是不是应该事先就新开一个分支呢？）；如果修改范围小，预期conflict少，则建议使用rebase。\n\nEGIT中默认的pull操作是Fetch+Merge，如果要用rebase，可以分开操作。先执行Fetch更新remote tracking，再执行rebase进行合并（下一小节将介绍rebase操作）。或者修改pull的默认操作，在.git/config文件中配置：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150950_893.gif)\n\n上述配置只对mirror分支有效，也可做全局配置，在$HOME/.gitconfig中配置，windows系统如果没有配置HOME变量的话就默认在$documents and settings/ USER目录下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150950_155.gif)\n\n### 十一_Fetch和Rebase\n\nMairoBro来做fetch和rebase的测试，首先Mairo弟弟在client中添加文件OPQ分别提交，并push到服务器，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150951_869.gif)![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150952_988.gif)\n\n此时服务器端的历史已经被更新，但是Mairo哥哥的remote tracking中mirror分支并没有更新到最新的记录，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150953_677.gif)\n\n所以需要更新remote tracking中的分支，使得它与服务器端的分支同步，右键点击资源库选择Fetch\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150954_184.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150954_15.gif)\n\n这样就更新了本地的remote tracking中的分支，使得它和服务器端分支同步。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150955_499.gif)\n\n然后Mairo哥哥在本地的private中添加文件ABC，并分别提交到本地仓库中。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_318.gif)![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_153.gif)\n\n然后将本地mirror分支和remote tracking中的mirror分支进行rebase，先checkout本地mirror分支 ，然后右键点击选择Rebase\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_815.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150957_357.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150957_879.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_872.gif)\n\n如上图可以看到历史记录的顺序是OPQABC，已经rebase成功，接着push到服务器即可。\n\n### 十二_重置功能\n\nGIT中有三种重置功能，分别是soft、mixed、hard，区别如下：\n\nl  **Soft - **当前分支重置到指定commit记录位置，索引和工作树不变；\n\nl  **Mixed - **当前分支重置到指定commit记录位置，索引被更新，工作树不变；\n\nl  **Hard - **当前分支重置到指定commit记录位置，索引和工作树都更新。\n\n貌似不好理解，首先要理解GIT的三个区域（工作树、索引区、仓库），可以参考文档《GIT简介》。\n\n先做soft的测试，新建Soft.java文件，可以看到此文件未添加到索引控制\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_662.gif)\n\n先进行一次提交，提交后在History窗口中重置此次提交，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_719.gif)\n\n重置后查看工作树，如图\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_311.gif)\n\n从上图可以看出，soft文件还存在，说明重置没有改变工作树，而且soft文件不是“问号”图标，说明已经添加到索引，说明索引也没有变。唯一重置的是历史记录。\n\n然后新建Mixed.java文件，此时Mixed.java也没有添加到索引控制，然后提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_537.gif)\n\n在History窗口中重置\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_679.gif)\n\n重置后查看工作树结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_42.gif)\n\n从上图可以看出，Mixed.java文件还存在，说明工作树没有改变，但是文件状态是untracked，说明索引被更新，此时文件没有添加索引控制。\n\n最后来看hard重置，新建Hard.java文件，此时文件没有添加索引，然后提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151000_90.gif)\n\n在History界面重置此次提交，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151000_133.gif)\n\n重置后再查看工作树，结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151001_716.gif)\n\n\n本文转自[http://blog.csdn.net/luckarecs/article/details/7427605](http://blog.csdn.net/luckarecs/article/details/7427605)\n\n\n\n","source":"_posts/git-EGIT插件.md","raw":"---\ntitle: Eclipse上GIT插件EGIT使用手册\ndate: 2017-07-13 16:21:00\ntags: EGIT\ncategories: git\n---\n\n安装EGIT插件\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_828.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_954.gif)\n\n[http://download.eclipse.org/egit/updates/](http://download.eclipse.org/egit/updates/)\n\n或者使用Eclipse Marketplace，搜索EGit\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150918_929.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_238.gif)\n\n### 二_使用EGIT前的配置\n\n<a name=\"_Toc315382081\" style=\"color:#336699;text-decoration:underline;font-family:Arial;line-height:26px;\"></a>\n\n配置个人信息，最重要的是user.name和user.email\n\nl  Preferences > Team > Git > Configuration\n\nl  New Entry\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_479.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150919_503.gif)\n\n### 三_新建GIT仓库\n\n新建NC module project\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150921_350.gif)\n\nl  File > Team > Share Project 选择GIT\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150921_322.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_449.gif)\n\n创建仓库后，在$workspace\\demo目录下的.git文件夹，就是git的仓库地址。和CVS、SVN不同，GIT不会在每一个目录下建立版本控制文件夹，仅在根目录下建立仓库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_761.gif)\n\n同时，eclipse中的project也建立git版本控制，此时未创建分支，处于NO-HEAD状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_101.gif)\n\n文件夹中的符号”?”表示此文件夹处于untracked状态，这样就成功创建GIT仓库。\n\n\n### 四_配置.gitignore\n\n此时我们尝试做一次提交\n\nl  Team -> Commit…\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150922_31.gif)\n\n如上图所示，Author和Committer会默认为Git配置的用户信息。下面的Files窗口中可以看到此次提交的文件，其中有非常多带有NC_HOME的文件，此时可以猜测出，在我们的project中链接的NC_HOME也被GIT默认到版本控制中了，如下图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_748.gif)\n\n显然NC_HOME和out是不需要进行版本控制的，我们可以通过配置.gitignore来排除这两个文件夹\n\n打开Navigator窗口，在project根目录中添加.gitignore文件，将需要排除控制的目录写入.gitignore文件中\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_948.gif)\n\n再次尝试commit，需要提交的文件已经被过滤\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150923_440.gif)\n\n首次提交后，会自动生成master分支\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_921.gif)\n\n然后在public中新建一个文件，可以看到图标依然是问号，处于untracked状态，即git没有对此文件进行监控\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_243.gif)\n\n通过Team -> Add to index可以将文件加入git索引，进行版本监控\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150924_728.gif)\n\n可以看到图标显示也有了变化（EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作）\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_422.gif)\n\n也可以通过Team -> Untrack将文件从索引控制中排除。\n\n将此次新增的文件commit到仓库中，文件将处于unmodified状态，或者说，这就是一种staged状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_598.gif)\n\n然后修改文件的内容，文件将处于modified状态\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_746.gif)\n\n### 五_查看历史记录\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">Team -> Show in history可以查看版本历史提交记录</span>\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150925_350.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150927_97.gif \"点击查看原始大小图片\")\n\n可以选择对比模式\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150927_216.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150928_348.gif)\n\n### 六_远程GIT仓库\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">此 小结的前提是已经搭建GIT服务器，并通过SSH协议连接，可参看文档《RHEL下搭建GIT服务器》《WindowsXP下搭建GIT服务器》《GIT 服务器使用基础》。本文使用RHEL5.5系统下的GIT-2012-01-11，用户root/password，GIT仓库统一存放在/app /gitspace目录下。</span>\n\n首先通过shell工具连接到服务器，建立空仓库gitdemo，此时的ssh访问地址如下,分别由协议名称、用户名、IP、端口、git仓库目录组成。\n\nssh://root@192.168.1.101:22/app/gitspace/gitdemo\n\n打开GIT资源库窗口，选择克隆资源库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150928_486.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150929_452.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150929_538.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150930_822.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150931_30.gif)\n\n现在已经把远程的GIT仓库克隆到本地，接下来需要将仓库检出为NC模块项目。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_652.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_503.gif)\n\n最后得到gitdemo模块项目，分支是mirror\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150932_873.gif)\n\n### 七_推送远程仓库\n\n克隆服务器端仓库后，会在本地建立一个一样的仓库，称本地仓库。在本地进行commit操作将把更新提交到本地仓库，然后可以将服务器端的更新pull到本地仓库进行合并，最后将合并好的本地仓库push到服务器端，这样就进行了一次远程提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150933_729.gif)\n\n先提交一次到本地仓库\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150934_243.gif)\n\n然后push到服务器端的mirror分支，Team -> remote -> Push\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150934_504.gif)\n\n完成推送后，可以在服务器端mirror镜像的log中查看到此次记录\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150935_650.gif)\n\n### 八_解决推送冲突\n\n多人协作开发的情况下，往服务器推送更新时难免出现冲突，所以推送之前需要解决服务器端的最新版本和本地仓库的冲突。Pull操作就是把服务器端的更新拉拢到本地仓库进行合并，解决好合并冲突后，就可以顺利push到服务器分支了。\n\n假设现在Mairo兄弟在用GIT协作开发NewSuperMairoBro游戏，目前服务器端的mushroom.java文件的内容如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150935_999.gif)\n\nMairoBro克隆出代码后，Mairo哥哥做了如下修改\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150936_685.gif)\n\nMairo弟弟做了如下修改\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150936_554.gif)\n\n然后Mairo弟弟先push代码，Mairo哥哥使用pull来合并本地仓库和远程仓库，将发行文件出现冲突，此时GIT会自动合并冲突的文件，如下图所示：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150937_374.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150937_761.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150938_25.gif)\n\n很明显自动合并的冲突文件不能直接使用，我们可以手动调整，右键发生冲突的文件，选择Team -> Merge Tool\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150939_41.gif)\n\n第一项是将GIT自动合并过的文件和服务器端文件进行对比\n\n第二项是用本地最新版本的文件和服务器端文件进行对比，建议用此项\n\n接下来就是熟悉的对比界面\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150939_428.gif)\n\nMairo哥哥将冲突文件修改如下\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150940_565.gif)\n\n然后右键点击此冲突文件，选择Team -> Add to index再次将文件加入索引控制，此时文件已经不是冲突状态，并且可以进行提交并push到服务器端\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150941_256.gif)\n\n解决合并冲突后，Mairo弟弟只需要将服务器中合并后的版本pull到本地，就完成了一次协作开发的代码合并。从历史记录中可以看到，从mushroom开始历史进入分支，先是mushroomA的记录，然后是mushroomB的记录，最后历史分支合并。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150941_83.gif)\n\n### 九_Rebase和Merge的区别\n\nRebase和Merge操作最终的结果是一样的，但是实现原理不一样。\n\n从上面的MairoBro例子可以知道pull大概对历史记录进行了怎样的合并操作，其实默认pull的操作就是一个分支的merge操作，如下图重现一下：\n\nMairo弟弟的提交记录如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150942_300.gif)\n\nMairo哥哥的提交记录如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_94.gif)\n\n首先是Mairo弟弟把更新push到服务器，这样服务器端的记录就和Mairo弟弟本地的记录是一样的，接着Mairo哥哥执行pull操作，现在分析下pull是如何操作的。\n\nl  pull默认就是先把服务器端的最新记录更新到本地的Remote Tracking中对应的mirror分支\n\nl  接着对Local的mirror分支和Remote Tracking的mirror分支进行merge操作\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_24.gif)\n\nMerge操作后的结果就是会新增加一个merge记录节点，如下所示：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150943_894.gif)\n\n从上图可以看出，mushroomA是在mushroomB之前的，这个时间关系不取决于谁先执行push，而取决于本地仓库中谁先执行commit。所以merge会按照时间顺序严格的记录每一次commit。\n\n接下来看看rebase，其实rebase也是把两个分支进行合并的操作，当Mairo弟弟push更新后，服务器端的mirror分支的历史如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150944_289.gif)\n\nMairo哥哥本地的历史如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150945_104.gif)\n\n现在Mairo哥哥不是执行merge操作，而是执行rebase操作，最后结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150945_319.gif)\n\n很明显的区别是没有出现分支的记录，而且注意到mushroomA*，请注意这个记录和mushroomA不是同一个记录，我们先分析下rebase操作下，Mairo哥哥的历史记录都做了哪些变化：\n\nl  先将当前分支的更新部分保存到临时区域，而当前分支重置到上一次pull的记录\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150946_936.gif)\n\nl  然后将服务器端的更新添加到当前分支，此时当前分支和服务器端分支是一样的\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150946_102.gif)\n\nl  最后将原分支的更新部分mushroomA提交到当前分支的后面，就是要在mushroomB的后面添加mushroomA的更新，当然此时更新记录已经不是之前的mushroomA了，如果出现冲突则使用对比工具解决冲突，最后记录变成mushroomA*。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150948_358.gif)\n\n<span style=\"color:#333333;font-family:Arial;line-height:26px;\">如 果Mairo哥哥提交过mushroomA1、mushroomA2、mushroomA3，那么执行rebase后会对mushroomA1、 mushroomA2、mushroomA3分别顺序执行上图所示的合并，最后记录为mushroomA1*、mushroomA2*、 mushroomA3*。很显然rebase操作更复杂，冲突的概率也更高，并且不是按照时间顺序记录。</span>\n\n### 十_Rebase和Merge如何选择的简单解析\n\n此小结为什么说是简单解析呢，因为rebase和merge的选择问题讨论比较激烈，笔者也没有一个定论，而且git也处于研究发展阶段，很多理论还没有完全的纯熟。\n\n对于一个多人开发团队频繁提交更新的情况，如果使用merge会使得历史线图非常复杂，并且merge一次就会新增一个记录点，如果使用rebase就是完全的线性开发。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150949_351.gif)\n\n上图所示是Merge和Rebase的两个结果，显然你不想要merge的混乱结果吧，你能告诉我merge图中那条线是master分支吗？\n\n所以给出如下建议，如果同一文件反复修改或提交次数比较多，预期会出现很多的conflict，那么可以使用merge合并，仅需要解决一次冲突即可（不 过，大范围主题式的修改，是不是应该事先就新开一个分支呢？）；如果修改范围小，预期conflict少，则建议使用rebase。\n\nEGIT中默认的pull操作是Fetch+Merge，如果要用rebase，可以分开操作。先执行Fetch更新remote tracking，再执行rebase进行合并（下一小节将介绍rebase操作）。或者修改pull的默认操作，在.git/config文件中配置：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150950_893.gif)\n\n上述配置只对mirror分支有效，也可做全局配置，在$HOME/.gitconfig中配置，windows系统如果没有配置HOME变量的话就默认在$documents and settings/ USER目录下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150950_155.gif)\n\n### 十一_Fetch和Rebase\n\nMairoBro来做fetch和rebase的测试，首先Mairo弟弟在client中添加文件OPQ分别提交，并push到服务器，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150951_869.gif)![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150952_988.gif)\n\n此时服务器端的历史已经被更新，但是Mairo哥哥的remote tracking中mirror分支并没有更新到最新的记录，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150953_677.gif)\n\n所以需要更新remote tracking中的分支，使得它与服务器端的分支同步，右键点击资源库选择Fetch\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150954_184.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150954_15.gif)\n\n这样就更新了本地的remote tracking中的分支，使得它和服务器端分支同步。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150955_499.gif)\n\n然后Mairo哥哥在本地的private中添加文件ABC，并分别提交到本地仓库中。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_318.gif)![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_153.gif)\n\n然后将本地mirror分支和remote tracking中的mirror分支进行rebase，先checkout本地mirror分支 ，然后右键点击选择Rebase\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150956_815.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150957_357.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150957_879.gif)\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_872.gif)\n\n如上图可以看到历史记录的顺序是OPQABC，已经rebase成功，接着push到服务器即可。\n\n### 十二_重置功能\n\nGIT中有三种重置功能，分别是soft、mixed、hard，区别如下：\n\nl  **Soft - **当前分支重置到指定commit记录位置，索引和工作树不变；\n\nl  **Mixed - **当前分支重置到指定commit记录位置，索引被更新，工作树不变；\n\nl  **Hard - **当前分支重置到指定commit记录位置，索引和工作树都更新。\n\n貌似不好理解，首先要理解GIT的三个区域（工作树、索引区、仓库），可以参考文档《GIT简介》。\n\n先做soft的测试，新建Soft.java文件，可以看到此文件未添加到索引控制\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_662.gif)\n\n先进行一次提交，提交后在History窗口中重置此次提交，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_719.gif)\n\n重置后查看工作树，如图\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150958_311.gif)\n\n从上图可以看出，soft文件还存在，说明重置没有改变工作树，而且soft文件不是“问号”图标，说明已经添加到索引，说明索引也没有变。唯一重置的是历史记录。\n\n然后新建Mixed.java文件，此时Mixed.java也没有添加到索引控制，然后提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_537.gif)\n\n在History窗口中重置\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_679.gif)\n\n重置后查看工作树结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725150959_42.gif)\n\n从上图可以看出，Mixed.java文件还存在，说明工作树没有改变，但是文件状态是untracked，说明索引被更新，此时文件没有添加索引控制。\n\n最后来看hard重置，新建Hard.java文件，此时文件没有添加索引，然后提交。\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151000_90.gif)\n\n在History界面重置此次提交，如图：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151000_133.gif)\n\n重置后再查看工作树，结果如下：\n\n![ Eclipse上GIT插件EGIT使用手册 ](http://static.open-open.com/lib/uploadImg/20140725/20140725151001_716.gif)\n\n\n本文转自[http://blog.csdn.net/luckarecs/article/details/7427605](http://blog.csdn.net/luckarecs/article/details/7427605)\n\n\n\n","slug":"git-EGIT插件","published":1,"updated":"2018-10-17T05:48:51.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr6d003kk4nz34yljnws","content":"<p>安装EGIT插件</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_828.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_954.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><a href=\"http://download.eclipse.org/egit/updates/\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/egit/updates/</a></p>\n<p>或者使用Eclipse Marketplace，搜索EGit</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_929.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_238.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"二-使用EGIT前的配置\"><a href=\"#二-使用EGIT前的配置\" class=\"headerlink\" title=\"二_使用EGIT前的配置\"></a>二_使用EGIT前的配置</h3><p><a name=\"_Toc315382081\" style=\"color:#336699;text-decoration:underline;font-family:Arial;line-height:26px;\"></a></p>\n<p>配置个人信息，最重要的是user.name和user.email</p>\n<p>l  Preferences &gt; Team &gt; Git &gt; Configuration</p>\n<p>l  New Entry</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_479.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_503.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"三-新建GIT仓库\"><a href=\"#三-新建GIT仓库\" class=\"headerlink\" title=\"三_新建GIT仓库\"></a>三_新建GIT仓库</h3><p>新建NC module project</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150921_350.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  File &gt; Team &gt; Share Project 选择GIT</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150921_322.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_449.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>创建仓库后，在$workspace\\demo目录下的.git文件夹，就是git的仓库地址。和CVS、SVN不同，GIT不会在每一个目录下建立版本控制文件夹，仅在根目录下建立仓库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_761.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>同时，eclipse中的project也建立git版本控制，此时未创建分支，处于NO-HEAD状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_101.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>文件夹中的符号”?”表示此文件夹处于untracked状态，这样就成功创建GIT仓库。</p>\n<h3 id=\"四-配置-gitignore\"><a href=\"#四-配置-gitignore\" class=\"headerlink\" title=\"四_配置.gitignore\"></a>四_配置.gitignore</h3><p>此时我们尝试做一次提交</p>\n<p>l  Team -&gt; Commit…</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_31.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>如上图所示，Author和Committer会默认为Git配置的用户信息。下面的Files窗口中可以看到此次提交的文件，其中有非常多带有NC_HOME的文件，此时可以猜测出，在我们的project中链接的NC_HOME也被GIT默认到版本控制中了，如下图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_748.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>显然NC_HOME和out是不需要进行版本控制的，我们可以通过配置.gitignore来排除这两个文件夹</p>\n<p>打开Navigator窗口，在project根目录中添加.gitignore文件，将需要排除控制的目录写入.gitignore文件中</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_948.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>再次尝试commit，需要提交的文件已经被过滤</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_440.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>首次提交后，会自动生成master分支</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_921.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后在public中新建一个文件，可以看到图标依然是问号，处于untracked状态，即git没有对此文件进行监控</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_243.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>通过Team -&gt; Add to index可以将文件加入git索引，进行版本监控</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_728.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>可以看到图标显示也有了变化（EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作）</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_422.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>也可以通过Team -&gt; Untrack将文件从索引控制中排除。</p>\n<p>将此次新增的文件commit到仓库中，文件将处于unmodified状态，或者说，这就是一种staged状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_598.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后修改文件的内容，文件将处于modified状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_746.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"五-查看历史记录\"><a href=\"#五-查看历史记录\" class=\"headerlink\" title=\"五_查看历史记录\"></a>五_查看历史记录</h3><p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">Team -&gt; Show in history可以查看版本历史提交记录</span></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_350.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150927_97.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \" title=\"点击查看原始大小图片\"></p>\n<p>可以选择对比模式</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150927_216.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150928_348.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"六-远程GIT仓库\"><a href=\"#六-远程GIT仓库\" class=\"headerlink\" title=\"六_远程GIT仓库\"></a>六_远程GIT仓库</h3><p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">此 小结的前提是已经搭建GIT服务器，并通过SSH协议连接，可参看文档《RHEL下搭建GIT服务器》《WindowsXP下搭建GIT服务器》《GIT 服务器使用基础》。本文使用RHEL5.5系统下的GIT-2012-01-11，用户root/password，GIT仓库统一存放在/app /gitspace目录下。</span></p>\n<p>首先通过shell工具连接到服务器，建立空仓库gitdemo，此时的ssh访问地址如下,分别由协议名称、用户名、IP、端口、git仓库目录组成。</p>\n<p>ssh:<a href=\"mailto://root@192.168.1.101\" target=\"_blank\" rel=\"noopener\">//root@192.168.1.101</a>:22/app/gitspace/gitdemo</p>\n<p>打开GIT资源库窗口，选择克隆资源库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150928_486.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150929_452.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150929_538.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150930_822.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150931_30.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>现在已经把远程的GIT仓库克隆到本地，接下来需要将仓库检出为NC模块项目。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_652.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_503.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>最后得到gitdemo模块项目，分支是mirror</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_873.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"七-推送远程仓库\"><a href=\"#七-推送远程仓库\" class=\"headerlink\" title=\"七_推送远程仓库\"></a>七_推送远程仓库</h3><p>克隆服务器端仓库后，会在本地建立一个一样的仓库，称本地仓库。在本地进行commit操作将把更新提交到本地仓库，然后可以将服务器端的更新pull到本地仓库进行合并，最后将合并好的本地仓库push到服务器端，这样就进行了一次远程提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150933_729.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>先提交一次到本地仓库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150934_243.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后push到服务器端的mirror分支，Team -&gt; remote -&gt; Push</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150934_504.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>完成推送后，可以在服务器端mirror镜像的log中查看到此次记录</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150935_650.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"八-解决推送冲突\"><a href=\"#八-解决推送冲突\" class=\"headerlink\" title=\"八_解决推送冲突\"></a>八_解决推送冲突</h3><p>多人协作开发的情况下，往服务器推送更新时难免出现冲突，所以推送之前需要解决服务器端的最新版本和本地仓库的冲突。Pull操作就是把服务器端的更新拉拢到本地仓库进行合并，解决好合并冲突后，就可以顺利push到服务器分支了。</p>\n<p>假设现在Mairo兄弟在用GIT协作开发NewSuperMairoBro游戏，目前服务器端的mushroom.java文件的内容如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150935_999.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>MairoBro克隆出代码后，Mairo哥哥做了如下修改</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150936_685.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo弟弟做了如下修改</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150936_554.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后Mairo弟弟先push代码，Mairo哥哥使用pull来合并本地仓库和远程仓库，将发行文件出现冲突，此时GIT会自动合并冲突的文件，如下图所示：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150937_374.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150937_761.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150938_25.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>很明显自动合并的冲突文件不能直接使用，我们可以手动调整，右键发生冲突的文件，选择Team -&gt; Merge Tool</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150939_41.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>第一项是将GIT自动合并过的文件和服务器端文件进行对比</p>\n<p>第二项是用本地最新版本的文件和服务器端文件进行对比，建议用此项</p>\n<p>接下来就是熟悉的对比界面</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150939_428.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥将冲突文件修改如下</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150940_565.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后右键点击此冲突文件，选择Team -&gt; Add to index再次将文件加入索引控制，此时文件已经不是冲突状态，并且可以进行提交并push到服务器端</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150941_256.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>解决合并冲突后，Mairo弟弟只需要将服务器中合并后的版本pull到本地，就完成了一次协作开发的代码合并。从历史记录中可以看到，从mushroom开始历史进入分支，先是mushroomA的记录，然后是mushroomB的记录，最后历史分支合并。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150941_83.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"九-Rebase和Merge的区别\"><a href=\"#九-Rebase和Merge的区别\" class=\"headerlink\" title=\"九_Rebase和Merge的区别\"></a>九_Rebase和Merge的区别</h3><p>Rebase和Merge操作最终的结果是一样的，但是实现原理不一样。</p>\n<p>从上面的MairoBro例子可以知道pull大概对历史记录进行了怎样的合并操作，其实默认pull的操作就是一个分支的merge操作，如下图重现一下：</p>\n<p>Mairo弟弟的提交记录如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150942_300.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥的提交记录如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_94.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>首先是Mairo弟弟把更新push到服务器，这样服务器端的记录就和Mairo弟弟本地的记录是一样的，接着Mairo哥哥执行pull操作，现在分析下pull是如何操作的。</p>\n<p>l  pull默认就是先把服务器端的最新记录更新到本地的Remote Tracking中对应的mirror分支</p>\n<p>l  接着对Local的mirror分支和Remote Tracking的mirror分支进行merge操作</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_24.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Merge操作后的结果就是会新增加一个merge记录节点，如下所示：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_894.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，mushroomA是在mushroomB之前的，这个时间关系不取决于谁先执行push，而取决于本地仓库中谁先执行commit。所以merge会按照时间顺序严格的记录每一次commit。</p>\n<p>接下来看看rebase，其实rebase也是把两个分支进行合并的操作，当Mairo弟弟push更新后，服务器端的mirror分支的历史如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150944_289.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥本地的历史如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150945_104.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>现在Mairo哥哥不是执行merge操作，而是执行rebase操作，最后结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150945_319.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>很明显的区别是没有出现分支的记录，而且注意到mushroomA*，请注意这个记录和mushroomA不是同一个记录，我们先分析下rebase操作下，Mairo哥哥的历史记录都做了哪些变化：</p>\n<p>l  先将当前分支的更新部分保存到临时区域，而当前分支重置到上一次pull的记录</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150946_936.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  然后将服务器端的更新添加到当前分支，此时当前分支和服务器端分支是一样的</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150946_102.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  最后将原分支的更新部分mushroomA提交到当前分支的后面，就是要在mushroomB的后面添加mushroomA的更新，当然此时更新记录已经不是之前的mushroomA了，如果出现冲突则使用对比工具解决冲突，最后记录变成mushroomA*。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150948_358.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">如 果Mairo哥哥提交过mushroomA1、mushroomA2、mushroomA3，那么执行rebase后会对mushroomA1、 mushroomA2、mushroomA3分别顺序执行上图所示的合并，最后记录为mushroomA1<em>、mushroomA2</em>、 mushroomA3*。很显然rebase操作更复杂，冲突的概率也更高，并且不是按照时间顺序记录。</span></p>\n<h3 id=\"十-Rebase和Merge如何选择的简单解析\"><a href=\"#十-Rebase和Merge如何选择的简单解析\" class=\"headerlink\" title=\"十_Rebase和Merge如何选择的简单解析\"></a>十_Rebase和Merge如何选择的简单解析</h3><p>此小结为什么说是简单解析呢，因为rebase和merge的选择问题讨论比较激烈，笔者也没有一个定论，而且git也处于研究发展阶段，很多理论还没有完全的纯熟。</p>\n<p>对于一个多人开发团队频繁提交更新的情况，如果使用merge会使得历史线图非常复杂，并且merge一次就会新增一个记录点，如果使用rebase就是完全的线性开发。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150949_351.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>上图所示是Merge和Rebase的两个结果，显然你不想要merge的混乱结果吧，你能告诉我merge图中那条线是master分支吗？</p>\n<p>所以给出如下建议，如果同一文件反复修改或提交次数比较多，预期会出现很多的conflict，那么可以使用merge合并，仅需要解决一次冲突即可（不 过，大范围主题式的修改，是不是应该事先就新开一个分支呢？）；如果修改范围小，预期conflict少，则建议使用rebase。</p>\n<p>EGIT中默认的pull操作是Fetch+Merge，如果要用rebase，可以分开操作。先执行Fetch更新remote tracking，再执行rebase进行合并（下一小节将介绍rebase操作）。或者修改pull的默认操作，在.git/config文件中配置：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150950_893.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>上述配置只对mirror分支有效，也可做全局配置，在$HOME/.gitconfig中配置，windows系统如果没有配置HOME变量的话就默认在$documents and settings/ USER目录下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150950_155.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"十一-Fetch和Rebase\"><a href=\"#十一-Fetch和Rebase\" class=\"headerlink\" title=\"十一_Fetch和Rebase\"></a>十一_Fetch和Rebase</h3><p>MairoBro来做fetch和rebase的测试，首先Mairo弟弟在client中添加文件OPQ分别提交，并push到服务器，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150951_869.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150952_988.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>此时服务器端的历史已经被更新，但是Mairo哥哥的remote tracking中mirror分支并没有更新到最新的记录，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150953_677.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>所以需要更新remote tracking中的分支，使得它与服务器端的分支同步，右键点击资源库选择Fetch</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150954_184.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150954_15.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>这样就更新了本地的remote tracking中的分支，使得它和服务器端分支同步。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150955_499.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后Mairo哥哥在本地的private中添加文件ABC，并分别提交到本地仓库中。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_318.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_153.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后将本地mirror分支和remote tracking中的mirror分支进行rebase，先checkout本地mirror分支 ，然后右键点击选择Rebase</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_815.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150957_357.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150957_879.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_872.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>如上图可以看到历史记录的顺序是OPQABC，已经rebase成功，接着push到服务器即可。</p>\n<h3 id=\"十二-重置功能\"><a href=\"#十二-重置功能\" class=\"headerlink\" title=\"十二_重置功能\"></a>十二_重置功能</h3><p>GIT中有三种重置功能，分别是soft、mixed、hard，区别如下：</p>\n<p>l  <strong>Soft - </strong>当前分支重置到指定commit记录位置，索引和工作树不变；</p>\n<p>l  <strong>Mixed - </strong>当前分支重置到指定commit记录位置，索引被更新，工作树不变；</p>\n<p>l  <strong>Hard - </strong>当前分支重置到指定commit记录位置，索引和工作树都更新。</p>\n<p>貌似不好理解，首先要理解GIT的三个区域（工作树、索引区、仓库），可以参考文档《GIT简介》。</p>\n<p>先做soft的测试，新建Soft.java文件，可以看到此文件未添加到索引控制</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_662.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>先进行一次提交，提交后在History窗口中重置此次提交，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_719.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后查看工作树，如图</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_311.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，soft文件还存在，说明重置没有改变工作树，而且soft文件不是“问号”图标，说明已经添加到索引，说明索引也没有变。唯一重置的是历史记录。</p>\n<p>然后新建Mixed.java文件，此时Mixed.java也没有添加到索引控制，然后提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_537.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>在History窗口中重置</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_679.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后查看工作树结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_42.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，Mixed.java文件还存在，说明工作树没有改变，但是文件状态是untracked，说明索引被更新，此时文件没有添加索引控制。</p>\n<p>最后来看hard重置，新建Hard.java文件，此时文件没有添加索引，然后提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151000_90.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>在History界面重置此次提交，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151000_133.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后再查看工作树，结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151001_716.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>本文转自<a href=\"http://blog.csdn.net/luckarecs/article/details/7427605\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/luckarecs/article/details/7427605</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装EGIT插件</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_828.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_954.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><a href=\"http://download.eclipse.org/egit/updates/\" target=\"_blank\" rel=\"noopener\">http://download.eclipse.org/egit/updates/</a></p>\n<p>或者使用Eclipse Marketplace，搜索EGit</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150918_929.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_238.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"二-使用EGIT前的配置\"><a href=\"#二-使用EGIT前的配置\" class=\"headerlink\" title=\"二_使用EGIT前的配置\"></a>二_使用EGIT前的配置</h3><p><a name=\"_Toc315382081\" style=\"color:#336699;text-decoration:underline;font-family:Arial;line-height:26px;\"></a></p>\n<p>配置个人信息，最重要的是user.name和user.email</p>\n<p>l  Preferences &gt; Team &gt; Git &gt; Configuration</p>\n<p>l  New Entry</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_479.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150919_503.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"三-新建GIT仓库\"><a href=\"#三-新建GIT仓库\" class=\"headerlink\" title=\"三_新建GIT仓库\"></a>三_新建GIT仓库</h3><p>新建NC module project</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150921_350.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  File &gt; Team &gt; Share Project 选择GIT</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150921_322.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_449.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>创建仓库后，在$workspace\\demo目录下的.git文件夹，就是git的仓库地址。和CVS、SVN不同，GIT不会在每一个目录下建立版本控制文件夹，仅在根目录下建立仓库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_761.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>同时，eclipse中的project也建立git版本控制，此时未创建分支，处于NO-HEAD状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_101.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>文件夹中的符号”?”表示此文件夹处于untracked状态，这样就成功创建GIT仓库。</p>\n<h3 id=\"四-配置-gitignore\"><a href=\"#四-配置-gitignore\" class=\"headerlink\" title=\"四_配置.gitignore\"></a>四_配置.gitignore</h3><p>此时我们尝试做一次提交</p>\n<p>l  Team -&gt; Commit…</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150922_31.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>如上图所示，Author和Committer会默认为Git配置的用户信息。下面的Files窗口中可以看到此次提交的文件，其中有非常多带有NC_HOME的文件，此时可以猜测出，在我们的project中链接的NC_HOME也被GIT默认到版本控制中了，如下图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_748.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>显然NC_HOME和out是不需要进行版本控制的，我们可以通过配置.gitignore来排除这两个文件夹</p>\n<p>打开Navigator窗口，在project根目录中添加.gitignore文件，将需要排除控制的目录写入.gitignore文件中</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_948.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>再次尝试commit，需要提交的文件已经被过滤</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150923_440.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>首次提交后，会自动生成master分支</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_921.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后在public中新建一个文件，可以看到图标依然是问号，处于untracked状态，即git没有对此文件进行监控</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_243.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>通过Team -&gt; Add to index可以将文件加入git索引，进行版本监控</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150924_728.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>可以看到图标显示也有了变化（EGIT中只要Commit就可以默认将untracked的文件添加到索引再提交更新，不需要分开操作）</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_422.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>也可以通过Team -&gt; Untrack将文件从索引控制中排除。</p>\n<p>将此次新增的文件commit到仓库中，文件将处于unmodified状态，或者说，这就是一种staged状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_598.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后修改文件的内容，文件将处于modified状态</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_746.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"五-查看历史记录\"><a href=\"#五-查看历史记录\" class=\"headerlink\" title=\"五_查看历史记录\"></a>五_查看历史记录</h3><p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">Team -&gt; Show in history可以查看版本历史提交记录</span></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150925_350.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150927_97.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \" title=\"点击查看原始大小图片\"></p>\n<p>可以选择对比模式</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150927_216.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150928_348.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"六-远程GIT仓库\"><a href=\"#六-远程GIT仓库\" class=\"headerlink\" title=\"六_远程GIT仓库\"></a>六_远程GIT仓库</h3><p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">此 小结的前提是已经搭建GIT服务器，并通过SSH协议连接，可参看文档《RHEL下搭建GIT服务器》《WindowsXP下搭建GIT服务器》《GIT 服务器使用基础》。本文使用RHEL5.5系统下的GIT-2012-01-11，用户root/password，GIT仓库统一存放在/app /gitspace目录下。</span></p>\n<p>首先通过shell工具连接到服务器，建立空仓库gitdemo，此时的ssh访问地址如下,分别由协议名称、用户名、IP、端口、git仓库目录组成。</p>\n<p>ssh:<a href=\"mailto://root@192.168.1.101\" target=\"_blank\" rel=\"noopener\">//root@192.168.1.101</a>:22/app/gitspace/gitdemo</p>\n<p>打开GIT资源库窗口，选择克隆资源库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150928_486.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150929_452.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150929_538.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150930_822.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150931_30.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>现在已经把远程的GIT仓库克隆到本地，接下来需要将仓库检出为NC模块项目。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_652.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_503.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>最后得到gitdemo模块项目，分支是mirror</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150932_873.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"七-推送远程仓库\"><a href=\"#七-推送远程仓库\" class=\"headerlink\" title=\"七_推送远程仓库\"></a>七_推送远程仓库</h3><p>克隆服务器端仓库后，会在本地建立一个一样的仓库，称本地仓库。在本地进行commit操作将把更新提交到本地仓库，然后可以将服务器端的更新pull到本地仓库进行合并，最后将合并好的本地仓库push到服务器端，这样就进行了一次远程提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150933_729.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>先提交一次到本地仓库</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150934_243.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后push到服务器端的mirror分支，Team -&gt; remote -&gt; Push</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150934_504.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>完成推送后，可以在服务器端mirror镜像的log中查看到此次记录</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150935_650.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"八-解决推送冲突\"><a href=\"#八-解决推送冲突\" class=\"headerlink\" title=\"八_解决推送冲突\"></a>八_解决推送冲突</h3><p>多人协作开发的情况下，往服务器推送更新时难免出现冲突，所以推送之前需要解决服务器端的最新版本和本地仓库的冲突。Pull操作就是把服务器端的更新拉拢到本地仓库进行合并，解决好合并冲突后，就可以顺利push到服务器分支了。</p>\n<p>假设现在Mairo兄弟在用GIT协作开发NewSuperMairoBro游戏，目前服务器端的mushroom.java文件的内容如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150935_999.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>MairoBro克隆出代码后，Mairo哥哥做了如下修改</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150936_685.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo弟弟做了如下修改</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150936_554.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后Mairo弟弟先push代码，Mairo哥哥使用pull来合并本地仓库和远程仓库，将发行文件出现冲突，此时GIT会自动合并冲突的文件，如下图所示：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150937_374.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150937_761.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150938_25.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>很明显自动合并的冲突文件不能直接使用，我们可以手动调整，右键发生冲突的文件，选择Team -&gt; Merge Tool</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150939_41.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>第一项是将GIT自动合并过的文件和服务器端文件进行对比</p>\n<p>第二项是用本地最新版本的文件和服务器端文件进行对比，建议用此项</p>\n<p>接下来就是熟悉的对比界面</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150939_428.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥将冲突文件修改如下</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150940_565.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后右键点击此冲突文件，选择Team -&gt; Add to index再次将文件加入索引控制，此时文件已经不是冲突状态，并且可以进行提交并push到服务器端</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150941_256.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>解决合并冲突后，Mairo弟弟只需要将服务器中合并后的版本pull到本地，就完成了一次协作开发的代码合并。从历史记录中可以看到，从mushroom开始历史进入分支，先是mushroomA的记录，然后是mushroomB的记录，最后历史分支合并。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150941_83.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"九-Rebase和Merge的区别\"><a href=\"#九-Rebase和Merge的区别\" class=\"headerlink\" title=\"九_Rebase和Merge的区别\"></a>九_Rebase和Merge的区别</h3><p>Rebase和Merge操作最终的结果是一样的，但是实现原理不一样。</p>\n<p>从上面的MairoBro例子可以知道pull大概对历史记录进行了怎样的合并操作，其实默认pull的操作就是一个分支的merge操作，如下图重现一下：</p>\n<p>Mairo弟弟的提交记录如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150942_300.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥的提交记录如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_94.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>首先是Mairo弟弟把更新push到服务器，这样服务器端的记录就和Mairo弟弟本地的记录是一样的，接着Mairo哥哥执行pull操作，现在分析下pull是如何操作的。</p>\n<p>l  pull默认就是先把服务器端的最新记录更新到本地的Remote Tracking中对应的mirror分支</p>\n<p>l  接着对Local的mirror分支和Remote Tracking的mirror分支进行merge操作</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_24.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Merge操作后的结果就是会新增加一个merge记录节点，如下所示：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150943_894.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，mushroomA是在mushroomB之前的，这个时间关系不取决于谁先执行push，而取决于本地仓库中谁先执行commit。所以merge会按照时间顺序严格的记录每一次commit。</p>\n<p>接下来看看rebase，其实rebase也是把两个分支进行合并的操作，当Mairo弟弟push更新后，服务器端的mirror分支的历史如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150944_289.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>Mairo哥哥本地的历史如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150945_104.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>现在Mairo哥哥不是执行merge操作，而是执行rebase操作，最后结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150945_319.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>很明显的区别是没有出现分支的记录，而且注意到mushroomA*，请注意这个记录和mushroomA不是同一个记录，我们先分析下rebase操作下，Mairo哥哥的历史记录都做了哪些变化：</p>\n<p>l  先将当前分支的更新部分保存到临时区域，而当前分支重置到上一次pull的记录</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150946_936.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  然后将服务器端的更新添加到当前分支，此时当前分支和服务器端分支是一样的</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150946_102.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>l  最后将原分支的更新部分mushroomA提交到当前分支的后面，就是要在mushroomB的后面添加mushroomA的更新，当然此时更新记录已经不是之前的mushroomA了，如果出现冲突则使用对比工具解决冲突，最后记录变成mushroomA*。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150948_358.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><span style=\"color:#333333;font-family:Arial;line-height:26px;\">如 果Mairo哥哥提交过mushroomA1、mushroomA2、mushroomA3，那么执行rebase后会对mushroomA1、 mushroomA2、mushroomA3分别顺序执行上图所示的合并，最后记录为mushroomA1<em>、mushroomA2</em>、 mushroomA3*。很显然rebase操作更复杂，冲突的概率也更高，并且不是按照时间顺序记录。</span></p>\n<h3 id=\"十-Rebase和Merge如何选择的简单解析\"><a href=\"#十-Rebase和Merge如何选择的简单解析\" class=\"headerlink\" title=\"十_Rebase和Merge如何选择的简单解析\"></a>十_Rebase和Merge如何选择的简单解析</h3><p>此小结为什么说是简单解析呢，因为rebase和merge的选择问题讨论比较激烈，笔者也没有一个定论，而且git也处于研究发展阶段，很多理论还没有完全的纯熟。</p>\n<p>对于一个多人开发团队频繁提交更新的情况，如果使用merge会使得历史线图非常复杂，并且merge一次就会新增一个记录点，如果使用rebase就是完全的线性开发。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150949_351.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>上图所示是Merge和Rebase的两个结果，显然你不想要merge的混乱结果吧，你能告诉我merge图中那条线是master分支吗？</p>\n<p>所以给出如下建议，如果同一文件反复修改或提交次数比较多，预期会出现很多的conflict，那么可以使用merge合并，仅需要解决一次冲突即可（不 过，大范围主题式的修改，是不是应该事先就新开一个分支呢？）；如果修改范围小，预期conflict少，则建议使用rebase。</p>\n<p>EGIT中默认的pull操作是Fetch+Merge，如果要用rebase，可以分开操作。先执行Fetch更新remote tracking，再执行rebase进行合并（下一小节将介绍rebase操作）。或者修改pull的默认操作，在.git/config文件中配置：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150950_893.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>上述配置只对mirror分支有效，也可做全局配置，在$HOME/.gitconfig中配置，windows系统如果没有配置HOME变量的话就默认在$documents and settings/ USER目录下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150950_155.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<h3 id=\"十一-Fetch和Rebase\"><a href=\"#十一-Fetch和Rebase\" class=\"headerlink\" title=\"十一_Fetch和Rebase\"></a>十一_Fetch和Rebase</h3><p>MairoBro来做fetch和rebase的测试，首先Mairo弟弟在client中添加文件OPQ分别提交，并push到服务器，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150951_869.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150952_988.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>此时服务器端的历史已经被更新，但是Mairo哥哥的remote tracking中mirror分支并没有更新到最新的记录，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150953_677.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>所以需要更新remote tracking中的分支，使得它与服务器端的分支同步，右键点击资源库选择Fetch</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150954_184.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150954_15.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>这样就更新了本地的remote tracking中的分支，使得它和服务器端分支同步。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150955_499.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后Mairo哥哥在本地的private中添加文件ABC，并分别提交到本地仓库中。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_318.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_153.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>然后将本地mirror分支和remote tracking中的mirror分支进行rebase，先checkout本地mirror分支 ，然后右键点击选择Rebase</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150956_815.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150957_357.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150957_879.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_872.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>如上图可以看到历史记录的顺序是OPQABC，已经rebase成功，接着push到服务器即可。</p>\n<h3 id=\"十二-重置功能\"><a href=\"#十二-重置功能\" class=\"headerlink\" title=\"十二_重置功能\"></a>十二_重置功能</h3><p>GIT中有三种重置功能，分别是soft、mixed、hard，区别如下：</p>\n<p>l  <strong>Soft - </strong>当前分支重置到指定commit记录位置，索引和工作树不变；</p>\n<p>l  <strong>Mixed - </strong>当前分支重置到指定commit记录位置，索引被更新，工作树不变；</p>\n<p>l  <strong>Hard - </strong>当前分支重置到指定commit记录位置，索引和工作树都更新。</p>\n<p>貌似不好理解，首先要理解GIT的三个区域（工作树、索引区、仓库），可以参考文档《GIT简介》。</p>\n<p>先做soft的测试，新建Soft.java文件，可以看到此文件未添加到索引控制</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_662.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>先进行一次提交，提交后在History窗口中重置此次提交，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_719.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后查看工作树，如图</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150958_311.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，soft文件还存在，说明重置没有改变工作树，而且soft文件不是“问号”图标，说明已经添加到索引，说明索引也没有变。唯一重置的是历史记录。</p>\n<p>然后新建Mixed.java文件，此时Mixed.java也没有添加到索引控制，然后提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_537.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>在History窗口中重置</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_679.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后查看工作树结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725150959_42.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>从上图可以看出，Mixed.java文件还存在，说明工作树没有改变，但是文件状态是untracked，说明索引被更新，此时文件没有添加索引控制。</p>\n<p>最后来看hard重置，新建Hard.java文件，此时文件没有添加索引，然后提交。</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151000_90.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>在History界面重置此次提交，如图：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151000_133.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>重置后再查看工作树，结果如下：</p>\n<p><img src=\"http://static.open-open.com/lib/uploadImg/20140725/20140725151001_716.gif\" alt=\" Eclipse上GIT插件EGIT使用手册 \"></p>\n<p>本文转自<a href=\"http://blog.csdn.net/luckarecs/article/details/7427605\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/luckarecs/article/details/7427605</a></p>\n"},{"title":"Spring+MyBatis实现数据库读写分离方案","date":"2017-08-15T05:00:00.000Z","_content":"\n 推荐第四种：[https://github.com/shawntime/shawn-rwdb](https://github.com/shawntime/shawn-rwdb)\n\n##### 方案1\n\n> 通过MyBatis配置文件创建读写分离两个DataSource，每个SqlSessionFactoryBean对象的mapperLocations属性制定两个读写数据源的配置文件。将所有读的操作配置在读文件中，所有写的操作配置在写文件中。\n\n*   优点：实现简单\n*   缺点：维护麻烦，需要对原有的xml文件进行重新修改，不支持多读，不易扩展\n*   实现方式\n\n```\n<bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\"\n      destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n    <!-- 配置获取连接等待超时的时间 -->\n    <property name=\"maxWait\" value=\"60000\"/>\n    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n    <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n    <property name=\"testWhileIdle\" value=\"true\"/>\n    <property name=\"testOnBorrow\" value=\"false\"/>\n    <property name=\"testOnReturn\" value=\"false\"/>\n    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n    <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n    <property name=\"filters\" value=\"config\"/>\n    <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n</bean>\n\n<bean id=\"readDataSource\" parent=\"abstractDataSource\">\n    <!-- 基本属性 url、user、password -->\n    <property name=\"url\" value=\"${read.jdbc.url}\"/>\n    <property name=\"username\" value=\"${read.jdbc.user}\"/>\n    <property name=\"password\" value=\"${read.jdbc.password}\"/>\n    <!-- 配置初始化大小、最小、最大 -->\n    <property name=\"initialSize\" value=\"${read.jdbc.initPoolSize}\"/>\n    <property name=\"minIdle\" value=\"10\"/>\n    <property name=\"maxActive\" value=\"${read.jdbc.maxPoolSize}\"/>\n</bean>\n\n<bean id=\"writeDataSource\" parent=\"abstractDataSource\">\n    <!-- 基本属性 url、user、password -->\n    <property name=\"url\" value=\"${write.jdbc.url}\"/>\n    <property name=\"username\" value=\"${write.jdbc.user}\"/>\n    <property name=\"password\" value=\"${write.jdbc.password}\"/>\n    <!-- 配置初始化大小、最小、最大 -->\n    <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n    <property name=\"minIdle\" value=\"10\"/>\n    <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n</bean>\n\n<bean id=\"readSqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n    <property name=\"dataSource\" ref=\"readDataSource\"/>\n    <property name=\"mapperLocations\" value=\"classpath:mapper/read/*.xml\"/>\n</bean>\n\n<bean id=\"writeSqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n    <property name=\"dataSource\" ref=\"writeDataSource\"/>\n    <property name=\"mapperLocations\" value=\"classpath:mapper/write/*.xml\"/>\n</bean>\n```\n\n##### 方案2\n\n> 通过Spring AOP在业务层实现读写分离，在DAO层调用前定义切面，利用Spring的AbstractRoutingDataSource解决多数据源的问题，实现动态选择数据源\n\n*   优点：通过注解的方法在DAO每个方法上配置数据源，原有代码改动量少，易扩展，支持多读\n*   缺点：需要在DAO每个方法上配置注解，人工管理，容易出错\n*   实现方式\n\n```\n//定义枚举类型，读写\npublic enum DynamicDataSourceGlobal {\n    READ, WRITE;\n}\n```\n\n```\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * RUNTIME\n * 定义注解\n * 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。\n * @author shma1664\n *\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DataSource {\n\n    public DynamicDataSourceGlobal value() default DynamicDataSourceGlobal.READ;\n\n}\n```\n\n```\n/**\n * Created by IDEA\n * 本地线程设置和获取数据源信息\n * User: mashaohua\n * Date: 2016-07-07 13:35\n * Desc:\n */\npublic class DynamicDataSourceHolder {\n\n    private static final ThreadLocal<DynamicDataSourceGlobal> holder = new ThreadLocal<DynamicDataSourceGlobal>();\n\n    public static void putDataSource(DynamicDataSourceGlobal dataSource){\n        holder.set(dataSource);\n    }\n\n    public static DynamicDataSourceGlobal getDataSource(){\n        return holder.get();\n    }\n\n    public static void clearDataSource() {\n        holder.remove();\n    }\n\n}\n```\n\n```\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:56\n * Desc: 动态数据源实现读写分离\n */\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    private Object writeDataSource; //写数据源\n\n    private List<Object> readDataSources; //多个读数据源\n\n    private int readDataSourceSize; //读数据源个数\n\n    private int readDataSourcePollPattern = 0; //获取读数据源方式，0：随机，1：轮询\n\n    private AtomicLong counter = new AtomicLong(0);\n\n    private static final Long MAX_POOL = Long.MAX_VALUE;\n\n    private final Lock lock = new ReentrantLock();\n\n    @Override\n    public void afterPropertiesSet() {\n        if (this.writeDataSource == null) {\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        setDefaultTargetDataSource(writeDataSource);\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);\n        if (this.readDataSources == null) {\n            readDataSourceSize = 0;\n        } else {\n            for(int i=0; i<readDataSources.size(); i++) {\n                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i, readDataSources.get(i));\n            }\n            readDataSourceSize = readDataSources.size();\n        }\n        setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n\n        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();\n\n        if(dynamicDataSourceGlobal == null\n                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE\n                || readDataSourceSize <= 0) {\n            return DynamicDataSourceGlobal.WRITE.name();\n        }\n\n        int index = 1;\n\n        if(readDataSourcePollPattern == 1) {\n            //轮询方式\n            long currValue = counter.incrementAndGet();\n            if((currValue + 1) >= MAX_POOL) {\n                try {\n                    lock.lock();\n                    if((currValue + 1) >= MAX_POOL) {\n                        counter.set(0);\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n            index = (int) (currValue % readDataSourceSize);\n        } else {\n            //随机方式\n            index = ThreadLocalRandom.current().nextInt(0, readDataSourceSize);\n        }\n        return dynamicDataSourceGlobal.name() + index;\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public void setReadDataSources(List<Object> readDataSources) {\n        this.readDataSources = readDataSources;\n    }\n\n    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) {\n        this.readDataSourcePollPattern = readDataSourcePollPattern;\n    }\n}\n```\n\n```\nimport org.apache.log4j.Logger;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.reflect.MethodSignature;\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-07 13:39\n * Desc: 定义选择数据源切面\n */\npublic class DynamicDataSourceAspect {\n\n    private static final Logger logger = Logger.getLogger(DynamicDataSourceAspect.class);\n\n    public void pointCut(){};\n\n    public void before(JoinPoint point)\n    {\n        Object target = point.getTarget();\n        String methodName = point.getSignature().getName();\n        Class<?>[] clazz = target.getClass().getInterfaces();\n        Class<?>[] parameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();\n        try {\n            Method method = clazz[0].getMethod(methodName, parameterTypes);\n            if (method != null && method.isAnnotationPresent(DataSource.class)) {\n                DataSource data = method.getAnnotation(DataSource.class);\n                DynamicDataSourceHolder.putDataSource(data.value());\n            }\n        } catch (Exception e) {\n            logger.error(String.format(\"Choose DataSource error, method:%s, msg:%s\", methodName, e.getMessage()));\n        }\n    }\n\n    public void after(JoinPoint point) {\n        DynamicDataSourceHolder.clearDataSource();\n    }\n}\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd\">\n\n    <bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\"/>\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n        <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n        <property name=\"testWhileIdle\" value=\"true\"/>\n        <property name=\"testOnBorrow\" value=\"false\"/>\n        <property name=\"testOnReturn\" value=\"false\"/>\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\"/>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n        <property name=\"filters\" value=\"config\"/>\n        <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n    </bean>\n\n    <bean id=\"dataSourceRead1\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read1.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read1.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read1.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read1.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read1.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read1.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceRead2\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read2.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read2.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read2.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read2.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read2.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read2.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${write.jdbc.url}\"/>\n        <property name=\"username\" value=\"${write.jdbc.user}\"/>\n        <property name=\"password\" value=\"${write.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${write.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSource\" class=\"com.test.api.dao.datasource.DynamicDataSource\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSources\">\n            <list>\n                <ref bean=\"dataSourceRead1\" />\n                <ref bean=\"dataSourceRead2\" />\n            </list>\n        </property>\n        <!--轮询方式-->\n        <property name=\"readDataSourcePollPattern\" value=\"1\" />\n        <property name=\"defaultTargetDataSource\" ref=\"dataSourceWrite\"/>\n    </bean>\n\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 针对myBatis的配置项 -->\n    <!-- 配置sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n    </bean>\n\n    <!-- 配置扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <!-- 扫描包以及它的子包下的所有映射接口类 -->\n        <property name=\"basePackage\" value=\"com.test.api.dao.inte\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n    </bean>\n\n    <!-- 配置数据库注解aop -->\n    <bean id=\"dynamicDataSourceAspect\" class=\"com.test.api.dao.datasource.DynamicDataSourceAspect\" />\n    <aop:config>\n        <aop:aspect id=\"c\" ref=\"dynamicDataSourceAspect\">\n            <aop:pointcut id=\"tx\" expression=\"execution(* com.test.api.dao.inte..*.*(..))\"/>\n            <aop:before pointcut-ref=\"tx\" method=\"before\"/>\n            <aop:after pointcut-ref=\"tx\" method=\"after\"/>\n        </aop:aspect>\n    </aop:config>\n    <!-- 配置数据库注解aop -->\n</beans>\n```\n\n##### 方案3\n\n> 通过Mybatis的Plugin在业务层实现数据库读写分离，在MyBatis创建Statement对象前通过拦截器选择真正的数据源，在拦截器中根据方法名称不同（select、update、insert、delete）选择数据源。\n\n*   优点：原有代码不变，支持多读，易扩展\n*   缺点：\n*   实现方式\n\n```\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-19 15:40\n * Desc: 创建Connection代理接口\n */\npublic interface ConnectionProxy extends Connection {\n\n    /**\n     * 根据传入的读写分离需要的key路由到正确的connection\n     * @param key 数据源标识\n     * @return\n     */\n    Connection  getTargetConnection(String key);\n}\n```\n\n```\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.jdbc.datasource.AbstractDataSource;\nimport org.springframework.jdbc.datasource.lookup.DataSourceLookup;\nimport org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\nimport org.springframework.util.Assert;\n\npublic abstract class AbstractDynamicDataSourceProxy extends AbstractDataSource implements InitializingBean {\n\n    private List<Object> readDataSources;\n    private List<DataSource> resolvedReadDataSources;\n\n    private Object writeDataSource;\n    private DataSource resolvedWriteDataSource;\n\n    private int readDataSourcePollPattern = 0;\n\n    private int readDsSize;\n\n    private boolean defaultAutoCommit = true;\n    private int defaultTransactionIsolation = Connection.TRANSACTION_READ_COMMITTED;\n\n    public static final String READ = \"read\";\n\n    public static final String WRITE = \"write\";\n\n    private DataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n\n    @Override\n    public Connection getConnection() throws SQLException {\n        return (Connection) Proxy.newProxyInstance(\n                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),\n                new Class[] {com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class},\n                new RWConnectionInvocationHandler());\n    }\n\n    @Override\n    public Connection getConnection(String username, String password)\n            throws SQLException {\n        return (Connection) Proxy.newProxyInstance(\n                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),\n                new Class[] {com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class},\n                new RWConnectionInvocationHandler(username,password));\n    }\n\n    public int getReadDsSize(){\n        return readDsSize;\n    }\n\n    public List<DataSource> getResolvedReadDataSources() {\n        return resolvedReadDataSources;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n\n        if(writeDataSource == null){\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        this.resolvedWriteDataSource = resolveSpecifiedDataSource(writeDataSource);\n\n        resolvedReadDataSources = new ArrayList<DataSource>(readDataSources.size());\n        for(Object item : readDataSources){\n            resolvedReadDataSources.add(resolveSpecifiedDataSource(item));\n        }\n        readDsSize = readDataSources.size();\n    }\n\n    protected DataSource determineTargetDataSource(String key) {\n        Assert.notNull(this.resolvedReadDataSources, \"DataSource router not initialized\");\n        if(WRITE.equals(key)){\n            return resolvedWriteDataSource;\n        }else{\n            return loadReadDataSource();\n        }\n    }\n\n    public Logger getParentLogger() {\n        // NOOP Just ignore\n        return null;\n    }\n\n    /**\n     * 获取真实的data source\n     * @param dataSource (jndi | real data source)\n     * @return\n     * @throws IllegalArgumentException\n     */\n    protected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException {\n        if (dataSource instanceof DataSource) {\n            return (DataSource) dataSource;\n        }\n        else if (dataSource instanceof String) {\n            return this.dataSourceLookup.getDataSource((String) dataSource);\n        }\n        else {\n            throw new IllegalArgumentException(\n                    \"Illegal data source value - only [javax.sql.DataSource] and String supported: \" + dataSource);\n        }\n    }\n\n    protected abstract DataSource loadReadDataSource();\n\n    public void setReadDsSize(int readDsSize) {\n        this.readDsSize = readDsSize;\n    }\n\n    public List<Object> getReadDataSources() {\n        return readDataSources;\n    }\n\n    public void setReadDataSources(List<Object> readDataSources) {\n        this.readDataSources = readDataSources;\n    }\n\n    public Object getWriteDataSource() {\n        return writeDataSource;\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public void setResolvedReadDataSources(List<DataSource> resolvedReadDataSources) {\n        this.resolvedReadDataSources = resolvedReadDataSources;\n    }\n\n    public DataSource getResolvedWriteDataSource() {\n        return resolvedWriteDataSource;\n    }\n\n    public void setResolvedWriteDataSource(DataSource resolvedWriteDataSource) {\n        this.resolvedWriteDataSource = resolvedWriteDataSource;\n    }\n\n    public int getReadDataSourcePollPattern() {\n        return readDataSourcePollPattern;\n    }\n\n    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) {\n        this.readDataSourcePollPattern = readDataSourcePollPattern;\n    }\n\n    /**\n     * Invocation handler that defers fetching an actual JDBC Connection\n     * until first creation of a Statement.\n     */\n    private class RWConnectionInvocationHandler implements InvocationHandler {\n\n        private String username;\n\n        private String password;\n\n        private Boolean readOnly = Boolean.FALSE;\n\n        private Integer transactionIsolation;\n\n        private Boolean autoCommit;\n\n        private boolean closed = false;\n\n        private Connection target;\n\n        public RWConnectionInvocationHandler() {\n\n        }\n\n        public RWConnectionInvocationHandler(String username, String password) {\n            this();\n            this.username = username;\n            this.password = password;\n        }\n\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            // Invocation on ConnectionProxy interface coming in...\n\n            if (method.getName().equals(\"equals\")) {\n                // We must avoid fetching a target Connection for \"equals\".\n                // Only consider equal when proxies are identical.\n                return (proxy == args[0] ? Boolean.TRUE : Boolean.FALSE);\n            }\n            else if (method.getName().equals(\"hashCode\")) {\n                // We must avoid fetching a target Connection for \"hashCode\",\n                // and we must return the same hash code even when the target\n                // Connection has been fetched: use hashCode of Connection proxy.\n                return new Integer(System.identityHashCode(proxy));\n            }\n            else if (method.getName().equals(\"getTargetConnection\")) {\n                // Handle getTargetConnection method: return underlying connection.\n                return getTargetConnection(method,args);\n            }\n\n            if (!hasTargetConnection()) {\n                // No physical target Connection kept yet ->\n                // resolve transaction demarcation methods without fetching\n                // a physical JDBC Connection until absolutely necessary.\n\n                if (method.getName().equals(\"toString\")) {\n                    return \"RW Routing DataSource Proxy\";\n                }\n                else if (method.getName().equals(\"isReadOnly\")) {\n                    return this.readOnly;\n                }\n                else if (method.getName().equals(\"setReadOnly\")) {\n                    this.readOnly = (Boolean) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"getTransactionIsolation\")) {\n                    if (this.transactionIsolation != null) {\n                        return this.transactionIsolation;\n                    }\n                    return defaultTransactionIsolation;\n                    // Else fetch actual Connection and check there,\n                    // because we didn't have a default specified.\n                }\n                else if (method.getName().equals(\"setTransactionIsolation\")) {\n                    this.transactionIsolation = (Integer) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"getAutoCommit\")) {\n                    if (this.autoCommit != null)\n                        return this.autoCommit;\n                    return defaultAutoCommit;\n                    // Else fetch actual Connection and check there,\n                    // because we didn't have a default specified.\n                }\n                else if (method.getName().equals(\"setAutoCommit\")) {\n                    this.autoCommit = (Boolean) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"commit\")) {\n                    // Ignore: no statements created yet.\n                    return null;\n                }\n                else if (method.getName().equals(\"rollback\")) {\n                    // Ignore: no statements created yet.\n                    return null;\n                }\n                else if (method.getName().equals(\"getWarnings\")) {\n                    return null;\n                }\n                else if (method.getName().equals(\"clearWarnings\")) {\n                    return null;\n                }\n                else if (method.getName().equals(\"isClosed\")) {\n                    return (this.closed ? Boolean.TRUE : Boolean.FALSE);\n                }\n                else if (method.getName().equals(\"close\")) {\n                    // Ignore: no target connection yet.\n                    this.closed = true;\n                    return null;\n                }\n                else if (this.closed) {\n                    // Connection proxy closed, without ever having fetched a\n                    // physical JDBC Connection: throw corresponding SQLException.\n                    throw new SQLException(\"Illegal operation: connection is closed\");\n                }\n            }\n\n            // Target Connection already fetched,\n            // or target Connection necessary for current operation ->\n            // invoke method on target connection.\n            try {\n                return method.invoke(target, args);\n            }\n            catch (InvocationTargetException ex) {\n                throw ex.getTargetException();\n            }\n        }\n\n        /**\n         * Return whether the proxy currently holds a target Connection.\n         */\n        private boolean hasTargetConnection() {\n            return (this.target != null);\n        }\n\n        /**\n         * Return the target Connection, fetching it and initializing it if necessary.\n         */\n        private Connection getTargetConnection(Method operation,Object[] args) throws SQLException {\n\n            if (this.target == null) {\n                String key = (String) args[0];\n                // No target Connection held -> fetch one.\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Connecting to database for operation '\" + operation.getName() + \"'\");\n                }\n\n                // Fetch physical Connection from DataSource.\n                this.target = (this.username != null) ?\n                        determineTargetDataSource(key).getConnection(this.username, this.password) :\n                        determineTargetDataSource(key).getConnection();\n\n                // If we still lack default connection properties, check them now.\n                //checkDefaultConnectionProperties(this.target);\n\n                // Apply kept transaction settings, if any.\n                if (this.readOnly.booleanValue()) {\n                    this.target.setReadOnly(this.readOnly.booleanValue());\n                }\n                if (this.transactionIsolation != null) {\n                    this.target.setTransactionIsolation(this.transactionIsolation.intValue());\n                }\n                if (this.autoCommit != null && this.autoCommit.booleanValue() != this.target.getAutoCommit()) {\n                    this.target.setAutoCommit(this.autoCommit.booleanValue());\n                }\n            }\n\n            else {\n                // Target Connection already held -> return it.\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Using existing database connection for operation '\" + operation.getName() + \"'\");\n                }\n            }\n\n            return this.target;\n        }\n    }\n\n}\n```\n\n```\nimport javax.sql.DataSource;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-19 16:04\n * Desc:\n */\npublic class DynamicRoutingDataSourceProxy extends AbstractDynamicDataSourceProxy {\n\n    private AtomicLong counter = new AtomicLong(0);\n\n    private static final Long MAX_POOL = Long.MAX_VALUE;\n\n    private final Lock lock = new ReentrantLock();\n\n    @Override\n    protected DataSource loadReadDataSource() {\n        int index = 1;\n\n        if(getReadDataSourcePollPattern() == 1) {\n            //轮询方式\n            long currValue = counter.incrementAndGet();\n            if((currValue + 1) >= MAX_POOL) {\n                try {\n                    lock.lock();\n                    if((currValue + 1) >= MAX_POOL) {\n                        counter.set(0);\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n            index = (int) (currValue % getReadDsSize());\n        } else {\n            //随机方式\n            index = ThreadLocalRandom.current().nextInt(0, getReadDsSize());\n        }\n        return getResolvedReadDataSources().get(index);\n    }\n}\n```\n\n```\nimport org.apache.ibatis.executor.statement.RoutingStatementHandler;\nimport org.apache.ibatis.executor.statement.StatementHandler;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\n\nimport java.sql.Connection;\nimport java.util.Properties;\n\n/**\n * 拦截器\n */\n@Intercepts({ @Signature(type = StatementHandler.class, method = \"prepare\", args = { Connection.class }) })\npublic class DynamicPlugin implements Interceptor {\n\n    public Object intercept(Invocation invocation) throws Throwable {\n\n        Connection conn = (Connection)invocation.getArgs()[0];\n        //如果是采用了我们代理,则路由数据源\n        if(conn instanceof com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy){\n            StatementHandler statementHandler = (StatementHandler) invocation\n                    .getTarget();\n\n            MappedStatement mappedStatement = null;\n            if (statementHandler instanceof RoutingStatementHandler) {\n                StatementHandler delegate = (StatementHandler) ReflectionUtils\n                        .getFieldValue(statementHandler, \"delegate\");\n                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(\n                        delegate, \"mappedStatement\");\n            } else {\n                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(\n                        statementHandler, \"mappedStatement\");\n            }\n            String key = AbstractDynamicDataSourceProxy.WRITE;\n\n            if(mappedStatement.getSqlCommandType() == SqlCommandType.SELECT){\n                key = AbstractDynamicDataSourceProxy.READ;\n            }else{\n                key = AbstractDynamicDataSourceProxy.WRITE;\n            }\n\n            ConnectionProxy connectionProxy = (ConnectionProxy)conn;\n            connectionProxy.getTargetConnection(key);\n\n        }\n\n        return invocation.proceed();\n\n    }\n\n    public Object plugin(Object target) {\n\n        return Plugin.wrap(target, this);\n    }\n\n    public void setProperties(Properties properties) {\n        //NOOP\n\n    }\n\n}\n```\n\n```\nimport org.apache.ibatis.logging.Log;\nimport org.apache.ibatis.logging.LogFactory;\n\nimport java.lang.reflect.*;\n\npublic class ReflectionUtils {\n\n    private static final Log logger = LogFactory.getLog(ReflectionUtils.class);\n\n    /**\n     * 直接设置对象属性值,无视private/protected修饰符,不经过setter函数.\n     */\n    public static void setFieldValue(final Object object, final String fieldName, final Object value) {\n        Field field = getDeclaredField(object, fieldName);\n\n        if (field == null)\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + object + \"]\");\n\n        makeAccessible(field);\n\n        try {\n            field.set(object, value);\n        } catch (IllegalAccessException e) {\n\n        }\n    }\n\n    /**\n     * 直接读取对象属性值,无视private/protected修饰符,不经过getter函数.\n     */\n    public static Object getFieldValue(final Object object, final String fieldName) {\n        Field field = getDeclaredField(object, fieldName);\n\n        if (field == null)\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + object + \"]\");\n\n        makeAccessible(field);\n\n        Object result = null;\n        try {\n            result = field.get(object);\n        } catch (IllegalAccessException e) {\n\n        }\n        return result;\n    }\n\n    /**\n     * 直接调用对象方法,无视private/protected修饰符.\n     */\n    public static Object invokeMethod(final Object object, final String methodName, final Class<?>[] parameterTypes,\n            final Object[] parameters) throws InvocationTargetException {\n        Method method = getDeclaredMethod(object, methodName, parameterTypes);\n        if (method == null)\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + object + \"]\");\n\n        method.setAccessible(true);\n\n        try {\n            return method.invoke(object, parameters);\n        } catch (IllegalAccessException e) {\n\n        }\n\n        return null;\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredField.\n     */\n    protected static Field getDeclaredField(final Object object, final String fieldName) {\n        for (Class<?> superClass = object.getClass(); superClass != Object.class; superClass = superClass\n                .getSuperclass()) {\n            try {\n                return superClass.getDeclaredField(fieldName);\n            } catch (NoSuchFieldException e) {\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredField.\n     */\n    protected static void makeAccessible(final Field field) {\n        if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredMethod.\n     */\n    protected static Method getDeclaredMethod(Object object, String methodName, Class<?>[] parameterTypes) {\n        for (Class<?> superClass = object.getClass(); superClass != Object.class; superClass = superClass\n                .getSuperclass()) {\n            try {\n                return superClass.getDeclaredMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException e) {\n\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> Class<T> getSuperClassGenricType(final Class clazz) {\n        return getSuperClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Class getSuperClassGenricType(final Class clazz, final int index) {\n\n        Type genType = clazz.getGenericSuperclass();\n\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n\n        if (index >= params.length || index < 0) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \"\n                    + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n\n        return (Class) params[index];\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static IllegalArgumentException convertToUncheckedException(Exception e) {\n        if (e instanceof IllegalAccessException || e instanceof IllegalArgumentException\n                || e instanceof NoSuchMethodException)\n            return new IllegalArgumentException(\"Refelction Exception.\", e);\n        else\n            return new IllegalArgumentException(e);\n    }\n}\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD SQL Map Config 3.0//EN\"  \n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <plugins>\n        <plugin interceptor=\"com.test.api.dao.mybatis.DynamicPlugin\">\n        </plugin>\n    </plugins>\n\n</configuration>\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd\">\n\n    <bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\"/>\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n        <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n        <property name=\"testWhileIdle\" value=\"true\"/>\n        <property name=\"testOnBorrow\" value=\"false\"/>\n        <property name=\"testOnReturn\" value=\"false\"/>\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\"/>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n        <property name=\"filters\" value=\"config\"/>\n        <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n    </bean>\n\n    <bean id=\"dataSourceRead1\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read1.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read1.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read1.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read1.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read1.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read1.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceRead2\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read2.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read2.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read2.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read2.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read2.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read2.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${write.jdbc.url}\"/>\n        <property name=\"username\" value=\"${write.jdbc.user}\"/>\n        <property name=\"password\" value=\"${write.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${write.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSource\" class=\"com.test.api.dao.datasource.DynamicRoutingDataSourceProxy\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSources\">\n            <list>\n                <ref bean=\"dataSourceRead1\" />\n                <ref bean=\"dataSourceRead2\" />\n            </list>\n        </property>\n        <!--轮询方式-->\n        <property name=\"readDataSourcePollPattern\" value=\"1\" />\n    </bean>\n\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 针对myBatis的配置项 -->\n    <!-- 配置sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n        <property name=\"configLocation\" value=\"classpath:mybatis-plugin-config.xml\" />\n    </bean>\n\n    <bean id=\"sqlSessionTemplate\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n        <constructor-arg ref=\"sqlSessionFactory\" />\n    </bean>\n    <!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类-->\n    <bean id=\"mapper\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.test.api.dao.inte\" />\n        <property name=\"sqlSessionTemplate\" ref=\"sqlSessionTemplate\"></property>\n    </bean>\n\n</beans>\n```\n\n##### 方案4\n\n> 如果你的后台结构是spring+mybatis，可以通过spring的AbstractRoutingDataSource和mybatis Plugin拦截器实现非常友好的读写分离，原有代码不需要任何改变。推荐第四种方案\n\n```\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:56\n * Desc: 动态数据源实现读写分离\n */\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    private Object writeDataSource; //写数据源\n\n    private Object readDataSource; //读数据源\n\n    @Override\n    public void afterPropertiesSet() {\n        if (this.writeDataSource == null) {\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        setDefaultTargetDataSource(writeDataSource);\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);\n        if(readDataSource != null) {\n            targetDataSources.put(DynamicDataSourceGlobal.READ.name(), readDataSource);\n        }\n        setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n\n        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();\n\n        if(dynamicDataSourceGlobal == null\n                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE) {\n            return DynamicDataSourceGlobal.WRITE.name();\n        }\n\n        return DynamicDataSourceGlobal.READ.name();\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public Object getWriteDataSource() {\n        return writeDataSource;\n    }\n\n    public Object getReadDataSource() {\n        return readDataSource;\n    }\n\n    public void setReadDataSource(Object readDataSource) {\n        this.readDataSource = readDataSource;\n    }\n}\n```\n\n```\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:58\n * Desc:\n */\npublic enum DynamicDataSourceGlobal {\n    READ, WRITE;\n}\n```\n\n```\npublic final class DynamicDataSourceHolder {\n\n    private static final ThreadLocal<DynamicDataSourceGlobal> holder = new ThreadLocal<DynamicDataSourceGlobal>();\n\n    private DynamicDataSourceHolder() {\n        //\n    }\n\n    public static void putDataSource(DynamicDataSourceGlobal dataSource){\n        holder.set(dataSource);\n    }\n\n    public static DynamicDataSourceGlobal getDataSource(){\n        return holder.get();\n    }\n\n    public static void clearDataSource() {\n        holder.remove();\n    }\n\n}\n```\n\n```\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-08-10 14:34\n * Desc:\n */\npublic class DynamicDataSourceTransactionManager extends DataSourceTransactionManager {\n\n    /**\n     * 只读事务到读库，读写事务到写库\n     * @param transaction\n     * @param definition\n     */\n    @Override\n    protected void doBegin(Object transaction, TransactionDefinition definition) {\n\n        //设置数据源\n        boolean readOnly = definition.isReadOnly();\n        if(readOnly) {\n            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.READ);\n        } else {\n            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.WRITE);\n        }\n        super.doBegin(transaction, definition);\n    }\n\n    /**\n     * 清理本地线程的数据源\n     * @param transaction\n     */\n    @Override\n    protected void doCleanupAfterCompletion(Object transaction) {\n        super.doCleanupAfterCompletion(transaction);\n        DynamicDataSourceHolder.clearDataSource();\n    }\n}\n```\n\n```\nimport org.apache.ibatis.executor.Executor;\nimport org.apache.ibatis.executor.keygen.SelectKeyGenerator;\nimport org.apache.ibatis.mapping.BoundSql;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\nimport org.apache.ibatis.session.ResultHandler;\nimport org.apache.ibatis.session.RowBounds;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.transaction.support.TransactionSynchronizationManager;\n\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-08-10 11:09\n * Desc:\n */\n@Intercepts({\n@Signature(type = Executor.class, method = \"update\", args = {\n        MappedStatement.class, Object.class }),\n@Signature(type = Executor.class, method = \"query\", args = {\n        MappedStatement.class, Object.class, RowBounds.class,\n        ResultHandler.class }) })\npublic class DynamicPlugin implements Interceptor {\n\n    protected static final Logger logger = LoggerFactory.getLogger(DynamicPlugin.class);\n\n    private static final String REGEX = \".*insert\\\\u0020.*|.*delete\\\\u0020.*|.*update\\\\u0020.*\";\n\n    private static final Map<String, DynamicDataSourceGlobal> cacheMap = new ConcurrentHashMap<>();\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n\n        boolean synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();\n        if(!synchronizationActive) {\n            Object[] objects = invocation.getArgs();\n            MappedStatement ms = (MappedStatement) objects[0];\n\n            DynamicDataSourceGlobal dynamicDataSourceGlobal = null;\n\n            if((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == null) {\n                //读方法\n                if(ms.getSqlCommandType().equals(SqlCommandType.SELECT)) {\n                    //!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库\n                    if(ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) {\n                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                    } else {\n                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[1]);\n                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(\"[\\\\t\\\\n\\\\r]\", \" \");\n                        if(sql.matches(REGEX)) {\n                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                        } else {\n                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;\n                        }\n                    }\n                }else{\n                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                }\n                logger.warn(\"设置方法[{}] use [{}] Strategy, SqlCommandType [{}]..\", ms.getId(), dynamicDataSourceGlobal.name(), ms.getSqlCommandType().name());\n                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);\n            }\n            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);\n        }\n\n        return invocation.proceed();\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        if (target instanceof Executor) {\n            return Plugin.wrap(target, this);\n        } else {\n            return target;\n        }\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n        //\n    }\n}\n```\n\n***spring-db.xml***\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd \n        http://www.springframework.org/schema/tx \n  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\">\n\n\n\t<!-- 数据库连接池 -->\n\t<bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n\t \t<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n\t\t<property name=\"maxActive\" value=\"${jdbc.max_active}\" />\n\t\t<property name=\"initialSize\" value=\"${jdbc.initial_size}\" />\n\t\t<property name=\"maxWait\" value=\"${jdbc.max_wait}\" />\n\t\t<property name=\"minIdle\" value=\"${jdbc.min_idle}\" />\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3000\" />\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n\t\t<property name=\"validationQuery\" value=\"SELECT 'x'\" />\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<property name=\"testOnBorrow\" value=\"false\" />\n\t\t<property name=\"testOnReturn\" value=\"false\" />\n\t\t<property name=\"removeAbandoned\" value=\"true\" />\n\t\t<property name=\"removeAbandonedTimeout\" value=\"1800\" />\n\t\t<property name=\"logAbandoned\" value=\"true\" />\n\t</bean>\n\t\n\t<bean id=\"dataSourceRead\" parent=\"abstractDataSource\">\n        <property name=\"url\" value=\"${jdbc.read.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.read.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.read.password}\" />\n    </bean>\n    \n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.password}\" />\n    </bean>\n    \n    <bean id=\"dataSource\" class=\"com.ocean.common.DynamicDataSource\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSource\" ref=\"dataSourceRead\" />\n        <property name=\"defaultTargetDataSource\" ref=\"dataSourceWrite\"/>\n    </bean>\n    \n    <bean id=\"transactionManager\" class=\"com.ocean.common.DynamicDataSourceTransactionManager\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n\t<tx:annotation-driven transaction-manager=\"transactionManager\"\n\t\tproxy-target-class=\"true\" />\n\n\t<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->\n\t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"configLocation\" value=\"classpath:/mybatis/mybatis-configuration.xml\" />\n\t\t<!-- 自动扫描mapping.xml文件 -->\n\t\t<property name=\"mapperLocations\" value=\"classpath*:/mybatis/mapper/*.xml\" />\n\t</bean>\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<property name=\"basePackage\" value=\"com.ocean.dao\" />\n\t</bean>\n\n</beans>\n```\n\n***mybatis-configuration.xml***\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n <settings>\n  <setting name=\"cacheEnabled\" value=\"true\" />\n  <setting name=\"lazyLoadingEnabled\" value=\"false\" />\n  <setting name=\"aggressiveLazyLoading\" value=\"false\" />\n  <setting name=\"multipleResultSetsEnabled\" value=\"true\" />\n  <setting name=\"useColumnLabel\" value=\"true\" />\n  <setting name=\"useGeneratedKeys\" value=\"true\" />\n  <setting name=\"autoMappingBehavior\" value=\"FULL\" />\n  <setting name=\"defaultExecutorType\" value=\"SIMPLE\" />\n  <setting name=\"defaultStatementTimeout\" value=\"25000\" />\n </settings>\n \n <plugins>\n   <plugin interceptor=\"com.ocean.common.DynamicPlugin\">\n   </plugin>\n </plugins>\n</configuration>\n```\n本文转自[http://www.jianshu.com/p/2222257f96d3](http://www.jianshu.com/p/2222257f96d3)\n","source":"_posts/Spring+MyBatis实现数据库读写分离方案.md","raw":"---\ntitle: Spring+MyBatis实现数据库读写分离方案\ndate: 2017-08-15 13:00:00\ntags: [Spring,MyBatis]\ncategories: MyBatis\n---\n\n 推荐第四种：[https://github.com/shawntime/shawn-rwdb](https://github.com/shawntime/shawn-rwdb)\n\n##### 方案1\n\n> 通过MyBatis配置文件创建读写分离两个DataSource，每个SqlSessionFactoryBean对象的mapperLocations属性制定两个读写数据源的配置文件。将所有读的操作配置在读文件中，所有写的操作配置在写文件中。\n\n*   优点：实现简单\n*   缺点：维护麻烦，需要对原有的xml文件进行重新修改，不支持多读，不易扩展\n*   实现方式\n\n```\n<bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\"\n      destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n    <!-- 配置获取连接等待超时的时间 -->\n    <property name=\"maxWait\" value=\"60000\"/>\n    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n    <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n    <property name=\"testWhileIdle\" value=\"true\"/>\n    <property name=\"testOnBorrow\" value=\"false\"/>\n    <property name=\"testOnReturn\" value=\"false\"/>\n    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n    <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n    <property name=\"filters\" value=\"config\"/>\n    <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n</bean>\n\n<bean id=\"readDataSource\" parent=\"abstractDataSource\">\n    <!-- 基本属性 url、user、password -->\n    <property name=\"url\" value=\"${read.jdbc.url}\"/>\n    <property name=\"username\" value=\"${read.jdbc.user}\"/>\n    <property name=\"password\" value=\"${read.jdbc.password}\"/>\n    <!-- 配置初始化大小、最小、最大 -->\n    <property name=\"initialSize\" value=\"${read.jdbc.initPoolSize}\"/>\n    <property name=\"minIdle\" value=\"10\"/>\n    <property name=\"maxActive\" value=\"${read.jdbc.maxPoolSize}\"/>\n</bean>\n\n<bean id=\"writeDataSource\" parent=\"abstractDataSource\">\n    <!-- 基本属性 url、user、password -->\n    <property name=\"url\" value=\"${write.jdbc.url}\"/>\n    <property name=\"username\" value=\"${write.jdbc.user}\"/>\n    <property name=\"password\" value=\"${write.jdbc.password}\"/>\n    <!-- 配置初始化大小、最小、最大 -->\n    <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n    <property name=\"minIdle\" value=\"10\"/>\n    <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n</bean>\n\n<bean id=\"readSqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n    <property name=\"dataSource\" ref=\"readDataSource\"/>\n    <property name=\"mapperLocations\" value=\"classpath:mapper/read/*.xml\"/>\n</bean>\n\n<bean id=\"writeSqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n    <property name=\"dataSource\" ref=\"writeDataSource\"/>\n    <property name=\"mapperLocations\" value=\"classpath:mapper/write/*.xml\"/>\n</bean>\n```\n\n##### 方案2\n\n> 通过Spring AOP在业务层实现读写分离，在DAO层调用前定义切面，利用Spring的AbstractRoutingDataSource解决多数据源的问题，实现动态选择数据源\n\n*   优点：通过注解的方法在DAO每个方法上配置数据源，原有代码改动量少，易扩展，支持多读\n*   缺点：需要在DAO每个方法上配置注解，人工管理，容易出错\n*   实现方式\n\n```\n//定义枚举类型，读写\npublic enum DynamicDataSourceGlobal {\n    READ, WRITE;\n}\n```\n\n```\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * RUNTIME\n * 定义注解\n * 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。\n * @author shma1664\n *\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface DataSource {\n\n    public DynamicDataSourceGlobal value() default DynamicDataSourceGlobal.READ;\n\n}\n```\n\n```\n/**\n * Created by IDEA\n * 本地线程设置和获取数据源信息\n * User: mashaohua\n * Date: 2016-07-07 13:35\n * Desc:\n */\npublic class DynamicDataSourceHolder {\n\n    private static final ThreadLocal<DynamicDataSourceGlobal> holder = new ThreadLocal<DynamicDataSourceGlobal>();\n\n    public static void putDataSource(DynamicDataSourceGlobal dataSource){\n        holder.set(dataSource);\n    }\n\n    public static DynamicDataSourceGlobal getDataSource(){\n        return holder.get();\n    }\n\n    public static void clearDataSource() {\n        holder.remove();\n    }\n\n}\n```\n\n```\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:56\n * Desc: 动态数据源实现读写分离\n */\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    private Object writeDataSource; //写数据源\n\n    private List<Object> readDataSources; //多个读数据源\n\n    private int readDataSourceSize; //读数据源个数\n\n    private int readDataSourcePollPattern = 0; //获取读数据源方式，0：随机，1：轮询\n\n    private AtomicLong counter = new AtomicLong(0);\n\n    private static final Long MAX_POOL = Long.MAX_VALUE;\n\n    private final Lock lock = new ReentrantLock();\n\n    @Override\n    public void afterPropertiesSet() {\n        if (this.writeDataSource == null) {\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        setDefaultTargetDataSource(writeDataSource);\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);\n        if (this.readDataSources == null) {\n            readDataSourceSize = 0;\n        } else {\n            for(int i=0; i<readDataSources.size(); i++) {\n                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i, readDataSources.get(i));\n            }\n            readDataSourceSize = readDataSources.size();\n        }\n        setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n\n        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();\n\n        if(dynamicDataSourceGlobal == null\n                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE\n                || readDataSourceSize <= 0) {\n            return DynamicDataSourceGlobal.WRITE.name();\n        }\n\n        int index = 1;\n\n        if(readDataSourcePollPattern == 1) {\n            //轮询方式\n            long currValue = counter.incrementAndGet();\n            if((currValue + 1) >= MAX_POOL) {\n                try {\n                    lock.lock();\n                    if((currValue + 1) >= MAX_POOL) {\n                        counter.set(0);\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n            index = (int) (currValue % readDataSourceSize);\n        } else {\n            //随机方式\n            index = ThreadLocalRandom.current().nextInt(0, readDataSourceSize);\n        }\n        return dynamicDataSourceGlobal.name() + index;\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public void setReadDataSources(List<Object> readDataSources) {\n        this.readDataSources = readDataSources;\n    }\n\n    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) {\n        this.readDataSourcePollPattern = readDataSourcePollPattern;\n    }\n}\n```\n\n```\nimport org.apache.log4j.Logger;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.reflect.MethodSignature;\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-07 13:39\n * Desc: 定义选择数据源切面\n */\npublic class DynamicDataSourceAspect {\n\n    private static final Logger logger = Logger.getLogger(DynamicDataSourceAspect.class);\n\n    public void pointCut(){};\n\n    public void before(JoinPoint point)\n    {\n        Object target = point.getTarget();\n        String methodName = point.getSignature().getName();\n        Class<?>[] clazz = target.getClass().getInterfaces();\n        Class<?>[] parameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();\n        try {\n            Method method = clazz[0].getMethod(methodName, parameterTypes);\n            if (method != null && method.isAnnotationPresent(DataSource.class)) {\n                DataSource data = method.getAnnotation(DataSource.class);\n                DynamicDataSourceHolder.putDataSource(data.value());\n            }\n        } catch (Exception e) {\n            logger.error(String.format(\"Choose DataSource error, method:%s, msg:%s\", methodName, e.getMessage()));\n        }\n    }\n\n    public void after(JoinPoint point) {\n        DynamicDataSourceHolder.clearDataSource();\n    }\n}\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd\">\n\n    <bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\"/>\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n        <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n        <property name=\"testWhileIdle\" value=\"true\"/>\n        <property name=\"testOnBorrow\" value=\"false\"/>\n        <property name=\"testOnReturn\" value=\"false\"/>\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\"/>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n        <property name=\"filters\" value=\"config\"/>\n        <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n    </bean>\n\n    <bean id=\"dataSourceRead1\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read1.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read1.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read1.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read1.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read1.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read1.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceRead2\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read2.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read2.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read2.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read2.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read2.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read2.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${write.jdbc.url}\"/>\n        <property name=\"username\" value=\"${write.jdbc.user}\"/>\n        <property name=\"password\" value=\"${write.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${write.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSource\" class=\"com.test.api.dao.datasource.DynamicDataSource\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSources\">\n            <list>\n                <ref bean=\"dataSourceRead1\" />\n                <ref bean=\"dataSourceRead2\" />\n            </list>\n        </property>\n        <!--轮询方式-->\n        <property name=\"readDataSourcePollPattern\" value=\"1\" />\n        <property name=\"defaultTargetDataSource\" ref=\"dataSourceWrite\"/>\n    </bean>\n\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 针对myBatis的配置项 -->\n    <!-- 配置sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n    </bean>\n\n    <!-- 配置扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <!-- 扫描包以及它的子包下的所有映射接口类 -->\n        <property name=\"basePackage\" value=\"com.test.api.dao.inte\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n    </bean>\n\n    <!-- 配置数据库注解aop -->\n    <bean id=\"dynamicDataSourceAspect\" class=\"com.test.api.dao.datasource.DynamicDataSourceAspect\" />\n    <aop:config>\n        <aop:aspect id=\"c\" ref=\"dynamicDataSourceAspect\">\n            <aop:pointcut id=\"tx\" expression=\"execution(* com.test.api.dao.inte..*.*(..))\"/>\n            <aop:before pointcut-ref=\"tx\" method=\"before\"/>\n            <aop:after pointcut-ref=\"tx\" method=\"after\"/>\n        </aop:aspect>\n    </aop:config>\n    <!-- 配置数据库注解aop -->\n</beans>\n```\n\n##### 方案3\n\n> 通过Mybatis的Plugin在业务层实现数据库读写分离，在MyBatis创建Statement对象前通过拦截器选择真正的数据源，在拦截器中根据方法名称不同（select、update、insert、delete）选择数据源。\n\n*   优点：原有代码不变，支持多读，易扩展\n*   缺点：\n*   实现方式\n\n```\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-19 15:40\n * Desc: 创建Connection代理接口\n */\npublic interface ConnectionProxy extends Connection {\n\n    /**\n     * 根据传入的读写分离需要的key路由到正确的connection\n     * @param key 数据源标识\n     * @return\n     */\n    Connection  getTargetConnection(String key);\n}\n```\n\n```\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.jdbc.datasource.AbstractDataSource;\nimport org.springframework.jdbc.datasource.lookup.DataSourceLookup;\nimport org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;\nimport org.springframework.util.Assert;\n\npublic abstract class AbstractDynamicDataSourceProxy extends AbstractDataSource implements InitializingBean {\n\n    private List<Object> readDataSources;\n    private List<DataSource> resolvedReadDataSources;\n\n    private Object writeDataSource;\n    private DataSource resolvedWriteDataSource;\n\n    private int readDataSourcePollPattern = 0;\n\n    private int readDsSize;\n\n    private boolean defaultAutoCommit = true;\n    private int defaultTransactionIsolation = Connection.TRANSACTION_READ_COMMITTED;\n\n    public static final String READ = \"read\";\n\n    public static final String WRITE = \"write\";\n\n    private DataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n\n    @Override\n    public Connection getConnection() throws SQLException {\n        return (Connection) Proxy.newProxyInstance(\n                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),\n                new Class[] {com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class},\n                new RWConnectionInvocationHandler());\n    }\n\n    @Override\n    public Connection getConnection(String username, String password)\n            throws SQLException {\n        return (Connection) Proxy.newProxyInstance(\n                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),\n                new Class[] {com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class},\n                new RWConnectionInvocationHandler(username,password));\n    }\n\n    public int getReadDsSize(){\n        return readDsSize;\n    }\n\n    public List<DataSource> getResolvedReadDataSources() {\n        return resolvedReadDataSources;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n\n        if(writeDataSource == null){\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        this.resolvedWriteDataSource = resolveSpecifiedDataSource(writeDataSource);\n\n        resolvedReadDataSources = new ArrayList<DataSource>(readDataSources.size());\n        for(Object item : readDataSources){\n            resolvedReadDataSources.add(resolveSpecifiedDataSource(item));\n        }\n        readDsSize = readDataSources.size();\n    }\n\n    protected DataSource determineTargetDataSource(String key) {\n        Assert.notNull(this.resolvedReadDataSources, \"DataSource router not initialized\");\n        if(WRITE.equals(key)){\n            return resolvedWriteDataSource;\n        }else{\n            return loadReadDataSource();\n        }\n    }\n\n    public Logger getParentLogger() {\n        // NOOP Just ignore\n        return null;\n    }\n\n    /**\n     * 获取真实的data source\n     * @param dataSource (jndi | real data source)\n     * @return\n     * @throws IllegalArgumentException\n     */\n    protected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException {\n        if (dataSource instanceof DataSource) {\n            return (DataSource) dataSource;\n        }\n        else if (dataSource instanceof String) {\n            return this.dataSourceLookup.getDataSource((String) dataSource);\n        }\n        else {\n            throw new IllegalArgumentException(\n                    \"Illegal data source value - only [javax.sql.DataSource] and String supported: \" + dataSource);\n        }\n    }\n\n    protected abstract DataSource loadReadDataSource();\n\n    public void setReadDsSize(int readDsSize) {\n        this.readDsSize = readDsSize;\n    }\n\n    public List<Object> getReadDataSources() {\n        return readDataSources;\n    }\n\n    public void setReadDataSources(List<Object> readDataSources) {\n        this.readDataSources = readDataSources;\n    }\n\n    public Object getWriteDataSource() {\n        return writeDataSource;\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public void setResolvedReadDataSources(List<DataSource> resolvedReadDataSources) {\n        this.resolvedReadDataSources = resolvedReadDataSources;\n    }\n\n    public DataSource getResolvedWriteDataSource() {\n        return resolvedWriteDataSource;\n    }\n\n    public void setResolvedWriteDataSource(DataSource resolvedWriteDataSource) {\n        this.resolvedWriteDataSource = resolvedWriteDataSource;\n    }\n\n    public int getReadDataSourcePollPattern() {\n        return readDataSourcePollPattern;\n    }\n\n    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) {\n        this.readDataSourcePollPattern = readDataSourcePollPattern;\n    }\n\n    /**\n     * Invocation handler that defers fetching an actual JDBC Connection\n     * until first creation of a Statement.\n     */\n    private class RWConnectionInvocationHandler implements InvocationHandler {\n\n        private String username;\n\n        private String password;\n\n        private Boolean readOnly = Boolean.FALSE;\n\n        private Integer transactionIsolation;\n\n        private Boolean autoCommit;\n\n        private boolean closed = false;\n\n        private Connection target;\n\n        public RWConnectionInvocationHandler() {\n\n        }\n\n        public RWConnectionInvocationHandler(String username, String password) {\n            this();\n            this.username = username;\n            this.password = password;\n        }\n\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            // Invocation on ConnectionProxy interface coming in...\n\n            if (method.getName().equals(\"equals\")) {\n                // We must avoid fetching a target Connection for \"equals\".\n                // Only consider equal when proxies are identical.\n                return (proxy == args[0] ? Boolean.TRUE : Boolean.FALSE);\n            }\n            else if (method.getName().equals(\"hashCode\")) {\n                // We must avoid fetching a target Connection for \"hashCode\",\n                // and we must return the same hash code even when the target\n                // Connection has been fetched: use hashCode of Connection proxy.\n                return new Integer(System.identityHashCode(proxy));\n            }\n            else if (method.getName().equals(\"getTargetConnection\")) {\n                // Handle getTargetConnection method: return underlying connection.\n                return getTargetConnection(method,args);\n            }\n\n            if (!hasTargetConnection()) {\n                // No physical target Connection kept yet ->\n                // resolve transaction demarcation methods without fetching\n                // a physical JDBC Connection until absolutely necessary.\n\n                if (method.getName().equals(\"toString\")) {\n                    return \"RW Routing DataSource Proxy\";\n                }\n                else if (method.getName().equals(\"isReadOnly\")) {\n                    return this.readOnly;\n                }\n                else if (method.getName().equals(\"setReadOnly\")) {\n                    this.readOnly = (Boolean) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"getTransactionIsolation\")) {\n                    if (this.transactionIsolation != null) {\n                        return this.transactionIsolation;\n                    }\n                    return defaultTransactionIsolation;\n                    // Else fetch actual Connection and check there,\n                    // because we didn't have a default specified.\n                }\n                else if (method.getName().equals(\"setTransactionIsolation\")) {\n                    this.transactionIsolation = (Integer) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"getAutoCommit\")) {\n                    if (this.autoCommit != null)\n                        return this.autoCommit;\n                    return defaultAutoCommit;\n                    // Else fetch actual Connection and check there,\n                    // because we didn't have a default specified.\n                }\n                else if (method.getName().equals(\"setAutoCommit\")) {\n                    this.autoCommit = (Boolean) args[0];\n                    return null;\n                }\n                else if (method.getName().equals(\"commit\")) {\n                    // Ignore: no statements created yet.\n                    return null;\n                }\n                else if (method.getName().equals(\"rollback\")) {\n                    // Ignore: no statements created yet.\n                    return null;\n                }\n                else if (method.getName().equals(\"getWarnings\")) {\n                    return null;\n                }\n                else if (method.getName().equals(\"clearWarnings\")) {\n                    return null;\n                }\n                else if (method.getName().equals(\"isClosed\")) {\n                    return (this.closed ? Boolean.TRUE : Boolean.FALSE);\n                }\n                else if (method.getName().equals(\"close\")) {\n                    // Ignore: no target connection yet.\n                    this.closed = true;\n                    return null;\n                }\n                else if (this.closed) {\n                    // Connection proxy closed, without ever having fetched a\n                    // physical JDBC Connection: throw corresponding SQLException.\n                    throw new SQLException(\"Illegal operation: connection is closed\");\n                }\n            }\n\n            // Target Connection already fetched,\n            // or target Connection necessary for current operation ->\n            // invoke method on target connection.\n            try {\n                return method.invoke(target, args);\n            }\n            catch (InvocationTargetException ex) {\n                throw ex.getTargetException();\n            }\n        }\n\n        /**\n         * Return whether the proxy currently holds a target Connection.\n         */\n        private boolean hasTargetConnection() {\n            return (this.target != null);\n        }\n\n        /**\n         * Return the target Connection, fetching it and initializing it if necessary.\n         */\n        private Connection getTargetConnection(Method operation,Object[] args) throws SQLException {\n\n            if (this.target == null) {\n                String key = (String) args[0];\n                // No target Connection held -> fetch one.\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Connecting to database for operation '\" + operation.getName() + \"'\");\n                }\n\n                // Fetch physical Connection from DataSource.\n                this.target = (this.username != null) ?\n                        determineTargetDataSource(key).getConnection(this.username, this.password) :\n                        determineTargetDataSource(key).getConnection();\n\n                // If we still lack default connection properties, check them now.\n                //checkDefaultConnectionProperties(this.target);\n\n                // Apply kept transaction settings, if any.\n                if (this.readOnly.booleanValue()) {\n                    this.target.setReadOnly(this.readOnly.booleanValue());\n                }\n                if (this.transactionIsolation != null) {\n                    this.target.setTransactionIsolation(this.transactionIsolation.intValue());\n                }\n                if (this.autoCommit != null && this.autoCommit.booleanValue() != this.target.getAutoCommit()) {\n                    this.target.setAutoCommit(this.autoCommit.booleanValue());\n                }\n            }\n\n            else {\n                // Target Connection already held -> return it.\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Using existing database connection for operation '\" + operation.getName() + \"'\");\n                }\n            }\n\n            return this.target;\n        }\n    }\n\n}\n```\n\n```\nimport javax.sql.DataSource;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-19 16:04\n * Desc:\n */\npublic class DynamicRoutingDataSourceProxy extends AbstractDynamicDataSourceProxy {\n\n    private AtomicLong counter = new AtomicLong(0);\n\n    private static final Long MAX_POOL = Long.MAX_VALUE;\n\n    private final Lock lock = new ReentrantLock();\n\n    @Override\n    protected DataSource loadReadDataSource() {\n        int index = 1;\n\n        if(getReadDataSourcePollPattern() == 1) {\n            //轮询方式\n            long currValue = counter.incrementAndGet();\n            if((currValue + 1) >= MAX_POOL) {\n                try {\n                    lock.lock();\n                    if((currValue + 1) >= MAX_POOL) {\n                        counter.set(0);\n                    }\n                } finally {\n                    lock.unlock();\n                }\n            }\n            index = (int) (currValue % getReadDsSize());\n        } else {\n            //随机方式\n            index = ThreadLocalRandom.current().nextInt(0, getReadDsSize());\n        }\n        return getResolvedReadDataSources().get(index);\n    }\n}\n```\n\n```\nimport org.apache.ibatis.executor.statement.RoutingStatementHandler;\nimport org.apache.ibatis.executor.statement.StatementHandler;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\n\nimport java.sql.Connection;\nimport java.util.Properties;\n\n/**\n * 拦截器\n */\n@Intercepts({ @Signature(type = StatementHandler.class, method = \"prepare\", args = { Connection.class }) })\npublic class DynamicPlugin implements Interceptor {\n\n    public Object intercept(Invocation invocation) throws Throwable {\n\n        Connection conn = (Connection)invocation.getArgs()[0];\n        //如果是采用了我们代理,则路由数据源\n        if(conn instanceof com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy){\n            StatementHandler statementHandler = (StatementHandler) invocation\n                    .getTarget();\n\n            MappedStatement mappedStatement = null;\n            if (statementHandler instanceof RoutingStatementHandler) {\n                StatementHandler delegate = (StatementHandler) ReflectionUtils\n                        .getFieldValue(statementHandler, \"delegate\");\n                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(\n                        delegate, \"mappedStatement\");\n            } else {\n                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(\n                        statementHandler, \"mappedStatement\");\n            }\n            String key = AbstractDynamicDataSourceProxy.WRITE;\n\n            if(mappedStatement.getSqlCommandType() == SqlCommandType.SELECT){\n                key = AbstractDynamicDataSourceProxy.READ;\n            }else{\n                key = AbstractDynamicDataSourceProxy.WRITE;\n            }\n\n            ConnectionProxy connectionProxy = (ConnectionProxy)conn;\n            connectionProxy.getTargetConnection(key);\n\n        }\n\n        return invocation.proceed();\n\n    }\n\n    public Object plugin(Object target) {\n\n        return Plugin.wrap(target, this);\n    }\n\n    public void setProperties(Properties properties) {\n        //NOOP\n\n    }\n\n}\n```\n\n```\nimport org.apache.ibatis.logging.Log;\nimport org.apache.ibatis.logging.LogFactory;\n\nimport java.lang.reflect.*;\n\npublic class ReflectionUtils {\n\n    private static final Log logger = LogFactory.getLog(ReflectionUtils.class);\n\n    /**\n     * 直接设置对象属性值,无视private/protected修饰符,不经过setter函数.\n     */\n    public static void setFieldValue(final Object object, final String fieldName, final Object value) {\n        Field field = getDeclaredField(object, fieldName);\n\n        if (field == null)\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + object + \"]\");\n\n        makeAccessible(field);\n\n        try {\n            field.set(object, value);\n        } catch (IllegalAccessException e) {\n\n        }\n    }\n\n    /**\n     * 直接读取对象属性值,无视private/protected修饰符,不经过getter函数.\n     */\n    public static Object getFieldValue(final Object object, final String fieldName) {\n        Field field = getDeclaredField(object, fieldName);\n\n        if (field == null)\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + object + \"]\");\n\n        makeAccessible(field);\n\n        Object result = null;\n        try {\n            result = field.get(object);\n        } catch (IllegalAccessException e) {\n\n        }\n        return result;\n    }\n\n    /**\n     * 直接调用对象方法,无视private/protected修饰符.\n     */\n    public static Object invokeMethod(final Object object, final String methodName, final Class<?>[] parameterTypes,\n            final Object[] parameters) throws InvocationTargetException {\n        Method method = getDeclaredMethod(object, methodName, parameterTypes);\n        if (method == null)\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + object + \"]\");\n\n        method.setAccessible(true);\n\n        try {\n            return method.invoke(object, parameters);\n        } catch (IllegalAccessException e) {\n\n        }\n\n        return null;\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredField.\n     */\n    protected static Field getDeclaredField(final Object object, final String fieldName) {\n        for (Class<?> superClass = object.getClass(); superClass != Object.class; superClass = superClass\n                .getSuperclass()) {\n            try {\n                return superClass.getDeclaredField(fieldName);\n            } catch (NoSuchFieldException e) {\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredField.\n     */\n    protected static void makeAccessible(final Field field) {\n        if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 循环向上转型,获取对象的DeclaredMethod.\n     */\n    protected static Method getDeclaredMethod(Object object, String methodName, Class<?>[] parameterTypes) {\n        for (Class<?> superClass = object.getClass(); superClass != Object.class; superClass = superClass\n                .getSuperclass()) {\n            try {\n                return superClass.getDeclaredMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException e) {\n\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> Class<T> getSuperClassGenricType(final Class clazz) {\n        return getSuperClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Class getSuperClassGenricType(final Class clazz, final int index) {\n\n        Type genType = clazz.getGenericSuperclass();\n\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n\n        if (index >= params.length || index < 0) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \"\n                    + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n\n        return (Class) params[index];\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static IllegalArgumentException convertToUncheckedException(Exception e) {\n        if (e instanceof IllegalAccessException || e instanceof IllegalArgumentException\n                || e instanceof NoSuchMethodException)\n            return new IllegalArgumentException(\"Refelction Exception.\", e);\n        else\n            return new IllegalArgumentException(e);\n    }\n}\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD SQL Map Config 3.0//EN\"  \n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <plugins>\n        <plugin interceptor=\"com.test.api.dao.mybatis.DynamicPlugin\">\n        </plugin>\n    </plugins>\n\n</configuration>\n```\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd\">\n\n    <bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 配置获取连接等待超时的时间 -->\n        <property name=\"maxWait\" value=\"60000\"/>\n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n        <property name=\"validationQuery\" value=\"SELECT 'x'\"/>\n        <property name=\"testWhileIdle\" value=\"true\"/>\n        <property name=\"testOnBorrow\" value=\"false\"/>\n        <property name=\"testOnReturn\" value=\"false\"/>\n        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->\n        <property name=\"poolPreparedStatements\" value=\"true\"/>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n        <property name=\"filters\" value=\"config\"/>\n        <property name=\"connectionProperties\" value=\"config.decrypt=true\" />\n    </bean>\n\n    <bean id=\"dataSourceRead1\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read1.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read1.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read1.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read1.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read1.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read1.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceRead2\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${read2.jdbc.url}\"/>\n        <property name=\"username\" value=\"${read2.jdbc.user}\"/>\n        <property name=\"password\" value=\"${read2.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${read2.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${read2.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${read2.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"driverClassName\" value=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"/>\n        <!-- 基本属性 url、user、password -->\n        <property name=\"url\" value=\"${write.jdbc.url}\"/>\n        <property name=\"username\" value=\"${write.jdbc.user}\"/>\n        <property name=\"password\" value=\"${write.jdbc.password}\"/>\n        <!-- 配置初始化大小、最小、最大 -->\n        <property name=\"initialSize\" value=\"${write.jdbc.initPoolSize}\"/>\n        <property name=\"minIdle\" value=\"${write.jdbc.minPoolSize}\"/>\n        <property name=\"maxActive\" value=\"${write.jdbc.maxPoolSize}\"/>\n    </bean>\n\n    <bean id=\"dataSource\" class=\"com.test.api.dao.datasource.DynamicRoutingDataSourceProxy\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSources\">\n            <list>\n                <ref bean=\"dataSourceRead1\" />\n                <ref bean=\"dataSourceRead2\" />\n            </list>\n        </property>\n        <!--轮询方式-->\n        <property name=\"readDataSourcePollPattern\" value=\"1\" />\n    </bean>\n\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 针对myBatis的配置项 -->\n    <!-- 配置sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n        <property name=\"configLocation\" value=\"classpath:mybatis-plugin-config.xml\" />\n    </bean>\n\n    <bean id=\"sqlSessionTemplate\" class=\"org.mybatis.spring.SqlSessionTemplate\">\n        <constructor-arg ref=\"sqlSessionFactory\" />\n    </bean>\n    <!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类-->\n    <bean id=\"mapper\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.test.api.dao.inte\" />\n        <property name=\"sqlSessionTemplate\" ref=\"sqlSessionTemplate\"></property>\n    </bean>\n\n</beans>\n```\n\n##### 方案4\n\n> 如果你的后台结构是spring+mybatis，可以通过spring的AbstractRoutingDataSource和mybatis Plugin拦截器实现非常友好的读写分离，原有代码不需要任何改变。推荐第四种方案\n\n```\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:56\n * Desc: 动态数据源实现读写分离\n */\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    private Object writeDataSource; //写数据源\n\n    private Object readDataSource; //读数据源\n\n    @Override\n    public void afterPropertiesSet() {\n        if (this.writeDataSource == null) {\n            throw new IllegalArgumentException(\"Property 'writeDataSource' is required\");\n        }\n        setDefaultTargetDataSource(writeDataSource);\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);\n        if(readDataSource != null) {\n            targetDataSources.put(DynamicDataSourceGlobal.READ.name(), readDataSource);\n        }\n        setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n\n        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();\n\n        if(dynamicDataSourceGlobal == null\n                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE) {\n            return DynamicDataSourceGlobal.WRITE.name();\n        }\n\n        return DynamicDataSourceGlobal.READ.name();\n    }\n\n    public void setWriteDataSource(Object writeDataSource) {\n        this.writeDataSource = writeDataSource;\n    }\n\n    public Object getWriteDataSource() {\n        return writeDataSource;\n    }\n\n    public Object getReadDataSource() {\n        return readDataSource;\n    }\n\n    public void setReadDataSource(Object readDataSource) {\n        this.readDataSource = readDataSource;\n    }\n}\n```\n\n```\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-07-14 10:58\n * Desc:\n */\npublic enum DynamicDataSourceGlobal {\n    READ, WRITE;\n}\n```\n\n```\npublic final class DynamicDataSourceHolder {\n\n    private static final ThreadLocal<DynamicDataSourceGlobal> holder = new ThreadLocal<DynamicDataSourceGlobal>();\n\n    private DynamicDataSourceHolder() {\n        //\n    }\n\n    public static void putDataSource(DynamicDataSourceGlobal dataSource){\n        holder.set(dataSource);\n    }\n\n    public static DynamicDataSourceGlobal getDataSource(){\n        return holder.get();\n    }\n\n    public static void clearDataSource() {\n        holder.remove();\n    }\n\n}\n```\n\n```\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-08-10 14:34\n * Desc:\n */\npublic class DynamicDataSourceTransactionManager extends DataSourceTransactionManager {\n\n    /**\n     * 只读事务到读库，读写事务到写库\n     * @param transaction\n     * @param definition\n     */\n    @Override\n    protected void doBegin(Object transaction, TransactionDefinition definition) {\n\n        //设置数据源\n        boolean readOnly = definition.isReadOnly();\n        if(readOnly) {\n            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.READ);\n        } else {\n            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.WRITE);\n        }\n        super.doBegin(transaction, definition);\n    }\n\n    /**\n     * 清理本地线程的数据源\n     * @param transaction\n     */\n    @Override\n    protected void doCleanupAfterCompletion(Object transaction) {\n        super.doCleanupAfterCompletion(transaction);\n        DynamicDataSourceHolder.clearDataSource();\n    }\n}\n```\n\n```\nimport org.apache.ibatis.executor.Executor;\nimport org.apache.ibatis.executor.keygen.SelectKeyGenerator;\nimport org.apache.ibatis.mapping.BoundSql;\nimport org.apache.ibatis.mapping.MappedStatement;\nimport org.apache.ibatis.mapping.SqlCommandType;\nimport org.apache.ibatis.plugin.*;\nimport org.apache.ibatis.session.ResultHandler;\nimport org.apache.ibatis.session.RowBounds;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.transaction.support.TransactionSynchronizationManager;\n\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Created by IDEA\n * User: mashaohua\n * Date: 2016-08-10 11:09\n * Desc:\n */\n@Intercepts({\n@Signature(type = Executor.class, method = \"update\", args = {\n        MappedStatement.class, Object.class }),\n@Signature(type = Executor.class, method = \"query\", args = {\n        MappedStatement.class, Object.class, RowBounds.class,\n        ResultHandler.class }) })\npublic class DynamicPlugin implements Interceptor {\n\n    protected static final Logger logger = LoggerFactory.getLogger(DynamicPlugin.class);\n\n    private static final String REGEX = \".*insert\\\\u0020.*|.*delete\\\\u0020.*|.*update\\\\u0020.*\";\n\n    private static final Map<String, DynamicDataSourceGlobal> cacheMap = new ConcurrentHashMap<>();\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n\n        boolean synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();\n        if(!synchronizationActive) {\n            Object[] objects = invocation.getArgs();\n            MappedStatement ms = (MappedStatement) objects[0];\n\n            DynamicDataSourceGlobal dynamicDataSourceGlobal = null;\n\n            if((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == null) {\n                //读方法\n                if(ms.getSqlCommandType().equals(SqlCommandType.SELECT)) {\n                    //!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库\n                    if(ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) {\n                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                    } else {\n                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[1]);\n                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(\"[\\\\t\\\\n\\\\r]\", \" \");\n                        if(sql.matches(REGEX)) {\n                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                        } else {\n                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;\n                        }\n                    }\n                }else{\n                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;\n                }\n                logger.warn(\"设置方法[{}] use [{}] Strategy, SqlCommandType [{}]..\", ms.getId(), dynamicDataSourceGlobal.name(), ms.getSqlCommandType().name());\n                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);\n            }\n            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);\n        }\n\n        return invocation.proceed();\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        if (target instanceof Executor) {\n            return Plugin.wrap(target, this);\n        } else {\n            return target;\n        }\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n        //\n    }\n}\n```\n\n***spring-db.xml***\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n        http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd \n        http://www.springframework.org/schema/tx \n  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\">\n\n\n\t<!-- 数据库连接池 -->\n\t<bean id=\"abstractDataSource\" abstract=\"true\" class=\"com.alibaba.druid.pool.DruidDataSource\" init-method=\"init\" destroy-method=\"close\">\n\t \t<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n\t\t<property name=\"maxActive\" value=\"${jdbc.max_active}\" />\n\t\t<property name=\"initialSize\" value=\"${jdbc.initial_size}\" />\n\t\t<property name=\"maxWait\" value=\"${jdbc.max_wait}\" />\n\t\t<property name=\"minIdle\" value=\"${jdbc.min_idle}\" />\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3000\" />\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />\n\t\t<property name=\"validationQuery\" value=\"SELECT 'x'\" />\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<property name=\"testOnBorrow\" value=\"false\" />\n\t\t<property name=\"testOnReturn\" value=\"false\" />\n\t\t<property name=\"removeAbandoned\" value=\"true\" />\n\t\t<property name=\"removeAbandonedTimeout\" value=\"1800\" />\n\t\t<property name=\"logAbandoned\" value=\"true\" />\n\t</bean>\n\t\n\t<bean id=\"dataSourceRead\" parent=\"abstractDataSource\">\n        <property name=\"url\" value=\"${jdbc.read.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.read.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.read.password}\" />\n    </bean>\n    \n    <bean id=\"dataSourceWrite\" parent=\"abstractDataSource\">\n        <property name=\"url\" value=\"${jdbc.url}\" />\n\t\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t\t<property name=\"password\" value=\"${jdbc.password}\" />\n    </bean>\n    \n    <bean id=\"dataSource\" class=\"com.ocean.common.DynamicDataSource\">\n        <property name=\"writeDataSource\" ref=\"dataSourceWrite\" />\n        <property name=\"readDataSource\" ref=\"dataSourceRead\" />\n        <property name=\"defaultTargetDataSource\" ref=\"dataSourceWrite\"/>\n    </bean>\n    \n    <bean id=\"transactionManager\" class=\"com.ocean.common.DynamicDataSourceTransactionManager\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n\t<tx:annotation-driven transaction-manager=\"transactionManager\"\n\t\tproxy-target-class=\"true\" />\n\n\t<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->\n\t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"configLocation\" value=\"classpath:/mybatis/mybatis-configuration.xml\" />\n\t\t<!-- 自动扫描mapping.xml文件 -->\n\t\t<property name=\"mapperLocations\" value=\"classpath*:/mybatis/mapper/*.xml\" />\n\t</bean>\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<property name=\"basePackage\" value=\"com.ocean.dao\" />\n\t</bean>\n\n</beans>\n```\n\n***mybatis-configuration.xml***\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n <settings>\n  <setting name=\"cacheEnabled\" value=\"true\" />\n  <setting name=\"lazyLoadingEnabled\" value=\"false\" />\n  <setting name=\"aggressiveLazyLoading\" value=\"false\" />\n  <setting name=\"multipleResultSetsEnabled\" value=\"true\" />\n  <setting name=\"useColumnLabel\" value=\"true\" />\n  <setting name=\"useGeneratedKeys\" value=\"true\" />\n  <setting name=\"autoMappingBehavior\" value=\"FULL\" />\n  <setting name=\"defaultExecutorType\" value=\"SIMPLE\" />\n  <setting name=\"defaultStatementTimeout\" value=\"25000\" />\n </settings>\n \n <plugins>\n   <plugin interceptor=\"com.ocean.common.DynamicPlugin\">\n   </plugin>\n </plugins>\n</configuration>\n```\n本文转自[http://www.jianshu.com/p/2222257f96d3](http://www.jianshu.com/p/2222257f96d3)\n","slug":"Spring+MyBatis实现数据库读写分离方案","published":1,"updated":"2018-10-17T05:48:51.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnctyr6v003wk4nz1plbm5sr","content":"<p> 推荐第四种：<a href=\"https://github.com/shawntime/shawn-rwdb\" target=\"_blank\" rel=\"noopener\">https://github.com/shawntime/shawn-rwdb</a></p>\n<h5 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a>方案1</h5><blockquote>\n<p>通过MyBatis配置文件创建读写分离两个DataSource，每个SqlSessionFactoryBean对象的mapperLocations属性制定两个读写数据源的配置文件。将所有读的操作配置在读文件中，所有写的操作配置在写文件中。</p>\n</blockquote>\n<ul>\n<li>优点：实现简单</li>\n<li>缺点：维护麻烦，需要对原有的xml文件进行重新修改，不支持多读，不易扩展</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;</span><br><span class=\"line\">      destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;readDataSource&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot; value=&quot;$&#123;read.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot; value=&quot;$&#123;read.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot; value=&quot;$&#123;read.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minIdle&quot; value=&quot;10&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;writeDataSource&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minIdle&quot; value=&quot;10&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;readSqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;readDataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/read/*.xml&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;writeSqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;writeDataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/write/*.xml&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a>方案2</h5><blockquote>\n<p>通过Spring AOP在业务层实现读写分离，在DAO层调用前定义切面，利用Spring的AbstractRoutingDataSource解决多数据源的问题，实现动态选择数据源</p>\n</blockquote>\n<ul>\n<li>优点：通过注解的方法在DAO每个方法上配置数据源，原有代码改动量少，易扩展，支持多读</li>\n<li>缺点：需要在DAO每个方法上配置注解，人工管理，容易出错</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义枚举类型，读写</span><br><span class=\"line\">public enum DynamicDataSourceGlobal &#123;</span><br><span class=\"line\">    READ, WRITE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * RUNTIME</span><br><span class=\"line\"> * 定义注解</span><br><span class=\"line\"> * 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。</span><br><span class=\"line\"> * @author shma1664</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">public @interface DataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DynamicDataSourceGlobal value() default DynamicDataSourceGlobal.READ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * 本地线程设置和获取数据源信息</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-07 13:35</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceHolder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = new ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void putDataSource(DynamicDataSourceGlobal dataSource)&#123;</span><br><span class=\"line\">        holder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static DynamicDataSourceGlobal getDataSource()&#123;</span><br><span class=\"line\">        return holder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void clearDataSource() &#123;</span><br><span class=\"line\">        holder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import java.util.concurrent.locks.Lock;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:56</span><br><span class=\"line\"> * Desc: 动态数据源实现读写分离</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource; //写数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Object&gt; readDataSources; //多个读数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourceSize; //读数据源个数</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourcePollPattern = 0; //获取读数据源方式，0：随机，1：轮询</span><br><span class=\"line\"></span><br><span class=\"line\">    private AtomicLong counter = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Long MAX_POOL = Long.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterPropertiesSet() &#123;</span><br><span class=\"line\">        if (this.writeDataSource == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setDefaultTargetDataSource(writeDataSource);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class=\"line\">        if (this.readDataSources == null) &#123;</span><br><span class=\"line\">            readDataSourceSize = 0;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for(int i=0; i&lt;readDataSources.size(); i++) &#123;</span><br><span class=\"line\">                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i, readDataSources.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            readDataSourceSize = readDataSources.size();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        super.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object determineCurrentLookupKey() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        if(dynamicDataSourceGlobal == null</span><br><span class=\"line\">                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE</span><br><span class=\"line\">                || readDataSourceSize &lt;= 0) &#123;</span><br><span class=\"line\">            return DynamicDataSourceGlobal.WRITE.name();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(readDataSourcePollPattern == 1) &#123;</span><br><span class=\"line\">            //轮询方式</span><br><span class=\"line\">            long currValue = counter.incrementAndGet();</span><br><span class=\"line\">            if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                        counter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index = (int) (currValue % readDataSourceSize);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            //随机方式</span><br><span class=\"line\">            index = ThreadLocalRandom.current().nextInt(0, readDataSourceSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dynamicDataSourceGlobal.name() + index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSources(List&lt;Object&gt; readDataSources) &#123;</span><br><span class=\"line\">        this.readDataSources = readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) &#123;</span><br><span class=\"line\">        this.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import org.aspectj.lang.JoinPoint;</span><br><span class=\"line\">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-07 13:39</span><br><span class=\"line\"> * Desc: 定义选择数据源切面</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger logger = Logger.getLogger(DynamicDataSourceAspect.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void pointCut()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void before(JoinPoint point)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Object target = point.getTarget();</span><br><span class=\"line\">        String methodName = point.getSignature().getName();</span><br><span class=\"line\">        Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Method method = clazz[0].getMethod(methodName, parameterTypes);</span><br><span class=\"line\">            if (method != null &amp;&amp; method.isAnnotationPresent(DataSource.class)) &#123;</span><br><span class=\"line\">                DataSource data = method.getAnnotation(DataSource.class);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(data.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(String.format(&quot;Choose DataSource error, method:%s, msg:%s&quot;, methodName, e.getMessage()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void after(JoinPoint point) &#123;</span><br><span class=\"line\">        DynamicDataSourceHolder.clearDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/tx</span><br><span class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/aop</span><br><span class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead1&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read1.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read1.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read1.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead2&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read2.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read2.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read2.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.test.api.dao.datasource.DynamicDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSources&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead1&quot; /&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead2&quot; /&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">        &lt;!--轮询方式--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSourcePollPattern&quot; value=&quot;1&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;defaultTargetDataSource&quot; ref=&quot;dataSourceWrite&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 针对myBatis的配置项 --&gt;</span><br><span class=\"line\">    &lt;!-- 配置sqlSessionFactory --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置扫描器 --&gt;</span><br><span class=\"line\">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 扫描包以及它的子包下的所有映射接口类 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.test.api.dao.inte&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置数据库注解aop --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;dynamicDataSourceAspect&quot; class=&quot;com.test.api.dao.datasource.DynamicDataSourceAspect&quot; /&gt;</span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:aspect id=&quot;c&quot; ref=&quot;dynamicDataSourceAspect&quot;&gt;</span><br><span class=\"line\">            &lt;aop:pointcut id=&quot;tx&quot; expression=&quot;execution(* com.test.api.dao.inte..*.*(..))&quot;/&gt;</span><br><span class=\"line\">            &lt;aop:before pointcut-ref=&quot;tx&quot; method=&quot;before&quot;/&gt;</span><br><span class=\"line\">            &lt;aop:after pointcut-ref=&quot;tx&quot; method=&quot;after&quot;/&gt;</span><br><span class=\"line\">        &lt;/aop:aspect&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    &lt;!-- 配置数据库注解aop --&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案3\"><a href=\"#方案3\" class=\"headerlink\" title=\"方案3\"></a>方案3</h5><blockquote>\n<p>通过Mybatis的Plugin在业务层实现数据库读写分离，在MyBatis创建Statement对象前通过拦截器选择真正的数据源，在拦截器中根据方法名称不同（select、update、insert、delete）选择数据源。</p>\n</blockquote>\n<ul>\n<li>优点：原有代码不变，支持多读，易扩展</li>\n<li>缺点：</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-19 15:40</span><br><span class=\"line\"> * Desc: 创建Connection代理接口</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface ConnectionProxy extends Connection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据传入的读写分离需要的key路由到正确的connection</span><br><span class=\"line\">     * @param key 数据源标识</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Connection  getTargetConnection(String key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.reflect.InvocationHandler;</span><br><span class=\"line\">import java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Proxy;</span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.logging.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.InitializingBean;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.AbstractDataSource;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.lookup.DataSourceLookup;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;</span><br><span class=\"line\">import org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract class AbstractDynamicDataSourceProxy extends AbstractDataSource implements InitializingBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Object&gt; readDataSources;</span><br><span class=\"line\">    private List&lt;DataSource&gt; resolvedReadDataSources;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource;</span><br><span class=\"line\">    private DataSource resolvedWriteDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourcePollPattern = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDsSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean defaultAutoCommit = true;</span><br><span class=\"line\">    private int defaultTransactionIsolation = Connection.TRANSACTION_READ_COMMITTED;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String READ = &quot;read&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String WRITE = &quot;write&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private DataSourceLookup dataSourceLookup = new JndiDataSourceLookup();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Connection getConnection() throws SQLException &#123;</span><br><span class=\"line\">        return (Connection) Proxy.newProxyInstance(</span><br><span class=\"line\">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class=\"line\">                new Class[] &#123;com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class&#125;,</span><br><span class=\"line\">                new RWConnectionInvocationHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Connection getConnection(String username, String password)</span><br><span class=\"line\">            throws SQLException &#123;</span><br><span class=\"line\">        return (Connection) Proxy.newProxyInstance(</span><br><span class=\"line\">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class=\"line\">                new Class[] &#123;com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class&#125;,</span><br><span class=\"line\">                new RWConnectionInvocationHandler(username,password));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getReadDsSize()&#123;</span><br><span class=\"line\">        return readDsSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;DataSource&gt; getResolvedReadDataSources() &#123;</span><br><span class=\"line\">        return resolvedReadDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(writeDataSource == null)&#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.resolvedWriteDataSource = resolveSpecifiedDataSource(writeDataSource);</span><br><span class=\"line\"></span><br><span class=\"line\">        resolvedReadDataSources = new ArrayList&lt;DataSource&gt;(readDataSources.size());</span><br><span class=\"line\">        for(Object item : readDataSources)&#123;</span><br><span class=\"line\">            resolvedReadDataSources.add(resolveSpecifiedDataSource(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        readDsSize = readDataSources.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected DataSource determineTargetDataSource(String key) &#123;</span><br><span class=\"line\">        Assert.notNull(this.resolvedReadDataSources, &quot;DataSource router not initialized&quot;);</span><br><span class=\"line\">        if(WRITE.equals(key))&#123;</span><br><span class=\"line\">            return resolvedWriteDataSource;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return loadReadDataSource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Logger getParentLogger() &#123;</span><br><span class=\"line\">        // NOOP Just ignore</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取真实的data source</span><br><span class=\"line\">     * @param dataSource (jndi | real data source)</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws IllegalArgumentException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException &#123;</span><br><span class=\"line\">        if (dataSource instanceof DataSource) &#123;</span><br><span class=\"line\">            return (DataSource) dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (dataSource instanceof String) &#123;</span><br><span class=\"line\">            return this.dataSourceLookup.getDataSource((String) dataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(</span><br><span class=\"line\">                    &quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot; + dataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected abstract DataSource loadReadDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDsSize(int readDsSize) &#123;</span><br><span class=\"line\">        this.readDsSize = readDsSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Object&gt; getReadDataSources() &#123;</span><br><span class=\"line\">        return readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSources(List&lt;Object&gt; readDataSources) &#123;</span><br><span class=\"line\">        this.readDataSources = readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getWriteDataSource() &#123;</span><br><span class=\"line\">        return writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setResolvedReadDataSources(List&lt;DataSource&gt; resolvedReadDataSources) &#123;</span><br><span class=\"line\">        this.resolvedReadDataSources = resolvedReadDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DataSource getResolvedWriteDataSource() &#123;</span><br><span class=\"line\">        return resolvedWriteDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setResolvedWriteDataSource(DataSource resolvedWriteDataSource) &#123;</span><br><span class=\"line\">        this.resolvedWriteDataSource = resolvedWriteDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getReadDataSourcePollPattern() &#123;</span><br><span class=\"line\">        return readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) &#123;</span><br><span class=\"line\">        this.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Invocation handler that defers fetching an actual JDBC Connection</span><br><span class=\"line\">     * until first creation of a Statement.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private class RWConnectionInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private String username;</span><br><span class=\"line\"></span><br><span class=\"line\">        private String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Boolean readOnly = Boolean.FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Integer transactionIsolation;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Boolean autoCommit;</span><br><span class=\"line\"></span><br><span class=\"line\">        private boolean closed = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Connection target;</span><br><span class=\"line\"></span><br><span class=\"line\">        public RWConnectionInvocationHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public RWConnectionInvocationHandler(String username, String password) &#123;</span><br><span class=\"line\">            this();</span><br><span class=\"line\">            this.username = username;</span><br><span class=\"line\">            this.password = password;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">            // Invocation on ConnectionProxy interface coming in...</span><br><span class=\"line\"></span><br><span class=\"line\">            if (method.getName().equals(&quot;equals&quot;)) &#123;</span><br><span class=\"line\">                // We must avoid fetching a target Connection for &quot;equals&quot;.</span><br><span class=\"line\">                // Only consider equal when proxies are identical.</span><br><span class=\"line\">                return (proxy == args[0] ? Boolean.TRUE : Boolean.FALSE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (method.getName().equals(&quot;hashCode&quot;)) &#123;</span><br><span class=\"line\">                // We must avoid fetching a target Connection for &quot;hashCode&quot;,</span><br><span class=\"line\">                // and we must return the same hash code even when the target</span><br><span class=\"line\">                // Connection has been fetched: use hashCode of Connection proxy.</span><br><span class=\"line\">                return new Integer(System.identityHashCode(proxy));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (method.getName().equals(&quot;getTargetConnection&quot;)) &#123;</span><br><span class=\"line\">                // Handle getTargetConnection method: return underlying connection.</span><br><span class=\"line\">                return getTargetConnection(method,args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (!hasTargetConnection()) &#123;</span><br><span class=\"line\">                // No physical target Connection kept yet -&gt;</span><br><span class=\"line\">                // resolve transaction demarcation methods without fetching</span><br><span class=\"line\">                // a physical JDBC Connection until absolutely necessary.</span><br><span class=\"line\"></span><br><span class=\"line\">                if (method.getName().equals(&quot;toString&quot;)) &#123;</span><br><span class=\"line\">                    return &quot;RW Routing DataSource Proxy&quot;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;isReadOnly&quot;)) &#123;</span><br><span class=\"line\">                    return this.readOnly;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setReadOnly&quot;)) &#123;</span><br><span class=\"line\">                    this.readOnly = (Boolean) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getTransactionIsolation&quot;)) &#123;</span><br><span class=\"line\">                    if (this.transactionIsolation != null) &#123;</span><br><span class=\"line\">                        return this.transactionIsolation;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    return defaultTransactionIsolation;</span><br><span class=\"line\">                    // Else fetch actual Connection and check there,</span><br><span class=\"line\">                    // because we didn&apos;t have a default specified.</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setTransactionIsolation&quot;)) &#123;</span><br><span class=\"line\">                    this.transactionIsolation = (Integer) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getAutoCommit&quot;)) &#123;</span><br><span class=\"line\">                    if (this.autoCommit != null)</span><br><span class=\"line\">                        return this.autoCommit;</span><br><span class=\"line\">                    return defaultAutoCommit;</span><br><span class=\"line\">                    // Else fetch actual Connection and check there,</span><br><span class=\"line\">                    // because we didn&apos;t have a default specified.</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setAutoCommit&quot;)) &#123;</span><br><span class=\"line\">                    this.autoCommit = (Boolean) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;commit&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no statements created yet.</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;rollback&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no statements created yet.</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getWarnings&quot;)) &#123;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;clearWarnings&quot;)) &#123;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;isClosed&quot;)) &#123;</span><br><span class=\"line\">                    return (this.closed ? Boolean.TRUE : Boolean.FALSE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;close&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no target connection yet.</span><br><span class=\"line\">                    this.closed = true;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (this.closed) &#123;</span><br><span class=\"line\">                    // Connection proxy closed, without ever having fetched a</span><br><span class=\"line\">                    // physical JDBC Connection: throw corresponding SQLException.</span><br><span class=\"line\">                    throw new SQLException(&quot;Illegal operation: connection is closed&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Target Connection already fetched,</span><br><span class=\"line\">            // or target Connection necessary for current operation -&gt;</span><br><span class=\"line\">            // invoke method on target connection.</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return method.invoke(target, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (InvocationTargetException ex) &#123;</span><br><span class=\"line\">                throw ex.getTargetException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Return whether the proxy currently holds a target Connection.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private boolean hasTargetConnection() &#123;</span><br><span class=\"line\">            return (this.target != null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Return the target Connection, fetching it and initializing it if necessary.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private Connection getTargetConnection(Method operation,Object[] args) throws SQLException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (this.target == null) &#123;</span><br><span class=\"line\">                String key = (String) args[0];</span><br><span class=\"line\">                // No target Connection held -&gt; fetch one.</span><br><span class=\"line\">                if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(&quot;Connecting to database for operation &apos;&quot; + operation.getName() + &quot;&apos;&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // Fetch physical Connection from DataSource.</span><br><span class=\"line\">                this.target = (this.username != null) ?</span><br><span class=\"line\">                        determineTargetDataSource(key).getConnection(this.username, this.password) :</span><br><span class=\"line\">                        determineTargetDataSource(key).getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">                // If we still lack default connection properties, check them now.</span><br><span class=\"line\">                //checkDefaultConnectionProperties(this.target);</span><br><span class=\"line\"></span><br><span class=\"line\">                // Apply kept transaction settings, if any.</span><br><span class=\"line\">                if (this.readOnly.booleanValue()) &#123;</span><br><span class=\"line\">                    this.target.setReadOnly(this.readOnly.booleanValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (this.transactionIsolation != null) &#123;</span><br><span class=\"line\">                    this.target.setTransactionIsolation(this.transactionIsolation.intValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (this.autoCommit != null &amp;&amp; this.autoCommit.booleanValue() != this.target.getAutoCommit()) &#123;</span><br><span class=\"line\">                    this.target.setAutoCommit(this.autoCommit.booleanValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                // Target Connection already held -&gt; return it.</span><br><span class=\"line\">                if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(&quot;Using existing database connection for operation &apos;&quot; + operation.getName() + &quot;&apos;&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return this.target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import java.util.concurrent.locks.Lock;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-19 16:04</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicRoutingDataSourceProxy extends AbstractDynamicDataSourceProxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private AtomicLong counter = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Long MAX_POOL = Long.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected DataSource loadReadDataSource() &#123;</span><br><span class=\"line\">        int index = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(getReadDataSourcePollPattern() == 1) &#123;</span><br><span class=\"line\">            //轮询方式</span><br><span class=\"line\">            long currValue = counter.incrementAndGet();</span><br><span class=\"line\">            if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                        counter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index = (int) (currValue % getReadDsSize());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            //随机方式</span><br><span class=\"line\">            index = ThreadLocalRandom.current().nextInt(0, getReadDsSize());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return getResolvedReadDataSources().get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Intercepts(&#123; @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123; Connection.class &#125;) &#125;)</span><br><span class=\"line\">public class DynamicPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection conn = (Connection)invocation.getArgs()[0];</span><br><span class=\"line\">        //如果是采用了我们代理,则路由数据源</span><br><span class=\"line\">        if(conn instanceof com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy)&#123;</span><br><span class=\"line\">            StatementHandler statementHandler = (StatementHandler) invocation</span><br><span class=\"line\">                    .getTarget();</span><br><span class=\"line\"></span><br><span class=\"line\">            MappedStatement mappedStatement = null;</span><br><span class=\"line\">            if (statementHandler instanceof RoutingStatementHandler) &#123;</span><br><span class=\"line\">                StatementHandler delegate = (StatementHandler) ReflectionUtils</span><br><span class=\"line\">                        .getFieldValue(statementHandler, &quot;delegate&quot;);</span><br><span class=\"line\">                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(</span><br><span class=\"line\">                        delegate, &quot;mappedStatement&quot;);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(</span><br><span class=\"line\">                        statementHandler, &quot;mappedStatement&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(mappedStatement.getSqlCommandType() == SqlCommandType.SELECT)&#123;</span><br><span class=\"line\">                key = AbstractDynamicDataSourceProxy.READ;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ConnectionProxy connectionProxy = (ConnectionProxy)conn;</span><br><span class=\"line\">            connectionProxy.getTargetConnection(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return Plugin.wrap(target, this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        //NOOP</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.logging.Log;</span><br><span class=\"line\">import org.apache.ibatis.logging.LogFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ReflectionUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Log logger = LogFactory.getLog(ReflectionUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接设置对象属性值,无视private/protected修饰符,不经过setter函数.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void setFieldValue(final Object object, final String fieldName, final Object value) &#123;</span><br><span class=\"line\">        Field field = getDeclaredField(object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (field == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find field [&quot; + fieldName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        makeAccessible(field);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            field.set(object, value);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接读取对象属性值,无视private/protected修饰符,不经过getter函数.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Object getFieldValue(final Object object, final String fieldName) &#123;</span><br><span class=\"line\">        Field field = getDeclaredField(object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (field == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find field [&quot; + fieldName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        makeAccessible(field);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            result = field.get(object);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接调用对象方法,无视private/protected修饰符.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Object invokeMethod(final Object object, final String methodName, final Class&lt;?&gt;[] parameterTypes,</span><br><span class=\"line\">            final Object[] parameters) throws InvocationTargetException &#123;</span><br><span class=\"line\">        Method method = getDeclaredMethod(object, methodName, parameterTypes);</span><br><span class=\"line\">        if (method == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find method [&quot; + methodName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        method.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return method.invoke(object, parameters);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredField.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static Field getDeclaredField(final Object object, final String fieldName) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass</span><br><span class=\"line\">                .getSuperclass()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return superClass.getDeclaredField(fieldName);</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredField.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static void makeAccessible(final Field field) &#123;</span><br><span class=\"line\">        if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) &#123;</span><br><span class=\"line\">            field.setAccessible(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredMethod.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static Method getDeclaredMethod(Object object, String methodName, Class&lt;?&gt;[] parameterTypes) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass</span><br><span class=\"line\">                .getSuperclass()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return superClass.getDeclaredMethod(methodName, parameterTypes);</span><br><span class=\"line\">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.</span><br><span class=\"line\">     * eg.</span><br><span class=\"line\">     * public UserDao extends HibernateDao&lt;User&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz The class to introspect</span><br><span class=\"line\">     * @return the first generic declaration, or Object.class if cannot be determined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; Class&lt;T&gt; getSuperClassGenricType(final Class clazz) &#123;</span><br><span class=\"line\">        return getSuperClassGenricType(clazz, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.</span><br><span class=\"line\">     * eg.</span><br><span class=\"line\">     * public UserDao extends HibernateDao&lt;User&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz The class to introspect</span><br><span class=\"line\">     * @return the first generic declaration, or Object.class if cannot be determined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static Class getSuperClassGenricType(final Class clazz, final int index) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Type genType = clazz.getGenericSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!(genType instanceof ParameterizedType)) &#123;</span><br><span class=\"line\">            logger.warn(clazz.getSimpleName() + &quot;&apos;s superclass not ParameterizedType&quot;);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (index &gt;= params.length || index &lt; 0) &#123;</span><br><span class=\"line\">            logger.warn(&quot;Index: &quot; + index + &quot;, Size of &quot; + clazz.getSimpleName() + &quot;&apos;s Parameterized Type: &quot;</span><br><span class=\"line\">                    + params.length);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!(params[index] instanceof Class)) &#123;</span><br><span class=\"line\">            logger.warn(clazz.getSimpleName() + &quot; not set the actual class on superclass generic parameter&quot;);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (Class) params[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将反射时的checked exception转换为unchecked exception.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static IllegalArgumentException convertToUncheckedException(Exception e) &#123;</span><br><span class=\"line\">        if (e instanceof IllegalAccessException || e instanceof IllegalArgumentException</span><br><span class=\"line\">                || e instanceof NoSuchMethodException)</span><br><span class=\"line\">            return new IllegalArgumentException(&quot;Refelction Exception.&quot;, e);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            return new IllegalArgumentException(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;  </span><br><span class=\"line\">    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin interceptor=&quot;com.test.api.dao.mybatis.DynamicPlugin&quot;&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/tx</span><br><span class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/aop</span><br><span class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead1&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read1.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read1.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read1.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead2&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read2.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read2.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read2.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.test.api.dao.datasource.DynamicRoutingDataSourceProxy&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSources&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead1&quot; /&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead2&quot; /&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">        &lt;!--轮询方式--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSourcePollPattern&quot; value=&quot;1&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 针对myBatis的配置项 --&gt;</span><br><span class=\"line\">    &lt;!-- 配置sqlSessionFactory --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-plugin-config.xml&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class=\"line\">        &lt;constructor-arg ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    &lt;!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类--&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;mapper&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.test.api.dao.inte&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;sqlSessionTemplate&quot; ref=&quot;sqlSessionTemplate&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案4\"><a href=\"#方案4\" class=\"headerlink\" title=\"方案4\"></a>方案4</h5><blockquote>\n<p>如果你的后台结构是spring+mybatis，可以通过spring的AbstractRoutingDataSource和mybatis Plugin拦截器实现非常友好的读写分离，原有代码不需要任何改变。推荐第四种方案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:56</span><br><span class=\"line\"> * Desc: 动态数据源实现读写分离</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource; //写数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object readDataSource; //读数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterPropertiesSet() &#123;</span><br><span class=\"line\">        if (this.writeDataSource == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setDefaultTargetDataSource(writeDataSource);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class=\"line\">        if(readDataSource != null) &#123;</span><br><span class=\"line\">            targetDataSources.put(DynamicDataSourceGlobal.READ.name(), readDataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        super.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object determineCurrentLookupKey() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        if(dynamicDataSourceGlobal == null</span><br><span class=\"line\">                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE) &#123;</span><br><span class=\"line\">            return DynamicDataSourceGlobal.WRITE.name();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return DynamicDataSourceGlobal.READ.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getWriteDataSource() &#123;</span><br><span class=\"line\">        return writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getReadDataSource() &#123;</span><br><span class=\"line\">        return readDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSource(Object readDataSource) &#123;</span><br><span class=\"line\">        this.readDataSource = readDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:58</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public enum DynamicDataSourceGlobal &#123;</span><br><span class=\"line\">    READ, WRITE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class DynamicDataSourceHolder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = new ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    private DynamicDataSourceHolder() &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void putDataSource(DynamicDataSourceGlobal dataSource)&#123;</span><br><span class=\"line\">        holder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static DynamicDataSourceGlobal getDataSource()&#123;</span><br><span class=\"line\">        return holder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void clearDataSource() &#123;</span><br><span class=\"line\">        holder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\">import org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-08-10 14:34</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceTransactionManager extends DataSourceTransactionManager &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 只读事务到读库，读写事务到写库</span><br><span class=\"line\">     * @param transaction</span><br><span class=\"line\">     * @param definition</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置数据源</span><br><span class=\"line\">        boolean readOnly = definition.isReadOnly();</span><br><span class=\"line\">        if(readOnly) &#123;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.READ);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.WRITE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        super.doBegin(transaction, definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 清理本地线程的数据源</span><br><span class=\"line\">     * @param transaction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doCleanupAfterCompletion(Object transaction) &#123;</span><br><span class=\"line\">        super.doCleanupAfterCompletion(transaction);</span><br><span class=\"line\">        DynamicDataSourceHolder.clearDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.Executor;</span><br><span class=\"line\">import org.apache.ibatis.executor.keygen.SelectKeyGenerator;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\">import org.apache.ibatis.session.ResultHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.RowBounds;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Locale;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-08-10 11:09</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Intercepts(&#123;</span><br><span class=\"line\">@Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;</span><br><span class=\"line\">        MappedStatement.class, Object.class &#125;),</span><br><span class=\"line\">@Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;</span><br><span class=\"line\">        MappedStatement.class, Object.class, RowBounds.class,</span><br><span class=\"line\">        ResultHandler.class &#125;) &#125;)</span><br><span class=\"line\">public class DynamicPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static final Logger logger = LoggerFactory.getLogger(DynamicPlugin.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String REGEX = &quot;.*insert\\\\u0020.*|.*delete\\\\u0020.*|.*update\\\\u0020.*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Map&lt;String, DynamicDataSourceGlobal&gt; cacheMap = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class=\"line\">        if(!synchronizationActive) &#123;</span><br><span class=\"line\">            Object[] objects = invocation.getArgs();</span><br><span class=\"line\">            MappedStatement ms = (MappedStatement) objects[0];</span><br><span class=\"line\"></span><br><span class=\"line\">            DynamicDataSourceGlobal dynamicDataSourceGlobal = null;</span><br><span class=\"line\"></span><br><span class=\"line\">            if((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == null) &#123;</span><br><span class=\"line\">                //读方法</span><br><span class=\"line\">                if(ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class=\"line\">                    //!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库</span><br><span class=\"line\">                    if(ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</span><br><span class=\"line\">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[1]);</span><br><span class=\"line\">                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(&quot;[\\\\t\\\\n\\\\r]&quot;, &quot; &quot;);</span><br><span class=\"line\">                        if(sql.matches(REGEX)) &#123;</span><br><span class=\"line\">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                logger.warn(&quot;设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;&#125;]..&quot;, ms.getId(), dynamicDataSourceGlobal.name(), ms.getSqlCommandType().name());</span><br><span class=\"line\">                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return invocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\">        if (target instanceof Executor) &#123;</span><br><span class=\"line\">            return Plugin.wrap(target, this);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>spring-db.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/aop </span><br><span class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd </span><br><span class=\"line\">        http://www.springframework.org/schema/tx </span><br><span class=\"line\">  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 数据库连接池 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">\t \t&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxActive&quot; value=&quot;$&#123;jdbc.max_active&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initial_size&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWait&quot; value=&quot;$&#123;jdbc.max_wait&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;jdbc.min_idle&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;3000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=&quot;dataSourceRead&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.read.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.read.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.read.password&#125;&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.ocean.common.DynamicDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSource&quot; ref=&quot;dataSourceRead&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;defaultTargetDataSource&quot; ref=&quot;dataSourceWrite&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;com.ocean.common.DynamicDataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tproxy-target-class=&quot;true&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis/mybatis-configuration.xml&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/mybatis/mapper/*.xml&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;basePackage&quot; value=&quot;com.ocean.dao&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p><strong><em>mybatis-configuration.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\"> &lt;settings&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;FULL&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25000&quot; /&gt;</span><br><span class=\"line\"> &lt;/settings&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;plugins&gt;</span><br><span class=\"line\">   &lt;plugin interceptor=&quot;com.ocean.common.DynamicPlugin&quot;&gt;</span><br><span class=\"line\">   &lt;/plugin&gt;</span><br><span class=\"line\"> &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>本文转自<a href=\"http://www.jianshu.com/p/2222257f96d3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2222257f96d3</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p> 推荐第四种：<a href=\"https://github.com/shawntime/shawn-rwdb\" target=\"_blank\" rel=\"noopener\">https://github.com/shawntime/shawn-rwdb</a></p>\n<h5 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a>方案1</h5><blockquote>\n<p>通过MyBatis配置文件创建读写分离两个DataSource，每个SqlSessionFactoryBean对象的mapperLocations属性制定两个读写数据源的配置文件。将所有读的操作配置在读文件中，所有写的操作配置在写文件中。</p>\n</blockquote>\n<ul>\n<li>优点：实现简单</li>\n<li>缺点：维护麻烦，需要对原有的xml文件进行重新修改，不支持多读，不易扩展</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot;</span><br><span class=\"line\">      destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;readDataSource&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot; value=&quot;$&#123;read.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot; value=&quot;$&#123;read.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot; value=&quot;$&#123;read.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minIdle&quot; value=&quot;10&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;writeDataSource&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;minIdle&quot; value=&quot;10&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;readSqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;readDataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/read/*.xml&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;writeSqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;dataSource&quot; ref=&quot;writeDataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/write/*.xml&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a>方案2</h5><blockquote>\n<p>通过Spring AOP在业务层实现读写分离，在DAO层调用前定义切面，利用Spring的AbstractRoutingDataSource解决多数据源的问题，实现动态选择数据源</p>\n</blockquote>\n<ul>\n<li>优点：通过注解的方法在DAO每个方法上配置数据源，原有代码改动量少，易扩展，支持多读</li>\n<li>缺点：需要在DAO每个方法上配置注解，人工管理，容易出错</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义枚举类型，读写</span><br><span class=\"line\">public enum DynamicDataSourceGlobal &#123;</span><br><span class=\"line\">    READ, WRITE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * RUNTIME</span><br><span class=\"line\"> * 定义注解</span><br><span class=\"line\"> * 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。</span><br><span class=\"line\"> * @author shma1664</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">public @interface DataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DynamicDataSourceGlobal value() default DynamicDataSourceGlobal.READ;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * 本地线程设置和获取数据源信息</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-07 13:35</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceHolder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = new ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void putDataSource(DynamicDataSourceGlobal dataSource)&#123;</span><br><span class=\"line\">        holder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static DynamicDataSourceGlobal getDataSource()&#123;</span><br><span class=\"line\">        return holder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void clearDataSource() &#123;</span><br><span class=\"line\">        holder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import java.util.concurrent.locks.Lock;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:56</span><br><span class=\"line\"> * Desc: 动态数据源实现读写分离</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource; //写数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Object&gt; readDataSources; //多个读数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourceSize; //读数据源个数</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourcePollPattern = 0; //获取读数据源方式，0：随机，1：轮询</span><br><span class=\"line\"></span><br><span class=\"line\">    private AtomicLong counter = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Long MAX_POOL = Long.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterPropertiesSet() &#123;</span><br><span class=\"line\">        if (this.writeDataSource == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setDefaultTargetDataSource(writeDataSource);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class=\"line\">        if (this.readDataSources == null) &#123;</span><br><span class=\"line\">            readDataSourceSize = 0;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            for(int i=0; i&lt;readDataSources.size(); i++) &#123;</span><br><span class=\"line\">                targetDataSources.put(DynamicDataSourceGlobal.READ.name() + i, readDataSources.get(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            readDataSourceSize = readDataSources.size();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        super.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object determineCurrentLookupKey() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        if(dynamicDataSourceGlobal == null</span><br><span class=\"line\">                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE</span><br><span class=\"line\">                || readDataSourceSize &lt;= 0) &#123;</span><br><span class=\"line\">            return DynamicDataSourceGlobal.WRITE.name();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(readDataSourcePollPattern == 1) &#123;</span><br><span class=\"line\">            //轮询方式</span><br><span class=\"line\">            long currValue = counter.incrementAndGet();</span><br><span class=\"line\">            if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                        counter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index = (int) (currValue % readDataSourceSize);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            //随机方式</span><br><span class=\"line\">            index = ThreadLocalRandom.current().nextInt(0, readDataSourceSize);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dynamicDataSourceGlobal.name() + index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSources(List&lt;Object&gt; readDataSources) &#123;</span><br><span class=\"line\">        this.readDataSources = readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) &#123;</span><br><span class=\"line\">        this.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import org.aspectj.lang.JoinPoint;</span><br><span class=\"line\">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-07 13:39</span><br><span class=\"line\"> * Desc: 定义选择数据源切面</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Logger logger = Logger.getLogger(DynamicDataSourceAspect.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void pointCut()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void before(JoinPoint point)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Object target = point.getTarget();</span><br><span class=\"line\">        String methodName = point.getSignature().getName();</span><br><span class=\"line\">        Class&lt;?&gt;[] clazz = target.getClass().getInterfaces();</span><br><span class=\"line\">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) point.getSignature()).getMethod().getParameterTypes();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Method method = clazz[0].getMethod(methodName, parameterTypes);</span><br><span class=\"line\">            if (method != null &amp;&amp; method.isAnnotationPresent(DataSource.class)) &#123;</span><br><span class=\"line\">                DataSource data = method.getAnnotation(DataSource.class);</span><br><span class=\"line\">                DynamicDataSourceHolder.putDataSource(data.value());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(String.format(&quot;Choose DataSource error, method:%s, msg:%s&quot;, methodName, e.getMessage()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void after(JoinPoint point) &#123;</span><br><span class=\"line\">        DynamicDataSourceHolder.clearDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/tx</span><br><span class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/aop</span><br><span class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead1&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read1.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read1.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read1.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead2&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read2.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read2.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read2.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.test.api.dao.datasource.DynamicDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSources&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead1&quot; /&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead2&quot; /&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">        &lt;!--轮询方式--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSourcePollPattern&quot; value=&quot;1&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;defaultTargetDataSource&quot; ref=&quot;dataSourceWrite&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 针对myBatis的配置项 --&gt;</span><br><span class=\"line\">    &lt;!-- 配置sqlSessionFactory --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置扫描器 --&gt;</span><br><span class=\"line\">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 扫描包以及它的子包下的所有映射接口类 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.test.api.dao.inte&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 配置数据库注解aop --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;dynamicDataSourceAspect&quot; class=&quot;com.test.api.dao.datasource.DynamicDataSourceAspect&quot; /&gt;</span><br><span class=\"line\">    &lt;aop:config&gt;</span><br><span class=\"line\">        &lt;aop:aspect id=&quot;c&quot; ref=&quot;dynamicDataSourceAspect&quot;&gt;</span><br><span class=\"line\">            &lt;aop:pointcut id=&quot;tx&quot; expression=&quot;execution(* com.test.api.dao.inte..*.*(..))&quot;/&gt;</span><br><span class=\"line\">            &lt;aop:before pointcut-ref=&quot;tx&quot; method=&quot;before&quot;/&gt;</span><br><span class=\"line\">            &lt;aop:after pointcut-ref=&quot;tx&quot; method=&quot;after&quot;/&gt;</span><br><span class=\"line\">        &lt;/aop:aspect&gt;</span><br><span class=\"line\">    &lt;/aop:config&gt;</span><br><span class=\"line\">    &lt;!-- 配置数据库注解aop --&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案3\"><a href=\"#方案3\" class=\"headerlink\" title=\"方案3\"></a>方案3</h5><blockquote>\n<p>通过Mybatis的Plugin在业务层实现数据库读写分离，在MyBatis创建Statement对象前通过拦截器选择真正的数据源，在拦截器中根据方法名称不同（select、update、insert、delete）选择数据源。</p>\n</blockquote>\n<ul>\n<li>优点：原有代码不变，支持多读，易扩展</li>\n<li>缺点：</li>\n<li>实现方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-19 15:40</span><br><span class=\"line\"> * Desc: 创建Connection代理接口</span><br><span class=\"line\"> */</span><br><span class=\"line\">public interface ConnectionProxy extends Connection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据传入的读写分离需要的key路由到正确的connection</span><br><span class=\"line\">     * @param key 数据源标识</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Connection  getTargetConnection(String key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.reflect.InvocationHandler;</span><br><span class=\"line\">import java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.lang.reflect.Proxy;</span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.logging.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.InitializingBean;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.AbstractDataSource;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.lookup.DataSourceLookup;</span><br><span class=\"line\">import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;</span><br><span class=\"line\">import org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract class AbstractDynamicDataSourceProxy extends AbstractDataSource implements InitializingBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;Object&gt; readDataSources;</span><br><span class=\"line\">    private List&lt;DataSource&gt; resolvedReadDataSources;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource;</span><br><span class=\"line\">    private DataSource resolvedWriteDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDataSourcePollPattern = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int readDsSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean defaultAutoCommit = true;</span><br><span class=\"line\">    private int defaultTransactionIsolation = Connection.TRANSACTION_READ_COMMITTED;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String READ = &quot;read&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String WRITE = &quot;write&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private DataSourceLookup dataSourceLookup = new JndiDataSourceLookup();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Connection getConnection() throws SQLException &#123;</span><br><span class=\"line\">        return (Connection) Proxy.newProxyInstance(</span><br><span class=\"line\">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class=\"line\">                new Class[] &#123;com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class&#125;,</span><br><span class=\"line\">                new RWConnectionInvocationHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Connection getConnection(String username, String password)</span><br><span class=\"line\">            throws SQLException &#123;</span><br><span class=\"line\">        return (Connection) Proxy.newProxyInstance(</span><br><span class=\"line\">                com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class.getClassLoader(),</span><br><span class=\"line\">                new Class[] &#123;com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy.class&#125;,</span><br><span class=\"line\">                new RWConnectionInvocationHandler(username,password));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getReadDsSize()&#123;</span><br><span class=\"line\">        return readDsSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;DataSource&gt; getResolvedReadDataSources() &#123;</span><br><span class=\"line\">        return resolvedReadDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(writeDataSource == null)&#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.resolvedWriteDataSource = resolveSpecifiedDataSource(writeDataSource);</span><br><span class=\"line\"></span><br><span class=\"line\">        resolvedReadDataSources = new ArrayList&lt;DataSource&gt;(readDataSources.size());</span><br><span class=\"line\">        for(Object item : readDataSources)&#123;</span><br><span class=\"line\">            resolvedReadDataSources.add(resolveSpecifiedDataSource(item));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        readDsSize = readDataSources.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected DataSource determineTargetDataSource(String key) &#123;</span><br><span class=\"line\">        Assert.notNull(this.resolvedReadDataSources, &quot;DataSource router not initialized&quot;);</span><br><span class=\"line\">        if(WRITE.equals(key))&#123;</span><br><span class=\"line\">            return resolvedWriteDataSource;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return loadReadDataSource();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Logger getParentLogger() &#123;</span><br><span class=\"line\">        // NOOP Just ignore</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取真实的data source</span><br><span class=\"line\">     * @param dataSource (jndi | real data source)</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     * @throws IllegalArgumentException</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException &#123;</span><br><span class=\"line\">        if (dataSource instanceof DataSource) &#123;</span><br><span class=\"line\">            return (DataSource) dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (dataSource instanceof String) &#123;</span><br><span class=\"line\">            return this.dataSourceLookup.getDataSource((String) dataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(</span><br><span class=\"line\">                    &quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot; + dataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected abstract DataSource loadReadDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDsSize(int readDsSize) &#123;</span><br><span class=\"line\">        this.readDsSize = readDsSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public List&lt;Object&gt; getReadDataSources() &#123;</span><br><span class=\"line\">        return readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSources(List&lt;Object&gt; readDataSources) &#123;</span><br><span class=\"line\">        this.readDataSources = readDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getWriteDataSource() &#123;</span><br><span class=\"line\">        return writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setResolvedReadDataSources(List&lt;DataSource&gt; resolvedReadDataSources) &#123;</span><br><span class=\"line\">        this.resolvedReadDataSources = resolvedReadDataSources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DataSource getResolvedWriteDataSource() &#123;</span><br><span class=\"line\">        return resolvedWriteDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setResolvedWriteDataSource(DataSource resolvedWriteDataSource) &#123;</span><br><span class=\"line\">        this.resolvedWriteDataSource = resolvedWriteDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getReadDataSourcePollPattern() &#123;</span><br><span class=\"line\">        return readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSourcePollPattern(int readDataSourcePollPattern) &#123;</span><br><span class=\"line\">        this.readDataSourcePollPattern = readDataSourcePollPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Invocation handler that defers fetching an actual JDBC Connection</span><br><span class=\"line\">     * until first creation of a Statement.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private class RWConnectionInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private String username;</span><br><span class=\"line\"></span><br><span class=\"line\">        private String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Boolean readOnly = Boolean.FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Integer transactionIsolation;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Boolean autoCommit;</span><br><span class=\"line\"></span><br><span class=\"line\">        private boolean closed = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        private Connection target;</span><br><span class=\"line\"></span><br><span class=\"line\">        public RWConnectionInvocationHandler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public RWConnectionInvocationHandler(String username, String password) &#123;</span><br><span class=\"line\">            this();</span><br><span class=\"line\">            this.username = username;</span><br><span class=\"line\">            this.password = password;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">            // Invocation on ConnectionProxy interface coming in...</span><br><span class=\"line\"></span><br><span class=\"line\">            if (method.getName().equals(&quot;equals&quot;)) &#123;</span><br><span class=\"line\">                // We must avoid fetching a target Connection for &quot;equals&quot;.</span><br><span class=\"line\">                // Only consider equal when proxies are identical.</span><br><span class=\"line\">                return (proxy == args[0] ? Boolean.TRUE : Boolean.FALSE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (method.getName().equals(&quot;hashCode&quot;)) &#123;</span><br><span class=\"line\">                // We must avoid fetching a target Connection for &quot;hashCode&quot;,</span><br><span class=\"line\">                // and we must return the same hash code even when the target</span><br><span class=\"line\">                // Connection has been fetched: use hashCode of Connection proxy.</span><br><span class=\"line\">                return new Integer(System.identityHashCode(proxy));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if (method.getName().equals(&quot;getTargetConnection&quot;)) &#123;</span><br><span class=\"line\">                // Handle getTargetConnection method: return underlying connection.</span><br><span class=\"line\">                return getTargetConnection(method,args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (!hasTargetConnection()) &#123;</span><br><span class=\"line\">                // No physical target Connection kept yet -&gt;</span><br><span class=\"line\">                // resolve transaction demarcation methods without fetching</span><br><span class=\"line\">                // a physical JDBC Connection until absolutely necessary.</span><br><span class=\"line\"></span><br><span class=\"line\">                if (method.getName().equals(&quot;toString&quot;)) &#123;</span><br><span class=\"line\">                    return &quot;RW Routing DataSource Proxy&quot;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;isReadOnly&quot;)) &#123;</span><br><span class=\"line\">                    return this.readOnly;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setReadOnly&quot;)) &#123;</span><br><span class=\"line\">                    this.readOnly = (Boolean) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getTransactionIsolation&quot;)) &#123;</span><br><span class=\"line\">                    if (this.transactionIsolation != null) &#123;</span><br><span class=\"line\">                        return this.transactionIsolation;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    return defaultTransactionIsolation;</span><br><span class=\"line\">                    // Else fetch actual Connection and check there,</span><br><span class=\"line\">                    // because we didn&apos;t have a default specified.</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setTransactionIsolation&quot;)) &#123;</span><br><span class=\"line\">                    this.transactionIsolation = (Integer) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getAutoCommit&quot;)) &#123;</span><br><span class=\"line\">                    if (this.autoCommit != null)</span><br><span class=\"line\">                        return this.autoCommit;</span><br><span class=\"line\">                    return defaultAutoCommit;</span><br><span class=\"line\">                    // Else fetch actual Connection and check there,</span><br><span class=\"line\">                    // because we didn&apos;t have a default specified.</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;setAutoCommit&quot;)) &#123;</span><br><span class=\"line\">                    this.autoCommit = (Boolean) args[0];</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;commit&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no statements created yet.</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;rollback&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no statements created yet.</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;getWarnings&quot;)) &#123;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;clearWarnings&quot;)) &#123;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;isClosed&quot;)) &#123;</span><br><span class=\"line\">                    return (this.closed ? Boolean.TRUE : Boolean.FALSE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (method.getName().equals(&quot;close&quot;)) &#123;</span><br><span class=\"line\">                    // Ignore: no target connection yet.</span><br><span class=\"line\">                    this.closed = true;</span><br><span class=\"line\">                    return null;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else if (this.closed) &#123;</span><br><span class=\"line\">                    // Connection proxy closed, without ever having fetched a</span><br><span class=\"line\">                    // physical JDBC Connection: throw corresponding SQLException.</span><br><span class=\"line\">                    throw new SQLException(&quot;Illegal operation: connection is closed&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // Target Connection already fetched,</span><br><span class=\"line\">            // or target Connection necessary for current operation -&gt;</span><br><span class=\"line\">            // invoke method on target connection.</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return method.invoke(target, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (InvocationTargetException ex) &#123;</span><br><span class=\"line\">                throw ex.getTargetException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Return whether the proxy currently holds a target Connection.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private boolean hasTargetConnection() &#123;</span><br><span class=\"line\">            return (this.target != null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * Return the target Connection, fetching it and initializing it if necessary.</span><br><span class=\"line\">         */</span><br><span class=\"line\">        private Connection getTargetConnection(Method operation,Object[] args) throws SQLException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (this.target == null) &#123;</span><br><span class=\"line\">                String key = (String) args[0];</span><br><span class=\"line\">                // No target Connection held -&gt; fetch one.</span><br><span class=\"line\">                if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(&quot;Connecting to database for operation &apos;&quot; + operation.getName() + &quot;&apos;&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                // Fetch physical Connection from DataSource.</span><br><span class=\"line\">                this.target = (this.username != null) ?</span><br><span class=\"line\">                        determineTargetDataSource(key).getConnection(this.username, this.password) :</span><br><span class=\"line\">                        determineTargetDataSource(key).getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">                // If we still lack default connection properties, check them now.</span><br><span class=\"line\">                //checkDefaultConnectionProperties(this.target);</span><br><span class=\"line\"></span><br><span class=\"line\">                // Apply kept transaction settings, if any.</span><br><span class=\"line\">                if (this.readOnly.booleanValue()) &#123;</span><br><span class=\"line\">                    this.target.setReadOnly(this.readOnly.booleanValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (this.transactionIsolation != null) &#123;</span><br><span class=\"line\">                    this.target.setTransactionIsolation(this.transactionIsolation.intValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (this.autoCommit != null &amp;&amp; this.autoCommit.booleanValue() != this.target.getAutoCommit()) &#123;</span><br><span class=\"line\">                    this.target.setAutoCommit(this.autoCommit.booleanValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                // Target Connection already held -&gt; return it.</span><br><span class=\"line\">                if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(&quot;Using existing database connection for operation &apos;&quot; + operation.getName() + &quot;&apos;&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return this.target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\">import java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\">import java.util.concurrent.locks.Lock;</span><br><span class=\"line\">import java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-19 16:04</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicRoutingDataSourceProxy extends AbstractDynamicDataSourceProxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private AtomicLong counter = new AtomicLong(0);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Long MAX_POOL = Long.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Lock lock = new ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected DataSource loadReadDataSource() &#123;</span><br><span class=\"line\">        int index = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(getReadDataSourcePollPattern() == 1) &#123;</span><br><span class=\"line\">            //轮询方式</span><br><span class=\"line\">            long currValue = counter.incrementAndGet();</span><br><span class=\"line\">            if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    if((currValue + 1) &gt;= MAX_POOL) &#123;</span><br><span class=\"line\">                        counter.set(0);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index = (int) (currValue % getReadDsSize());</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            //随机方式</span><br><span class=\"line\">            index = ThreadLocalRandom.current().nextInt(0, getReadDsSize());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return getResolvedReadDataSources().get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.statement.RoutingStatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 拦截器</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Intercepts(&#123; @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123; Connection.class &#125;) &#125;)</span><br><span class=\"line\">public class DynamicPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection conn = (Connection)invocation.getArgs()[0];</span><br><span class=\"line\">        //如果是采用了我们代理,则路由数据源</span><br><span class=\"line\">        if(conn instanceof com.autohome.api.dealer.tuan.dao.rwmybatis.ConnectionProxy)&#123;</span><br><span class=\"line\">            StatementHandler statementHandler = (StatementHandler) invocation</span><br><span class=\"line\">                    .getTarget();</span><br><span class=\"line\"></span><br><span class=\"line\">            MappedStatement mappedStatement = null;</span><br><span class=\"line\">            if (statementHandler instanceof RoutingStatementHandler) &#123;</span><br><span class=\"line\">                StatementHandler delegate = (StatementHandler) ReflectionUtils</span><br><span class=\"line\">                        .getFieldValue(statementHandler, &quot;delegate&quot;);</span><br><span class=\"line\">                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(</span><br><span class=\"line\">                        delegate, &quot;mappedStatement&quot;);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                mappedStatement = (MappedStatement) ReflectionUtils.getFieldValue(</span><br><span class=\"line\">                        statementHandler, &quot;mappedStatement&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(mappedStatement.getSqlCommandType() == SqlCommandType.SELECT)&#123;</span><br><span class=\"line\">                key = AbstractDynamicDataSourceProxy.READ;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                key = AbstractDynamicDataSourceProxy.WRITE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ConnectionProxy connectionProxy = (ConnectionProxy)conn;</span><br><span class=\"line\">            connectionProxy.getTargetConnection(key);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return Plugin.wrap(target, this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        //NOOP</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.logging.Log;</span><br><span class=\"line\">import org.apache.ibatis.logging.LogFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ReflectionUtils &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Log logger = LogFactory.getLog(ReflectionUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接设置对象属性值,无视private/protected修饰符,不经过setter函数.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void setFieldValue(final Object object, final String fieldName, final Object value) &#123;</span><br><span class=\"line\">        Field field = getDeclaredField(object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (field == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find field [&quot; + fieldName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        makeAccessible(field);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            field.set(object, value);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接读取对象属性值,无视private/protected修饰符,不经过getter函数.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Object getFieldValue(final Object object, final String fieldName) &#123;</span><br><span class=\"line\">        Field field = getDeclaredField(object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (field == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find field [&quot; + fieldName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        makeAccessible(field);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object result = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            result = field.get(object);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 直接调用对象方法,无视private/protected修饰符.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Object invokeMethod(final Object object, final String methodName, final Class&lt;?&gt;[] parameterTypes,</span><br><span class=\"line\">            final Object[] parameters) throws InvocationTargetException &#123;</span><br><span class=\"line\">        Method method = getDeclaredMethod(object, methodName, parameterTypes);</span><br><span class=\"line\">        if (method == null)</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Could not find method [&quot; + methodName + &quot;] on target [&quot; + object + &quot;]&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        method.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            return method.invoke(object, parameters);</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredField.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static Field getDeclaredField(final Object object, final String fieldName) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass</span><br><span class=\"line\">                .getSuperclass()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return superClass.getDeclaredField(fieldName);</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredField.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static void makeAccessible(final Field field) &#123;</span><br><span class=\"line\">        if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) &#123;</span><br><span class=\"line\">            field.setAccessible(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 循环向上转型,获取对象的DeclaredMethod.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static Method getDeclaredMethod(Object object, String methodName, Class&lt;?&gt;[] parameterTypes) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass</span><br><span class=\"line\">                .getSuperclass()) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                return superClass.getDeclaredMethod(methodName, parameterTypes);</span><br><span class=\"line\">            &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.</span><br><span class=\"line\">     * eg.</span><br><span class=\"line\">     * public UserDao extends HibernateDao&lt;User&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz The class to introspect</span><br><span class=\"line\">     * @return the first generic declaration, or Object.class if cannot be determined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; Class&lt;T&gt; getSuperClassGenricType(final Class clazz) &#123;</span><br><span class=\"line\">        return getSuperClassGenricType(clazz, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过反射,获得Class定义中声明的父类的泛型参数的类型.</span><br><span class=\"line\">     * eg.</span><br><span class=\"line\">     * public UserDao extends HibernateDao&lt;User&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param clazz The class to introspect</span><br><span class=\"line\">     * @return the first generic declaration, or Object.class if cannot be determined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static Class getSuperClassGenricType(final Class clazz, final int index) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Type genType = clazz.getGenericSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!(genType instanceof ParameterizedType)) &#123;</span><br><span class=\"line\">            logger.warn(clazz.getSimpleName() + &quot;&apos;s superclass not ParameterizedType&quot;);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (index &gt;= params.length || index &lt; 0) &#123;</span><br><span class=\"line\">            logger.warn(&quot;Index: &quot; + index + &quot;, Size of &quot; + clazz.getSimpleName() + &quot;&apos;s Parameterized Type: &quot;</span><br><span class=\"line\">                    + params.length);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!(params[index] instanceof Class)) &#123;</span><br><span class=\"line\">            logger.warn(clazz.getSimpleName() + &quot; not set the actual class on superclass generic parameter&quot;);</span><br><span class=\"line\">            return Object.class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (Class) params[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 将反射时的checked exception转换为unchecked exception.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static IllegalArgumentException convertToUncheckedException(Exception e) &#123;</span><br><span class=\"line\">        if (e instanceof IllegalAccessException || e instanceof IllegalArgumentException</span><br><span class=\"line\">                || e instanceof NoSuchMethodException)</span><br><span class=\"line\">            return new IllegalArgumentException(&quot;Refelction Exception.&quot;, e);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            return new IllegalArgumentException(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;  </span><br><span class=\"line\">    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin interceptor=&quot;com.test.api.dao.mybatis.DynamicPlugin&quot;&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class=\"line\">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/tx</span><br><span class=\"line\">       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd</span><br><span class=\"line\">       http://www.springframework.org/schema/aop</span><br><span class=\"line\">       http://www.springframework.org/schema/aop/spring-aop-4.1.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;config&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;connectionProperties&quot; value=&quot;config.decrypt=true&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead1&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read1.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read1.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read1.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read1.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read1.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read1.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceRead2&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;read2.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;read2.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;read2.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;read2.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;read2.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;read2.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 基本属性 url、user、password --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;write.jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;$&#123;write.jdbc.user&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;$&#123;write.jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;write.jdbc.initPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;write.jdbc.minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;write.jdbc.maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.test.api.dao.datasource.DynamicRoutingDataSourceProxy&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSources&quot;&gt;</span><br><span class=\"line\">            &lt;list&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead1&quot; /&gt;</span><br><span class=\"line\">                &lt;ref bean=&quot;dataSourceRead2&quot; /&gt;</span><br><span class=\"line\">            &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">        &lt;!--轮询方式--&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSourcePollPattern&quot; value=&quot;1&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 针对myBatis的配置项 --&gt;</span><br><span class=\"line\">    &lt;!-- 配置sqlSessionFactory --&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-plugin-config.xml&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class=\"line\">        &lt;constructor-arg ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    &lt;!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类--&gt;</span><br><span class=\"line\">    &lt;bean id=&quot;mapper&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.test.api.dao.inte&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;sqlSessionTemplate&quot; ref=&quot;sqlSessionTemplate&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方案4\"><a href=\"#方案4\" class=\"headerlink\" title=\"方案4\"></a>方案4</h5><blockquote>\n<p>如果你的后台结构是spring+mybatis，可以通过spring的AbstractRoutingDataSource和mybatis Plugin拦截器实现非常友好的读写分离，原有代码不需要任何改变。推荐第四种方案</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:56</span><br><span class=\"line\"> * Desc: 动态数据源实现读写分离</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSource extends AbstractRoutingDataSource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object writeDataSource; //写数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object readDataSource; //读数据源</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void afterPropertiesSet() &#123;</span><br><span class=\"line\">        if (this.writeDataSource == null) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Property &apos;writeDataSource&apos; is required&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setDefaultTargetDataSource(writeDataSource);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();</span><br><span class=\"line\">        targetDataSources.put(DynamicDataSourceGlobal.WRITE.name(), writeDataSource);</span><br><span class=\"line\">        if(readDataSource != null) &#123;</span><br><span class=\"line\">            targetDataSources.put(DynamicDataSourceGlobal.READ.name(), readDataSource);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTargetDataSources(targetDataSources);</span><br><span class=\"line\">        super.afterPropertiesSet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object determineCurrentLookupKey() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DynamicDataSourceGlobal dynamicDataSourceGlobal = DynamicDataSourceHolder.getDataSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        if(dynamicDataSourceGlobal == null</span><br><span class=\"line\">                || dynamicDataSourceGlobal == DynamicDataSourceGlobal.WRITE) &#123;</span><br><span class=\"line\">            return DynamicDataSourceGlobal.WRITE.name();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return DynamicDataSourceGlobal.READ.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setWriteDataSource(Object writeDataSource) &#123;</span><br><span class=\"line\">        this.writeDataSource = writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getWriteDataSource() &#123;</span><br><span class=\"line\">        return writeDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getReadDataSource() &#123;</span><br><span class=\"line\">        return readDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setReadDataSource(Object readDataSource) &#123;</span><br><span class=\"line\">        this.readDataSource = readDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-07-14 10:58</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public enum DynamicDataSourceGlobal &#123;</span><br><span class=\"line\">    READ, WRITE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class DynamicDataSourceHolder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final ThreadLocal&lt;DynamicDataSourceGlobal&gt; holder = new ThreadLocal&lt;DynamicDataSourceGlobal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    private DynamicDataSourceHolder() &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void putDataSource(DynamicDataSourceGlobal dataSource)&#123;</span><br><span class=\"line\">        holder.set(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static DynamicDataSourceGlobal getDataSource()&#123;</span><br><span class=\"line\">        return holder.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void clearDataSource() &#123;</span><br><span class=\"line\">        holder.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class=\"line\">import org.springframework.transaction.TransactionDefinition;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-08-10 14:34</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DynamicDataSourceTransactionManager extends DataSourceTransactionManager &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 只读事务到读库，读写事务到写库</span><br><span class=\"line\">     * @param transaction</span><br><span class=\"line\">     * @param definition</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //设置数据源</span><br><span class=\"line\">        boolean readOnly = definition.isReadOnly();</span><br><span class=\"line\">        if(readOnly) &#123;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.READ);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(DynamicDataSourceGlobal.WRITE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        super.doBegin(transaction, definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 清理本地线程的数据源</span><br><span class=\"line\">     * @param transaction</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doCleanupAfterCompletion(Object transaction) &#123;</span><br><span class=\"line\">        super.doCleanupAfterCompletion(transaction);</span><br><span class=\"line\">        DynamicDataSourceHolder.clearDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.ibatis.executor.Executor;</span><br><span class=\"line\">import org.apache.ibatis.executor.keygen.SelectKeyGenerator;</span><br><span class=\"line\">import org.apache.ibatis.mapping.BoundSql;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.mapping.SqlCommandType;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\">import org.apache.ibatis.session.ResultHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.RowBounds;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Locale;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by IDEA</span><br><span class=\"line\"> * User: mashaohua</span><br><span class=\"line\"> * Date: 2016-08-10 11:09</span><br><span class=\"line\"> * Desc:</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Intercepts(&#123;</span><br><span class=\"line\">@Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;</span><br><span class=\"line\">        MappedStatement.class, Object.class &#125;),</span><br><span class=\"line\">@Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;</span><br><span class=\"line\">        MappedStatement.class, Object.class, RowBounds.class,</span><br><span class=\"line\">        ResultHandler.class &#125;) &#125;)</span><br><span class=\"line\">public class DynamicPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected static final Logger logger = LoggerFactory.getLogger(DynamicPlugin.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String REGEX = &quot;.*insert\\\\u0020.*|.*delete\\\\u0020.*|.*update\\\\u0020.*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final Map&lt;String, DynamicDataSourceGlobal&gt; cacheMap = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class=\"line\">        if(!synchronizationActive) &#123;</span><br><span class=\"line\">            Object[] objects = invocation.getArgs();</span><br><span class=\"line\">            MappedStatement ms = (MappedStatement) objects[0];</span><br><span class=\"line\"></span><br><span class=\"line\">            DynamicDataSourceGlobal dynamicDataSourceGlobal = null;</span><br><span class=\"line\"></span><br><span class=\"line\">            if((dynamicDataSourceGlobal = cacheMap.get(ms.getId())) == null) &#123;</span><br><span class=\"line\">                //读方法</span><br><span class=\"line\">                if(ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class=\"line\">                    //!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库</span><br><span class=\"line\">                    if(ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</span><br><span class=\"line\">                        dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[1]);</span><br><span class=\"line\">                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(&quot;[\\\\t\\\\n\\\\r]&quot;, &quot; &quot;);</span><br><span class=\"line\">                        if(sql.matches(REGEX)) &#123;</span><br><span class=\"line\">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            dynamicDataSourceGlobal = DynamicDataSourceGlobal.READ;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    dynamicDataSourceGlobal = DynamicDataSourceGlobal.WRITE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                logger.warn(&quot;设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;&#125;]..&quot;, ms.getId(), dynamicDataSourceGlobal.name(), ms.getSqlCommandType().name());</span><br><span class=\"line\">                cacheMap.put(ms.getId(), dynamicDataSourceGlobal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DynamicDataSourceHolder.putDataSource(dynamicDataSourceGlobal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return invocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\">        if (target instanceof Executor) &#123;</span><br><span class=\"line\">            return Plugin.wrap(target, this);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>spring-db.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;</span><br><span class=\"line\">        http://www.springframework.org/schema/beans </span><br><span class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class=\"line\">        http://www.springframework.org/schema/aop </span><br><span class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd </span><br><span class=\"line\">        http://www.springframework.org/schema/tx </span><br><span class=\"line\">  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- 数据库连接池 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;abstractDataSource&quot; abstract=&quot;true&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;</span><br><span class=\"line\">\t \t&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxActive&quot; value=&quot;$&#123;jdbc.max_active&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initial_size&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;maxWait&quot; value=&quot;$&#123;jdbc.max_wait&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minIdle&quot; value=&quot;$&#123;jdbc.min_idle&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;3000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=&quot;dataSourceRead&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.read.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.read.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.read.password&#125;&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;dataSourceWrite&quot; parent=&quot;abstractDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.ocean.common.DynamicDataSource&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;writeDataSource&quot; ref=&quot;dataSourceWrite&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;readDataSource&quot; ref=&quot;dataSourceRead&quot; /&gt;</span><br><span class=\"line\">        &lt;property name=&quot;defaultTargetDataSource&quot; ref=&quot;dataSourceWrite&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;transactionManager&quot; class=&quot;com.ocean.common.DynamicDataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tproxy-target-class=&quot;true&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis/mybatis-configuration.xml&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/mybatis/mapper/*.xml&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;basePackage&quot; value=&quot;com.ocean.dao&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p><strong><em>mybatis-configuration.xml</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\"> &lt;settings&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;FULL&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot; /&gt;</span><br><span class=\"line\">  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25000&quot; /&gt;</span><br><span class=\"line\"> &lt;/settings&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;plugins&gt;</span><br><span class=\"line\">   &lt;plugin interceptor=&quot;com.ocean.common.DynamicPlugin&quot;&gt;</span><br><span class=\"line\">   &lt;/plugin&gt;</span><br><span class=\"line\"> &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>本文转自<a href=\"http://www.jianshu.com/p/2222257f96d3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2222257f96d3</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnctyr2p0000k4nzmoue5get","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3e000dk4nzw9u4w04o"},{"post_id":"cjnctyr370006k4nz1nu6wazw","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3i000ik4nz2urgau37"},{"post_id":"cjnctyr3a000ak4nzn4xzamih","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3m000lk4nzt06i8g7i"},{"post_id":"cjnctyr2x0001k4nz4ole8mjt","category_id":"cjnctyr380007k4nzbc1lsf3y","_id":"cjnctyr3p000qk4nziqdp97kc"},{"post_id":"cjnctyr3d000ck4nzhahms1uw","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3s000tk4nz9ih6n772"},{"post_id":"cjnctyr3h000hk4nz681x7zoo","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3v000xk4nzppnr8y0r"},{"post_id":"cjnctyr340004k4nz8mlr2bbj","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3x0010k4nz1hgf4fee"},{"post_id":"cjnctyr3j000kk4nzb3z05vg2","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr3z0013k4nzcnwjnqtt"},{"post_id":"cjnctyr3o000pk4nzbqqtdfvl","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr420016k4nzmpbq85if"},{"post_id":"cjnctyr360005k4nzsuxzkp4u","category_id":"cjnctyr3m000mk4nz8dse84dm","_id":"cjnctyr440019k4nz9njf3tll"},{"post_id":"cjnctyr3r000sk4nzyrkf9496","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr48001ek4nz5fx5ii9c"},{"post_id":"cjnctyr3u000wk4nzthkisg4c","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr4a001hk4nzthp3p53g"},{"post_id":"cjnctyr3w000zk4nzvvaqa4lb","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr4d001mk4nz329c5qj0"},{"post_id":"cjnctyr3y0012k4nzdeh908wk","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr4f001pk4nz7llp812k"},{"post_id":"cjnctyr410015k4nzyit9ch4l","category_id":"cjnctyr45001ak4nzsoqbj9fy","_id":"cjnctyr4j001sk4nzn0eczct7"},{"post_id":"cjnctyr4b001jk4nzppzihpgv","category_id":"cjnctyr3m000mk4nz8dse84dm","_id":"cjnctyr4m001xk4nzwhu3zb8i"},{"post_id":"cjnctyr4e001ok4nzc6qsodjw","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr4p0020k4nz5l4kvbud"},{"post_id":"cjnctyr430018k4nzooyrdomg","category_id":"cjnctyr4c001kk4nz6qrnqj9t","_id":"cjnctyr4t0025k4nzthp7suq1"},{"post_id":"cjnctyr4h001rk4nzi9wd2ztt","category_id":"cjnctyr3m000mk4nz8dse84dm","_id":"cjnctyr4v0027k4nzaf1398su"},{"post_id":"cjnctyr49001gk4nzmi5vgfm1","category_id":"cjnctyr4c001kk4nz6qrnqj9t","_id":"cjnctyr4x002bk4nz0rckt9tl"},{"post_id":"cjnctyr4s0023k4nz2beonlhf","category_id":"cjnctyr3m000mk4nz8dse84dm","_id":"cjnctyr4y002ck4nz3ijimojj"},{"post_id":"cjnctyr4l001wk4nz0axfjdxd","category_id":"cjnctyr4r0022k4nzxvn0zpa9","_id":"cjnctyr4z002ek4nzqdb6nt5x"},{"post_id":"cjnctyr4v0029k4nzsky1pgcy","category_id":"cjnctyr4r0022k4nzxvn0zpa9","_id":"cjnctyr4z002hk4nzh1fzbpwb"},{"post_id":"cjnctyr4o001zk4nzl0dx3grf","category_id":"cjnctyr4x002ak4nzlbdi4vt6","_id":"cjnctyr50002kk4nzul5t1zny"},{"post_id":"cjnctyr4u0026k4nzz8uw35tp","category_id":"cjnctyr4z002fk4nzxbxlwf73","_id":"cjnctyr52002nk4nzs8tbariw"},{"post_id":"cjnctyr5j002yk4nziapu6v1t","category_id":"cjnctyr3m000mk4nz8dse84dm","_id":"cjnctyr5t0034k4nz5t7btyys"},{"post_id":"cjnctyr5n0030k4nz1lt4flr8","category_id":"cjnctyr4r0022k4nzxvn0zpa9","_id":"cjnctyr5u0036k4nztzoudsvn"},{"post_id":"cjnctyr5p0032k4nzyuuzinsx","category_id":"cjnctyr380007k4nzbc1lsf3y","_id":"cjnctyr5w003ak4nzr8i3uaku"},{"post_id":"cjnctyr5s0033k4nz8mx4d7zm","category_id":"cjnctyr5v0038k4nz7wrfq5j8","_id":"cjnctyr5z003ek4nzjmlk831f"},{"post_id":"cjnctyr6d003kk4nz34yljnws","category_id":"cjnctyr310002k4nzbay92t3p","_id":"cjnctyr6g003nk4nz3aak4u8k"},{"post_id":"cjnctyr6a003gk4nzrqafsgc0","category_id":"cjnctyr6c003ik4nzjkqs7gs8","_id":"cjnctyr6h003ok4nzomq1jdhl"},{"post_id":"cjnctyr6b003hk4nzpvqce57i","category_id":"cjnctyr6f003lk4nzsmhsdu2i","_id":"cjnctyr6j003sk4nze6dkujeu"},{"post_id":"cjnctyr6v003wk4nz1plbm5sr","category_id":"cjnctyr6f003lk4nzsmhsdu2i","_id":"cjnctyr6x003yk4nzztkups3v"}],"PostTag":[{"post_id":"cjnctyr2p0000k4nzmoue5get","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3a0009k4nz1lche3pa"},{"post_id":"cjnctyr370006k4nz1nu6wazw","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3c000bk4nzdnjcamv1"},{"post_id":"cjnctyr3a000ak4nzn4xzamih","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3g000gk4nzx4mijmbn"},{"post_id":"cjnctyr3d000ck4nzhahms1uw","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3j000jk4nz7qxb3ew8"},{"post_id":"cjnctyr3h000hk4nz681x7zoo","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3o000ok4nzl9wuaa9t"},{"post_id":"cjnctyr2x0001k4nz4ole8mjt","tag_id":"cjnctyr390008k4nz1awdvja9","_id":"cjnctyr3q000rk4nz6sc7a3gk"},{"post_id":"cjnctyr2x0001k4nz4ole8mjt","tag_id":"cjnctyr3f000fk4nz5we8j72f","_id":"cjnctyr3t000vk4nz8lek40ay"},{"post_id":"cjnctyr3j000kk4nzb3z05vg2","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3v000yk4nz4z2dm0yn"},{"post_id":"cjnctyr3o000pk4nzbqqtdfvl","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr3x0011k4nz8y00rnun"},{"post_id":"cjnctyr340004k4nz8mlr2bbj","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr400014k4nzniczorgw"},{"post_id":"cjnctyr3r000sk4nzyrkf9496","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr430017k4nzxu082xu3"},{"post_id":"cjnctyr3u000wk4nzthkisg4c","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr46001ck4nzc0kfqy69"},{"post_id":"cjnctyr360005k4nzsuxzkp4u","tag_id":"cjnctyr3t000uk4nzbu5rif1j","_id":"cjnctyr49001fk4nz57nhrcac"},{"post_id":"cjnctyr3w000zk4nzvvaqa4lb","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr4b001ik4nz7m3l4frf"},{"post_id":"cjnctyr3y0012k4nzdeh908wk","tag_id":"cjnctyr330003k4nz08mnzw1c","_id":"cjnctyr4e001nk4nzd18kdgxq"},{"post_id":"cjnctyr410015k4nzyit9ch4l","tag_id":"cjnctyr46001bk4nzkto4xi8z","_id":"cjnctyr4h001qk4nz97ac7c6i"},{"post_id":"cjnctyr4e001ok4nzc6qsodjw","tag_id":"cjnctyr46001bk4nzkto4xi8z","_id":"cjnctyr4l001vk4nz8s5cvgtz"},{"post_id":"cjnctyr430018k4nzooyrdomg","tag_id":"cjnctyr4d001lk4nzzvcvbpwc","_id":"cjnctyr4n001yk4nzax2h86ji"},{"post_id":"cjnctyr49001gk4nzmi5vgfm1","tag_id":"cjnctyr4d001lk4nzzvcvbpwc","_id":"cjnctyr4t0024k4nzpakwx7ad"},{"post_id":"cjnctyr4b001jk4nzppzihpgv","tag_id":"cjnctyr4q0021k4nz3atql4f2","_id":"cjnctyr4z002gk4nzk5k7dh1g"},{"post_id":"cjnctyr4b001jk4nzppzihpgv","tag_id":"cjnctyr4v0028k4nzqhslbxmg","_id":"cjnctyr50002ik4nzc6ab06e6"},{"post_id":"cjnctyr4h001rk4nzi9wd2ztt","tag_id":"cjnctyr4y002dk4nz84d0gv6r","_id":"cjnctyr51002lk4nzyw1vl723"},{"post_id":"cjnctyr4l001wk4nz0axfjdxd","tag_id":"cjnctyr50002jk4nzdxss6nrb","_id":"cjnctyr52002ok4nzhztukq7m"},{"post_id":"cjnctyr4o001zk4nzl0dx3grf","tag_id":"cjnctyr51002mk4nzz8447m6i","_id":"cjnctyr53002qk4nzpl64lrmb"},{"post_id":"cjnctyr4s0023k4nz2beonlhf","tag_id":"cjnctyr53002pk4nzwkd8b4r5","_id":"cjnctyr54002sk4nz4xe900yk"},{"post_id":"cjnctyr4u0026k4nzz8uw35tp","tag_id":"cjnctyr54002rk4nzqb21gdvq","_id":"cjnctyr56002uk4nzm1ja03oj"},{"post_id":"cjnctyr4v0029k4nzsky1pgcy","tag_id":"cjnctyr55002tk4nzk6jinjnj","_id":"cjnctyr58002wk4nzca0xx1ck"},{"post_id":"cjnctyr4v0029k4nzsky1pgcy","tag_id":"cjnctyr51002mk4nzz8447m6i","_id":"cjnctyr58002xk4nz5nge85e0"},{"post_id":"cjnctyr5p0032k4nzyuuzinsx","tag_id":"cjnctyr390008k4nz1awdvja9","_id":"cjnctyr5t0035k4nzulmkf17x"},{"post_id":"cjnctyr5j002yk4nziapu6v1t","tag_id":"cjnctyr5o0031k4nz74riapjd","_id":"cjnctyr5w0039k4nzpkhaoufh"},{"post_id":"cjnctyr5n0030k4nz1lt4flr8","tag_id":"cjnctyr55002tk4nzk6jinjnj","_id":"cjnctyr5y003ck4nzzyhigt3r"},{"post_id":"cjnctyr5n0030k4nz1lt4flr8","tag_id":"cjnctyr5u0037k4nz8lawppu8","_id":"cjnctyr5y003dk4nz9i2i41uu"},{"post_id":"cjnctyr5s0033k4nz8mx4d7zm","tag_id":"cjnctyr5x003bk4nz0dotnset","_id":"cjnctyr5z003fk4nzljcw0k2f"},{"post_id":"cjnctyr6a003gk4nzrqafsgc0","tag_id":"cjnctyr6d003jk4nzj9nvcnty","_id":"cjnctyr6i003qk4nz24nqrskw"},{"post_id":"cjnctyr6a003gk4nzrqafsgc0","tag_id":"cjnctyr6g003mk4nzdvyd38mg","_id":"cjnctyr6j003rk4nz3aqsu97h"},{"post_id":"cjnctyr6b003hk4nzpvqce57i","tag_id":"cjnctyr6h003pk4nzizytk2gd","_id":"cjnctyr6m003uk4nzpqdbucs6"},{"post_id":"cjnctyr6d003kk4nz34yljnws","tag_id":"cjnctyr6l003tk4nz2fcdyalj","_id":"cjnctyr6n003vk4nzduud5a0u"},{"post_id":"cjnctyr6v003wk4nz1plbm5sr","tag_id":"cjnctyr6w003xk4nz8vt05uid","_id":"cjnctyr6y0040k4nzjv6t3f4y"},{"post_id":"cjnctyr6v003wk4nz1plbm5sr","tag_id":"cjnctyr6x003zk4nzwih6f6if","_id":"cjnctyr6y0041k4nzfnco2tvw"}],"Tag":[{"name":"GitHub","_id":"cjnctyr330003k4nz08mnzw1c"},{"name":"RSA","_id":"cjnctyr390008k4nz1awdvja9"},{"name":"AES","_id":"cjnctyr3f000fk4nz5we8j72f"},{"name":"DRUID","_id":"cjnctyr3t000uk4nzbu5rif1j"},{"name":"hexo","_id":"cjnctyr46001bk4nzkto4xi8z"},{"name":"arithmetic","_id":"cjnctyr4d001lk4nzzvcvbpwc"},{"name":"jprofiler","_id":"cjnctyr4q0021k4nz3atql4f2"},{"name":"linux","_id":"cjnctyr4v0028k4nzqhslbxmg"},{"name":"UUID","_id":"cjnctyr4y002dk4nz84d0gv6r"},{"name":"RocketMQ","_id":"cjnctyr50002jk4nzdxss6nrb"},{"name":"spring","_id":"cjnctyr51002mk4nzz8447m6i"},{"name":"springboot","_id":"cjnctyr53002pk4nzwkd8b4r5"},{"name":"uml","_id":"cjnctyr54002rk4nzqb21gdvq"},{"name":"RabbitMQ","_id":"cjnctyr55002tk4nzk6jinjnj"},{"name":"jetty","_id":"cjnctyr5o0031k4nz74riapjd"},{"name":"windows","_id":"cjnctyr5u0037k4nz8lawppu8"},{"name":"Anaconda","_id":"cjnctyr5x003bk4nz0dotnset"},{"name":"Markdown","_id":"cjnctyr6d003jk4nzj9nvcnty"},{"name":"Atom","_id":"cjnctyr6g003mk4nzdvyd38mg"},{"name":"generator","_id":"cjnctyr6h003pk4nzizytk2gd"},{"name":"EGIT","_id":"cjnctyr6l003tk4nz2fcdyalj"},{"name":"Spring","_id":"cjnctyr6w003xk4nz8vt05uid"},{"name":"MyBatis","_id":"cjnctyr6x003zk4nzwih6f6if"}]}}